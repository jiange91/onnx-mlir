OVERVIEW: ONNX-MLIR - A modular optimizer driver

USAGE: onnx-mlir-opt [options] <input file>

OPTIONS:

General options:

  Compiler passes to run
    Passes:
      --affine-data-copy-generate                      -   Generate explicit copying for affine memory operations
        --fast-mem-capacity=<ulong>                    - Set fast memory space capacity in KiB (default: unlimited)
        --fast-mem-space=<uint>                        - Fast memory space identifier for copy generation (default: 1)
        --generate-dma                                 - Generate DMA instead of point-wise copy
        --min-dma-transfer=<int>                       - Minimum DMA transfer size supported by the target in bytes
        --skip-non-unit-stride-loops                   - Testing purposes: avoid non-unit stride loop choice depths for copy placement
        --slow-mem-space=<uint>                        - Slow memory space identifier for copy generation (default: 0)
        --tag-mem-space=<uint>                         - Tag memory space identifier for copy generation (default: 0)
      --affine-expand-index-ops                        -   Lower affine operations operating on indices into more fundamental operations
      --affine-loop-coalescing                         -   Coalesce nested loops with independent bounds into a single loop
      --affine-loop-fusion                             -   Fuse affine loop nests
        --fusion-compute-tolerance=<number>            - Fractional increase in additional computation tolerated while fusing
        --fusion-fast-mem-space=<uint>                 - Faster memory space number to promote fusion buffers to
        --fusion-local-buf-threshold=<ulong>           - Threshold size (KiB) for promoting local buffers to fast memory space
        --fusion-maximal                               - Enables maximal loop fusion
        --mode=<value>                                 - fusion mode to attempt
    =greedy                                      -   Perform greedy (both producer-consumer and sibling)  fusion
    =producer                                    -   Perform only producer-consumer fusion
    =sibling                                     -   Perform only sibling fusion
      --affine-loop-invariant-code-motion              -   Hoist loop invariant instructions outside of affine loops
      --affine-loop-normalize                          -   Apply normalization transformations to affine loop-like ops
        --promote-single-iter                          - Promote single iteration loops
      --affine-loop-tile                               -   Tile affine loop nests
        --cache-size=<ulong>                           - Set size of cache to tile for in KiB (default: 512)
        --separate                                     - Separate full and partial tiles (default: false)
        --tile-size=<uint>                             - Use this tile size for all loops
        --tile-sizes=<uint>                            - List of tile sizes for each perfect nest (overridden by -tile-size)
      --affine-loop-unroll                             -   Unroll affine loops
        --cleanup-unroll                               - Fully unroll the cleanup loop when possible.
        --unroll-factor=<uint>                         - Use this unroll factor for all loops being unrolled
        --unroll-full                                  - Fully unroll loops
        --unroll-full-threshold=<uint>                 - Unroll all loops with trip count less than or equal to this
        --unroll-num-reps=<uint>                       - Unroll innermost loops repeatedly this many times
        --unroll-up-to-factor                          - Allow unrolling up to the factor specified
      --affine-loop-unroll-jam                         -   Unroll and jam affine loops
        --unroll-jam-factor=<uint>                     - Use this unroll jam factor for all loops (default 4)
      --affine-parallelize                             -   Convert affine.for ops into 1-D affine.parallel
        --max-nested=<uint>                            - Maximum number of nested parallel loops to produce. Defaults to unlimited (UINT_MAX).
        --parallel-reductions                          - Whether to parallelize reduction loops. Defaults to false.
      --affine-pipeline-data-transfer                  -   Pipeline non-blocking data transfers between explicitly managed levels of the memory hierarchy
      --affine-scalrep                                 -   Replace affine memref accesses by scalars by forwarding stores to loads and eliminating redundant loads
      --affine-simplify-structures                     -   Simplify affine expressions in maps/sets and normalize memrefs
      --affine-super-vectorize                         -   Vectorize to a target independent n-D vector abstraction
        --test-fastest-varying=<long>                  - Specify a 1-D, 2-D or 3-D pattern of fastest varying memory dimensions to match. See defaultPatterns in Vectorize.cpp for a description and examples. This is used for testing purposes
        --vectorize-reductions                         - Vectorize known reductions expressed via iter_args. Switched off by default.
        --virtual-vector-size=<long>                   - Specify an n-D virtual vector size for vectorization
      --buffer-deallocation                            -   Adds all required dealloc operations for all allocations in the input program
      --buffer-hoisting                                -   Optimizes placement of allocation operations by moving them into common dominators and out of nested regions
      --buffer-loop-hoisting                           -   Optimizes placement of allocation operations by moving them out of loop nests
      --buffer-results-to-out-params                   -   Converts memref-typed function results to out-params
      --bufferization-bufferize                        -   Bufferize the `bufferization` dialect
      --bundle-memory-pools                            -   Bundle memory pools of internal MemRefs into a single memory pool.
      --canonicalize                                   -   Canonicalize operations
        --disable-patterns=<string>                    - Labels of patterns that should be filtered out during application
        --enable-patterns=<string>                     - Labels of patterns that should be used during application, all other patterns are filtered out
        --max-iterations=<long>                        - Max. iterations between applying patterns / simplifying regions
        --max-num-rewrites=<long>                      - Max. number of pattern rewrites within an iteration
        --region-simplify                              - Perform control flow optimizations to the region tree
        --test-convergence                             - Test only: Fail pass on non-convergence to detect cyclic pattern
        --top-down                                     - Seed the worklist in general top-down order
      --constprop-onnx                                 -   ConstProp ONNX operations into composition of other ONNX operations.
      --control-flow-sink                              -   Sink operations into conditional blocks
      --conv-opt-onnx                                  -   Perform ONNX to ONNX optimizations for optimized CPU execution of convolutions.
        --simd-data-layout                             - Enable SIMD data layout optimizations
      --convert-elementwise-to-linalg                  -   Convert ElementwiseMappable ops to linalg
      --convert-krnl-glob-to-alloc                     -   Convert krnl.glob to memref.alloc and read from file
        --omit-entry-point                             - Delete Krnl entry point to exclude runtime APIs.
                                                   The generated IR is used for PL pass
      --convert-krnl-glob-to-memref                    -   Convert krnl.glob to memref.glob
      --convert-krnl-to-affine                         -   Lower Krnl dialect.
      --convert-krnl-to-llvm                           -   Lower the Krnl Affine and Std dialects to LLVM.
        --verify-input-tensors                         - Verify input tensors whenever the entry point function is called.
                                                   Data type and shape are verified. Enable this may introduce overhead in inferencing.
      --convert-linalg-to-affine-loops                 -   Lower the operations from the linalg dialect into affine loops
      --convert-linalg-to-loops                        -   Lower the operations from the linalg dialect into loops
      --convert-linalg-to-parallel-loops               -   Lower the operations from the linalg dialect into parallel loops
      --convert-onnx-to-krnl                           -   Lower frontend ops to Krnl dialect.
        --emit-intermediate-ir                         - Emit intermediate IR rather than lowering to the krnl dialect.
        --enable-parallel                              - Enable parallelization
        --enable-simd                                  - Enable SIMD code gen
        --enable-tiling                                - Enable loop tiling and unrolling optimizations
      --convert-onnx-to-mhlo                           -   Lower frontend ops to Mhlo dialect.
      --convert-onnx-to-tosa                           -   Lower frontend ops to TOSA dialect.
      --convert-scf-to-cf                              -   Convert SCF dialect to ControlFlow dialect, replacing structured control flow with a CFG
      --convert-seq-to-memref                          -   Lower Krnl Seq ops to memref dialect.
      --convert-vector-to-llvm                         -   Lower the operations from the vector dialect into the LLVM dialect
        --enable-amx                                   - Enables the use of AMX dialect while lowering the vector dialect.
        --enable-arm-neon                              - Enables the use of ArmNeon dialect while lowering the vector dialect.
        --enable-arm-sve                               - Enables the use of ArmSVE dialect while lowering the vector dialect.
        --enable-x86vector                             - Enables the use of X86Vector dialect while lowering the vector dialect.
        --force-32bit-vector-indices                   - Allows compiler to assume vector indices fit in 32-bit if that yields faster code
        --reassociate-fp-reductions                    - Allows llvm to reassociate floating-point reductions for speed
      --convert-vector-to-scf                          -   Lower the operations from the vector dialect into the SCF dialect
        --full-unroll                                  - Perform full unrolling when converting vector transfers to SCF
        --lower-tensors                                - Lower transfer ops that operate on tensors
        --target-rank=<uint>                           - Target vector rank to which transfer ops should be lowered
      --cse                                            -   Eliminate common sub-expressions
      --decompose-onnx                                 -   Decompose ONNX operations into composition of other ONNX operations.
        --target=<string>                              - Target Dialect to decompose into
      --drop-equivalent-buffer-results                 -   Remove MemRef return values that are equivalent to a bbArg
      --elide-krnl-constants                           -   Elide the constant values of the Global Krnl operations.
      --eliminate-empty-tensors                        -   Try to eliminate all tensor.empty ops.
      --empty-tensor-to-alloc-tensor                   -   Replace all empty ops by alloc_tensor ops.
      --enable-memory-pool                             -   Enable a memory pool for allocating internal MemRefs.
      --expand-strided-metadata                        -   Expand memref operations into easier to analyze constructs
      --finalizing-bufferize                           -   Finalize a partial bufferization
      --fold-memref-alias-ops                          -   Fold memref alias ops into consumer load/store ops
      --func-bufferize                                 -   Bufferize func/call/return ops
      --generate-runtime-verification                  -   Generate additional runtime op verification checks
      --inline                                         -   Inline function calls
        --default-pipeline=<string>                    - The default optimizer pipeline used for callables
        --max-iterations=<uint>                        - Maximum number of iterations when inlining within an SCC
        --op-pipelines=<pass-manager>                  - Callable operation specific optimizer pipelines (in the form of `dialect.op(pipeline)`)
      --instrument                                     -   instrument on ops.
        --instrument-after                             - insert instrument after op
        --instrument-before                            - insert instrument before op
        --instrument-ops=<string>                      - Specify regex for ops to be instrumented:
                                                   "NONE" or "" for no instrument,
                                                   "regex1,regex2, ..." for the specified ops.
                                                   e.g. "onnx.,zhigh." for onnx and zhigh ops.
                                                   e.g. "onnx.Conv" for onnx Conv ops.
        --report-memory                                - instrument runtime reports memory usage
        --report-time                                  - instrument runtime reports time usage
      --instrument-onnx-runtime-signature              -   instrument on onnx ops to print their input operand's type signature
      --linalg-bufferize                               -   Bufferize the linalg dialect
      --linalg-detensorize                             -   Detensorize linalg ops
        --aggressive-mode                              - Detensorize all ops that qualify for detensoring along with branch operands and basic-block arguments.
      --linalg-fold-unit-extent-dims                   -   Remove unit-extent dimension in Linalg ops on tensors
        --fold-one-trip-loops-only                     - Only folds the one-trip loops from Linalg ops on tensors (for testing purposes only)
        --use-rank-reducing-slices                     - Generate rank-reducing slices instead of reassociative reshapes
      --linalg-fuse-elementwise-ops                    -   Fuse elementwise operations on tensors
      --linalg-generalize-named-ops                    -   Convert named ops into generic ops
      --linalg-inline-scalar-operands                  -   Inline scalar operands into linalg generic ops
      --linalg-named-op-conversion                     -   Convert from one named linalg op to another.
      --loop-invariant-code-motion                     -   Hoist loop invariant instructions outside of the loop
      --lower-affine                                   -   Lower Affine operations to a combination of Standard and SCF operations
      --lower-krnl-region                              -   Move ops in krnl.region operation out and erase this op
      --lower-krnl-shape                               -   Lower krnl.shape operation to use Shape dialect operations.
      --lower-krnl-shape-to-std                        -   Lowers krnl shape-related operations.
      --memref-emulate-wide-int                        -   Emulate 2*N-bit integer operations using N-bit operations
        --widest-int-supported=<uint>                  - Widest integer type supported by the target
      --memref-expand                                  -   Legalize memref operations to be convertible to LLVM.
      --normalize-memrefs                              -   Normalize memrefs
      --one-shot-bufferize                             -   One-Shot Bufferize
        --allow-return-allocs                          - Allows returning/yielding new allocations from a block.
        --allow-unknown-ops                            - Allows unknown (not bufferizable) ops in the input IR.
        --analysis-fuzzer-seed=<uint>                  - Test only: Analyze ops in random order with a given seed (fuzzer)
        --analysis-heuristic=<string>                  - Heuristic that control the IR traversal during analysis
        --bufferize-function-boundaries                - Bufferize function boundaries (experimental).
        --copy-before-write                            - Skip the analysis. Make a buffer copy on every write.
        --create-deallocs                              - Specify if buffers should be deallocated. For compatibility with core bufferization passes.
        --dialect-filter=<string>                      - Restrict bufferization to ops from these dialects.
        --function-boundary-type-conversion=<string>   - Controls layout maps when bufferizing function signatures.
        --must-infer-memory-space                      - The memory space of an memref types must always be inferred. If unset, a default memory space of 0 is used otherwise.
        --no-analysis-func-filter=<string>             - Skip analysis of functions with these symbol names.Set copyBeforeWrite to true when bufferizing them.
        --print-conflicts                              - Test only: Annotate IR with RaW conflicts. Requires test-analysis-only.
        --test-analysis-only                           - Test only: Only run inplaceability analysis and annotate IR
        --unknown-type-conversion=<string>             - Controls layout maps for non-inferrable memref types.
      --onnx-dim-analysis                              -   Perform an analysis on unknown dimensions in ONNX ops
      --onnx-op-transform                              -   Invoke passes iteratively that transform ONNX operation.
        --onnx-op-transform-report                     - Report diagnostic info for op transform passes.
        --onnx-op-transform-simd-data-layout           - Enable SIMD data layout opt in op transform passes.
        --onnx-op-transform-target-cpu                 - Target CPU op transform passes.
        --onnx-op-transform-threshold=<int>            - max iteration for op transform passes.
      --onnx-pre-krnl-verify                           -   Verify onnx ops.
      --optimize-memory-pools                          -   Optimize the static and dynamic memory pools.
      --print-op-stats                                 -   Print statistics of operations
        --json                                         - print the stats as JSON
      --promote-buffers-to-stack                       -   Promotes heap-based allocations to automatically managed stack-based allocations
        --max-alloc-size-in-bytes=<uint>               - Maximal size in bytes to promote allocations to stack.
        --max-rank-of-allocated-memref=<uint>          - Maximal memref rank to promote dynamic buffers.
      --resolve-ranked-shaped-type-result-dims         -   Resolve memref.dim of result values of ranked shape type
      --resolve-shaped-type-result-dims                -   Resolve memref.dim of result values
      --sccp                                           -   Sparse Conditional Constant Propagation
      --scf-bufferize                                  -   Bufferize the scf dialect.
      --scf-for-loop-canonicalization                  -   Canonicalize operations within scf.for loop bodies
      --scf-for-loop-peeling                           -   Peel `for` loops at their upper bounds.
        --skip-partial                                 - Do not peel loops inside of the last, partial iteration of another already peeled loop.
      --scf-for-loop-range-folding                     -   Fold add/mul ops into loop range
      --scf-for-loop-specialization                    -   Specialize `for` loops for vectorization
      --scf-for-to-while                               -   Convert SCF for loops to SCF while loops
      --scf-parallel-loop-collapsing                   -   Collapse parallel loops to use less induction variables
        --collapsed-indices-0=<uint>                   - Which loop indices to combine 0th loop index
        --collapsed-indices-1=<uint>                   - Which loop indices to combine into the position 1 loop index
        --collapsed-indices-2=<uint>                   - Which loop indices to combine into the position 2 loop index
      --scf-parallel-loop-fusion                       -   Fuse adjacent parallel loops
      --scf-parallel-loop-specialization               -   Specialize parallel loops for vectorization
      --scf-parallel-loop-tiling                       -   Tile parallel loops
        --no-min-max-bounds                            - Perform tiling with fixed upper bound with inbound check inside the internal loops
        --parallel-loop-tile-sizes=<long>              - Factors to tile parallel loops by
      --scrub-disposable                               -   
      --shape-inference                                -   Shape inference for frontend dialects.
      --simplify-shape-related-ops-onnx                -   Perform ONNX to ONNX optimizations for shape-related operations
      --snapshot-op-locations                          -   Generate new locations from the current IR
        --filename=<string>                            - The filename to print the generated IR
        --tag=<string>                                 - A tag to use when fusing the new locations with the original. If unset, the locations are replaced.
      --strip-debuginfo                                -   Strip debug info from all operations
      --symbol-dce                                     -   Eliminate dead symbols
      --symbol-privatize                               -   Mark symbols private
        --exclude=<string>                             - Comma separated list of symbols that should not be marked private
      --topological-sort                               -   Sort regions without SSA dominance in topological order
      --view-op-graph                                  -   Print Graphviz visualization of an operation
        --max-label-len=<uint>                         - Limit attribute/type length to number of chars
        --print-attrs                                  - Print attributes of operations
        --print-control-flow-edges                     - Print control flow edges
        --print-data-flow-edges                        - Print data flow edges
        --print-result-types                           - Print result types of operations
  --mlir-disable-threading                             - Disable multi-threading within MLIR, overrides any further call to MLIRContext::enableMultiThreading()
  --mlir-elide-elementsattrs-if-larger=<uint>          - Elide ElementsAttrs with "..." that have more elements than the given upper limit
  --mlir-pass-pipeline-crash-reproducer=<string>       - Generate a .mlir reproducer file at the given output path if the pass manager crashes or fails
  --mlir-pass-pipeline-local-reproducer                - When generating a crash reproducer, attempt to generated a reproducer with the smallest pipeline.
  --mlir-pass-statistics                               - Display the statistics of each pass
  --mlir-pass-statistics-display=<value>               - Display method for pass statistics
    =list                                              -   display the results in a merged list sorted by pass name
    =pipeline                                          -   display the results with a nested pipeline view
  --mlir-pretty-debuginfo                              - Print pretty debug info in MLIR output
  --mlir-print-debuginfo                               - Print debug info in MLIR output
  --mlir-print-elementsattrs-with-hex-if-larger=<long> - Print DenseElementsAttrs with a hex string that have more elements than the given upper limit (use -1 to disable)
  --mlir-print-ir-after=<pass-arg>                     - Print IR after specified passes
  --mlir-print-ir-after-all                            - Print IR after each pass
  --mlir-print-ir-after-change                         - When printing the IR after a pass, only print if the IR changed
  --mlir-print-ir-after-failure                        - When printing the IR after a pass, only print if the pass failed
  --mlir-print-ir-before=<pass-arg>                    - Print IR before specified passes
  --mlir-print-ir-before-all                           - Print IR before each pass
  --mlir-print-ir-module-scope                         - When printing IR for print-ir-[before|after]{-all} always print the top-level operation
  --mlir-print-local-scope                             - Print with local scope and inline information (eliding aliases for attributes, types, and locations
  --mlir-print-op-on-diagnostic                        - When a diagnostic is emitted on an operation, also print the operation as an attached note
  --mlir-print-stacktrace-on-diagnostic                - When a diagnostic is emitted, also print the stack trace as an attached note
  --mlir-print-value-users                             - Print users of operation results and block arguments as a comment
  --mlir-timing                                        - Display execution times
  --mlir-timing-display=<value>                        - Display method for timing data
    =list                                              -   display the results in a list sorted by total time
    =tree                                              -   display the results ina with a nested tree view
  --pass-pipeline=<string>                             - Textual description of the pass pipeline to run

Generic Options:

  --help                                               - Display available options (--help-hidden for more)
  --help-list                                          - Display list of available options (--help-list-hidden for more)
  --version                                            - Display the version of this program

ONNX-MLIR-OPT Options:
These are opt frontend options.

  --allow-unregistered-dialect                         - Allow operation with no registered dialects
  -o <filename>                                        - Output filename
  --split-input-file                                   - Split the input file into pieces and process each chunk independently
  --verify-diagnostics                                 - Check that emitted diagnostics match expected-* lines on the corresponding line
  --verify-each                                        - Run the verifier after each transformation pass

Optimization Options:

  Levels:
      --O0                                                - Optimization level 0 (default):
      --O1                                                - Optimization level 1,
      --O2                                                - Optimization level 2,
      --O3                                                - Optimization level 3.
  --instrument-stage=<value>                           - Specify stage to be instrumented:
    =Onnx                                              -   Profile for onnx ops.
  --maccel=<value>                                     - Specify an accelerator to generate code for
    =NONE                                              -   No accelerator
