#map = affine_map<(d0, d1) -> (d0 * 64 + d1)>
#map1 = affine_map<(d0) -> (-d0, 0)>
#map2 = affine_map<(d0) -> (-d0 + 26, 3)>
#map3 = affine_map<(d0, d1) -> (-d1, 0)>
#map4 = affine_map<(d0, d1) -> (-d1 + 26, 3)>
#map5 = affine_map<(d0, d1) -> (d0 + d1 * 32)>
#map6 = affine_map<(d0, d1) -> (d0 + d1)>
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
  func.func @main_graph(%arg0: memref<10000x32x26x26xf32>) -> memref<10000x64x24x24xf32> attributes {input_names = ["image"], llvm.emit_c_interface, output_names = ["prediction"]} {
    %cst = arith.constant 0.000000e+00 : f32
    %0 = "krnl.global"() {name = "constant_0", shape = [64, 32, 3, 3], value = dense_resource<__elided__> : tensor<64x32x3x3xf32>} : () -> memref<64x32x3x3xf32>
    %1 = "krnl.global"() {name = "constant_1", shape = [64], value = dense<[0.0454286225, -0.0251529515, -0.0390601605, 0.0234979205, -0.00387028977, 0.026251737, 0.0149585791, -0.0145746805, -0.00546370074, 0.0561019666, -0.0290355831, -0.0263785198, -4.705120e-03, -0.016309265, 0.00752952322, -0.0544403046, -0.013315931, -0.00765869394, -0.0570560098, -0.052675575, -0.0248324163, 0.0264050253, 0.0308165513, -0.0241246745, -3.820720e-02, -0.00482943282, 0.031617526, -0.0441588387, 0.00606069341, 0.00315543637, 0.0464841239, 0.0404539965, 0.0137190558, -0.0353627652, -0.0380027518, -0.0442069247, -0.00280503556, -0.0512858815, -0.0457443073, 0.0471067764, -0.0454609096, -0.00860369578, -0.00485402346, -0.0391073152, -0.0574967042, 5.795150e-02, -0.0562449396, -0.00325459242, 0.0453238823, 0.00692326948, 0.0113944151, 0.0175918229, -0.0212651789, -0.0273541547, 0.041212108, -0.0090835467, -0.0532994233, 0.0518223532, 0.0188846402, -0.0236228183, -0.0555398799, -0.0465125516, -0.0483490229, -0.0311886612]> : tensor<64xf32>} : () -> memref<64xf32>
    %alloc = memref.alloc() {alignment = 16 : i64} : memref<10000x64x24x24xf32>
    %alloca = memref.alloca() : memref<f32>
    affine.for %arg1 = 0 to 10000 {
      affine.for %arg2 = 0 to 1 {
        affine.for %arg3 = 0 to 64 {
          %2 = affine.apply #map(%arg2, %arg3)
          affine.for %arg4 = 0 to 24 {
            affine.for %arg5 = 0 to 24 {
              affine.store %cst, %alloca[] : memref<f32>
              affine.for %arg6 = 0 to 32 {
                affine.for %arg7 = max #map1(%arg4) to min #map2(%arg4) {
                  affine.for %arg8 = max #map3(%arg4, %arg5) to min #map4(%arg4, %arg5) {
                    %6 = affine.apply #map5(%arg6, %arg2)
                    %7 = affine.apply #map6(%arg7, %arg4)
                    %8 = affine.apply #map6(%arg8, %arg5)
                    %9 = affine.load %arg0[%arg1, %6, %7, %8] : memref<10000x32x26x26xf32>
                    %10 = affine.load %0[%2, %arg6, %arg7, %arg8] : memref<64x32x3x3xf32>
                    %11 = affine.load %alloca[] : memref<f32>
                    %12 = arith.mulf %9, %10 : f32
                    %13 = arith.addf %11, %12 : f32
                    affine.store %13, %alloca[] : memref<f32>
                  }
                }
              }
              %3 = affine.load %alloca[] : memref<f32>
              %4 = affine.load %1[%2] : memref<64xf32>
              %5 = arith.addf %3, %4 : f32
              affine.store %5, %alloc[%arg1, %2, %arg4, %arg5] : memref<10000x64x24x24xf32>
            }
          }
        }
      }
    }
    return %alloc : memref<10000x64x24x24xf32>
  }
  "krnl.entry_point"() {func = @main_graph, numInputs = 1 : i32, numOutputs = 1 : i32, signature = "[    { \22type\22 : \22f32\22 , \22dims\22 : [10000 , 32 , 26 , 26] , \22name\22 : \22image\22 }\0A\0A]\00@[   { \22type\22 : \22f32\22 , \22dims\22 : [10000 , 64 , 24 , 24] , \22name\22 : \22prediction\22 }\0A\0A]\00"} : () -> ()
}
