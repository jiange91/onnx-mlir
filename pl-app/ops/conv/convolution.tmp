#map = affine_map<(d0, d1) -> (d0 * 32 + d1)>
#map1 = affine_map<(d0) -> (-d0, 0)>
#map2 = affine_map<(d0) -> (-d0 + 28, 3)>
#map3 = affine_map<(d0, d1) -> (-d1, 0)>
#map4 = affine_map<(d0, d1) -> (-d1 + 28, 3)>
#map5 = affine_map<(d0)[s0] -> (d0 + s0)>
#map6 = affine_map<(d0, d1) -> (d0 + d1)>
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
  func.func @main_graph(%arg0: memref<10000x1x28x28xf32>) -> memref<10000x32x26x26xf32> attributes {input_names = ["image"], llvm.emit_c_interface, output_names = ["prediction"]} {
    %cst = arith.constant 0.000000e+00 : f32
    %0 = "krnl.global"() {name = "constant_0", shape = [32, 1, 3, 3], value = dense_resource<__elided__> : tensor<32x1x3x3xf32>} : () -> memref<32x1x3x3xf32>
    %alloc = memref.alloc() {alignment = 16 : i64} : memref<10000x32x26x26xf32>
    %alloca = memref.alloca() : memref<f32>
    affine.for %arg1 = 0 to 10000 {
      affine.for %arg2 = 0 to 1 {
        affine.for %arg3 = 0 to 32 {
          %1 = affine.apply #map(%arg2, %arg3)
          affine.for %arg4 = 0 to 26 {
            affine.for %arg5 = 0 to 26 {
              affine.store %cst, %alloca[] : memref<f32>
              affine.for %arg6 = 0 to 1 {
                affine.for %arg7 = max #map1(%arg4) to min #map2(%arg4) {
                  affine.for %arg8 = max #map3(%arg4, %arg5) to min #map4(%arg4, %arg5) {
                    %3 = affine.apply #map5(%arg6)[%arg2]
                    %4 = affine.apply #map6(%arg7, %arg4)
                    %5 = affine.apply #map6(%arg8, %arg5)
                    %6 = affine.load %arg0[%arg1, %3, %4, %5] : memref<10000x1x28x28xf32>
                    %7 = affine.load %0[%1, %arg6, %arg7, %arg8] : memref<32x1x3x3xf32>
                    %8 = affine.load %alloca[] : memref<f32>
                    %9 = arith.mulf %6, %7 : f32
                    %10 = arith.addf %8, %9 : f32
                    affine.store %10, %alloca[] : memref<f32>
                  }
                }
              }
              %2 = affine.load %alloca[] : memref<f32>
              affine.store %2, %alloc[%arg1, %1, %arg4, %arg5] : memref<10000x32x26x26xf32>
            }
          }
        }
      }
    }
    return %alloc : memref<10000x32x26x26xf32>
  }
  "krnl.entry_point"() {func = @main_graph, numInputs = 1 : i32, numOutputs = 1 : i32, signature = "[    { \22type\22 : \22f32\22 , \22dims\22 : [10000 , 1 , 28 , 28] , \22name\22 : \22image\22 }\0A\0A]\00@[   { \22type\22 : \22f32\22 , \22dims\22 : [10000 , 32 , 26 , 26] , \22name\22 : \22prediction\22 }\0A\0A]\00"} : () -> ()
}
