#map = affine_map<(d0) -> (d0 + 1)>
#map1 = affine_map<(d0) -> (d0 + 2)>
#map2 = affine_map<(d0) -> (d0 + 3)>
#map3 = affine_map<(d0) -> (d0 + 512)>
#map4 = affine_map<(d0) -> (d0 + 1024)>
#map5 = affine_map<(d0, d1) -> (d0 * 32768 + d1 * 256)>
#map6 = affine_map<(d0, d1) -> (d0 * 256 + d1 * 258048)>
#map7 = affine_map<(d0, d1) -> (d0 * 258048 + d1 * 256)>
#map8 = affine_map<(d0, d1) -> (d0 * 256 + d1 * 32768)>
#map9 = affine_map<(d0, d1) -> (d1 + d0)>
#map10 = affine_map<(d0, d1, d2, d3) -> (d3 + d2)>
#map11 = affine_map<(d0) -> (d0)>
#map12 = affine_map<(d0) -> (d0 + 64)>
#map13 = affine_map<(d0) -> (d0 + 32)>
#map14 = affine_map<(d0, d1) -> (d1 - d0)>
#map15 = affine_map<(d0, d1, d2, d3, d4) -> (d4 - d3)>
#set = affine_set<() : (1 >= 0, 1 >= 0, 1 >= 0)>
#set1 = affine_set<(d0, d1, d2, d3, d4) : (1 >= 0, 1 >= 0, 1 >= 0)>
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
  func.func @main_graph(%arg0: memref<1008x64x512xf32>) -> memref<1008x64x512xf32> attributes {input_names = ["series"], llvm.emit_c_interface, output_names = ["prediction"]} {
    %c0 = arith.constant 0 : index
    %c0_0 = arith.constant 0 : index
    %c0_1 = arith.constant 0 : index
    %c0_2 = arith.constant 0 : index
    %c0_3 = arith.constant 0 : index
    %c0_4 = arith.constant 0 : index
    %cst = arith.constant 5.120000e+02 : f32
    %c256_i64 = arith.constant 256 : i64
    %cst_5 = arith.constant 0xFF800000 : f32
    %c256 = arith.constant 256 : index
    %c128 = arith.constant 128 : index
    %c64512 = arith.constant 64512 : index
    %c2048 = arith.constant 2048 : index
    %c0_6 = arith.constant 0 : index
    %cst_7 = arith.constant 0.000000e+00 : f32
    %c1536 = arith.constant 1536 : index
    %c512 = arith.constant 512 : index
    %c64 = arith.constant 64 : index
    %c1008 = arith.constant 1008 : index
    %0 = "krnl.global"() {name = "constant_0", shape = [1536], value = dense<0.000000e+00> : tensor<1536xf32>} : () -> memref<1536xf32>
    %1 = "krnl.global"() {name = "constant_1", shape = [512, 512], value = dense_resource<__elided__> : tensor<512x512xf32>} : () -> memref<512x512xf32>
    %2 = "krnl.global"() {name = "constant_2", shape = [512], value = dense<0.000000e+00> : tensor<512xf32>} : () -> memref<512xf32>
    %3 = "krnl.global"() {name = "constant_3", shape = [2048], value = dense_resource<__elided__> : tensor<2048xf32>} : () -> memref<2048xf32>
    %4 = "krnl.global"() {name = "constant_4", shape = [512], value = dense<1.000000e+00> : tensor<512xf32>} : () -> memref<512xf32>
    %5 = "krnl.global"() {name = "constant_5", shape = [512, 1536], value = dense_resource<__elided__> : tensor<512x1536xf32>} : () -> memref<512x1536xf32>
    %6 = "krnl.global"() {name = "constant_6", shape = [512, 2048], value = dense_resource<__elided__> : tensor<512x2048xf32>} : () -> memref<512x2048xf32>
    %7 = "krnl.global"() {name = "constant_7", shape = [2048, 512], value = dense_resource<__elided__> : tensor<2048x512xf32>} : () -> memref<2048x512xf32>
    %alloc = memref.alloc() {alignment = 16 : i64} : memref<1008x64x1536xf32>
    %c1008_8 = arith.constant 1008 : index
    %c64_9 = arith.constant 64 : index
    %c1536_10 = arith.constant 1536 : index
    %c0_11 = arith.constant 0 : index
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 1536 {
          affine.store %cst_7, %alloc[%arg1, %arg2, %arg3] : memref<1008x64x1536xf32>
        }
      }
    }
    affine.for %arg1 = %c0_6 to %c1008 {
      affine.for %arg2 = %c0_6 to %c64 step 4 {
        affine.for %arg3 = %c0_6 to %c1536 step 8 {
          affine.for %arg4 = %c0_6 to %c512 step 8 {
            %c1008_77 = arith.constant 1008 : index
            %c64_78 = arith.constant 64 : index
            %c512_79 = arith.constant 512 : index
            %c512_80 = arith.constant 512 : index
            %c1536_81 = arith.constant 1536 : index
            %c1008_82 = arith.constant 1008 : index
            %c64_83 = arith.constant 64 : index
            %c1536_84 = arith.constant 1536 : index
            %c4 = arith.constant 4 : index
            %c8 = arith.constant 8 : index
            %c8_85 = arith.constant 8 : index
            %c64_86 = arith.constant 64 : index
            %c1536_87 = arith.constant 1536 : index
            %c512_88 = arith.constant 512 : index
            %c1 = arith.constant 1 : index
            %c0_89 = arith.constant 0 : index
            %c0_90 = arith.constant 0 : index
            %c0_91 = arith.constant 0 : index
            %c0_92 = arith.constant 0 : index
            %c0_93 = arith.constant 0 : index
            %c0_94 = arith.constant 0 : index
            %c1_95 = arith.constant 1 : index
            %c1_96 = arith.constant 1 : index
            %c1_97 = arith.constant 1 : index
            %c0_98 = arith.constant 0 : index
            affine.if #set() {
              %alloca = memref.alloca() {alignment = 64 : i64} : memref<4xvector<8xf32>>
              %c0_99 = arith.constant 0 : index
              %c0_100 = arith.constant 0 : index
              %14 = arith.addi %c0_4, %arg2 : index
              %15 = arith.addi %c0_100, %arg3 : index
              %16 = vector.load %alloc[%arg1, %14, %15] : memref<1008x64x1536xf32>, vector<8xf32>
              affine.store %16, %alloca[%c0_4] : memref<4xvector<8xf32>>
              %17 = affine.apply #map(%c0_4)
              %18 = arith.addi %17, %arg2 : index
              %19 = arith.addi %c0_100, %arg3 : index
              %20 = vector.load %alloc[%arg1, %18, %19] : memref<1008x64x1536xf32>, vector<8xf32>
              affine.store %20, %alloca[%17] : memref<4xvector<8xf32>>
              %21 = affine.apply #map1(%c0_4)
              %22 = arith.addi %21, %arg2 : index
              %23 = arith.addi %c0_100, %arg3 : index
              %24 = vector.load %alloc[%arg1, %22, %23] : memref<1008x64x1536xf32>, vector<8xf32>
              affine.store %24, %alloca[%21] : memref<4xvector<8xf32>>
              %25 = affine.apply #map2(%c0_4)
              %26 = arith.addi %25, %arg2 : index
              %27 = arith.addi %c0_100, %arg3 : index
              %28 = vector.load %alloc[%arg1, %26, %27] : memref<1008x64x1536xf32>, vector<8xf32>
              affine.store %28, %alloca[%25] : memref<4xvector<8xf32>>
              affine.for %arg5 = 0 to 8 step 4 {
                %44 = arith.addi %c0_4, %arg2 : index
                %45 = arith.addi %arg5, %arg4 : index
                %46 = memref.load %arg0[%arg1, %44, %45] : memref<1008x64x512xf32>
                %47 = vector.broadcast %46 : f32 to vector<8xf32>
                %48 = arith.addi %arg5, %arg4 : index
                %49 = arith.addi %c0_100, %arg3 : index
                %50 = vector.load %5[%48, %49] : memref<512x1536xf32>, vector<8xf32>
                %51 = affine.load %alloca[%c0_4] : memref<4xvector<8xf32>>
                %52 = vector.fma %47, %50, %51 : vector<8xf32>
                affine.store %52, %alloca[%c0_4] : memref<4xvector<8xf32>>
                %53 = affine.apply #map(%arg5)
                %54 = arith.addi %c0_4, %arg2 : index
                %55 = arith.addi %53, %arg4 : index
                %56 = memref.load %arg0[%arg1, %54, %55] : memref<1008x64x512xf32>
                %57 = vector.broadcast %56 : f32 to vector<8xf32>
                %58 = arith.addi %53, %arg4 : index
                %59 = arith.addi %c0_100, %arg3 : index
                %60 = vector.load %5[%58, %59] : memref<512x1536xf32>, vector<8xf32>
                %61 = affine.load %alloca[%c0_4] : memref<4xvector<8xf32>>
                %62 = vector.fma %57, %60, %61 : vector<8xf32>
                affine.store %62, %alloca[%c0_4] : memref<4xvector<8xf32>>
                %63 = affine.apply #map1(%arg5)
                %64 = arith.addi %c0_4, %arg2 : index
                %65 = arith.addi %63, %arg4 : index
                %66 = memref.load %arg0[%arg1, %64, %65] : memref<1008x64x512xf32>
                %67 = vector.broadcast %66 : f32 to vector<8xf32>
                %68 = arith.addi %63, %arg4 : index
                %69 = arith.addi %c0_100, %arg3 : index
                %70 = vector.load %5[%68, %69] : memref<512x1536xf32>, vector<8xf32>
                %71 = affine.load %alloca[%c0_4] : memref<4xvector<8xf32>>
                %72 = vector.fma %67, %70, %71 : vector<8xf32>
                affine.store %72, %alloca[%c0_4] : memref<4xvector<8xf32>>
                %73 = affine.apply #map2(%arg5)
                %74 = arith.addi %c0_4, %arg2 : index
                %75 = arith.addi %73, %arg4 : index
                %76 = memref.load %arg0[%arg1, %74, %75] : memref<1008x64x512xf32>
                %77 = vector.broadcast %76 : f32 to vector<8xf32>
                %78 = arith.addi %73, %arg4 : index
                %79 = arith.addi %c0_100, %arg3 : index
                %80 = vector.load %5[%78, %79] : memref<512x1536xf32>, vector<8xf32>
                %81 = affine.load %alloca[%c0_4] : memref<4xvector<8xf32>>
                %82 = vector.fma %77, %80, %81 : vector<8xf32>
                affine.store %82, %alloca[%c0_4] : memref<4xvector<8xf32>>
                %83 = affine.apply #map(%c0_4)
                %84 = arith.addi %83, %arg2 : index
                %85 = arith.addi %arg5, %arg4 : index
                %86 = memref.load %arg0[%arg1, %84, %85] : memref<1008x64x512xf32>
                %87 = vector.broadcast %86 : f32 to vector<8xf32>
                %88 = arith.addi %arg5, %arg4 : index
                %89 = arith.addi %c0_100, %arg3 : index
                %90 = vector.load %5[%88, %89] : memref<512x1536xf32>, vector<8xf32>
                %91 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %92 = vector.fma %87, %90, %91 : vector<8xf32>
                affine.store %92, %alloca[%83] : memref<4xvector<8xf32>>
                %93 = affine.apply #map(%arg5)
                %94 = arith.addi %83, %arg2 : index
                %95 = arith.addi %93, %arg4 : index
                %96 = memref.load %arg0[%arg1, %94, %95] : memref<1008x64x512xf32>
                %97 = vector.broadcast %96 : f32 to vector<8xf32>
                %98 = arith.addi %93, %arg4 : index
                %99 = arith.addi %c0_100, %arg3 : index
                %100 = vector.load %5[%98, %99] : memref<512x1536xf32>, vector<8xf32>
                %101 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %102 = vector.fma %97, %100, %101 : vector<8xf32>
                affine.store %102, %alloca[%83] : memref<4xvector<8xf32>>
                %103 = affine.apply #map1(%arg5)
                %104 = arith.addi %83, %arg2 : index
                %105 = arith.addi %103, %arg4 : index
                %106 = memref.load %arg0[%arg1, %104, %105] : memref<1008x64x512xf32>
                %107 = vector.broadcast %106 : f32 to vector<8xf32>
                %108 = arith.addi %103, %arg4 : index
                %109 = arith.addi %c0_100, %arg3 : index
                %110 = vector.load %5[%108, %109] : memref<512x1536xf32>, vector<8xf32>
                %111 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %112 = vector.fma %107, %110, %111 : vector<8xf32>
                affine.store %112, %alloca[%83] : memref<4xvector<8xf32>>
                %113 = affine.apply #map2(%arg5)
                %114 = arith.addi %83, %arg2 : index
                %115 = arith.addi %113, %arg4 : index
                %116 = memref.load %arg0[%arg1, %114, %115] : memref<1008x64x512xf32>
                %117 = vector.broadcast %116 : f32 to vector<8xf32>
                %118 = arith.addi %113, %arg4 : index
                %119 = arith.addi %c0_100, %arg3 : index
                %120 = vector.load %5[%118, %119] : memref<512x1536xf32>, vector<8xf32>
                %121 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %122 = vector.fma %117, %120, %121 : vector<8xf32>
                affine.store %122, %alloca[%83] : memref<4xvector<8xf32>>
                %123 = affine.apply #map1(%c0_4)
                %124 = arith.addi %123, %arg2 : index
                %125 = arith.addi %arg5, %arg4 : index
                %126 = memref.load %arg0[%arg1, %124, %125] : memref<1008x64x512xf32>
                %127 = vector.broadcast %126 : f32 to vector<8xf32>
                %128 = arith.addi %arg5, %arg4 : index
                %129 = arith.addi %c0_100, %arg3 : index
                %130 = vector.load %5[%128, %129] : memref<512x1536xf32>, vector<8xf32>
                %131 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %132 = vector.fma %127, %130, %131 : vector<8xf32>
                affine.store %132, %alloca[%123] : memref<4xvector<8xf32>>
                %133 = affine.apply #map(%arg5)
                %134 = arith.addi %123, %arg2 : index
                %135 = arith.addi %133, %arg4 : index
                %136 = memref.load %arg0[%arg1, %134, %135] : memref<1008x64x512xf32>
                %137 = vector.broadcast %136 : f32 to vector<8xf32>
                %138 = arith.addi %133, %arg4 : index
                %139 = arith.addi %c0_100, %arg3 : index
                %140 = vector.load %5[%138, %139] : memref<512x1536xf32>, vector<8xf32>
                %141 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %142 = vector.fma %137, %140, %141 : vector<8xf32>
                affine.store %142, %alloca[%123] : memref<4xvector<8xf32>>
                %143 = affine.apply #map1(%arg5)
                %144 = arith.addi %123, %arg2 : index
                %145 = arith.addi %143, %arg4 : index
                %146 = memref.load %arg0[%arg1, %144, %145] : memref<1008x64x512xf32>
                %147 = vector.broadcast %146 : f32 to vector<8xf32>
                %148 = arith.addi %143, %arg4 : index
                %149 = arith.addi %c0_100, %arg3 : index
                %150 = vector.load %5[%148, %149] : memref<512x1536xf32>, vector<8xf32>
                %151 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %152 = vector.fma %147, %150, %151 : vector<8xf32>
                affine.store %152, %alloca[%123] : memref<4xvector<8xf32>>
                %153 = affine.apply #map2(%arg5)
                %154 = arith.addi %123, %arg2 : index
                %155 = arith.addi %153, %arg4 : index
                %156 = memref.load %arg0[%arg1, %154, %155] : memref<1008x64x512xf32>
                %157 = vector.broadcast %156 : f32 to vector<8xf32>
                %158 = arith.addi %153, %arg4 : index
                %159 = arith.addi %c0_100, %arg3 : index
                %160 = vector.load %5[%158, %159] : memref<512x1536xf32>, vector<8xf32>
                %161 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %162 = vector.fma %157, %160, %161 : vector<8xf32>
                affine.store %162, %alloca[%123] : memref<4xvector<8xf32>>
                %163 = affine.apply #map2(%c0_4)
                %164 = arith.addi %163, %arg2 : index
                %165 = arith.addi %arg5, %arg4 : index
                %166 = memref.load %arg0[%arg1, %164, %165] : memref<1008x64x512xf32>
                %167 = vector.broadcast %166 : f32 to vector<8xf32>
                %168 = arith.addi %arg5, %arg4 : index
                %169 = arith.addi %c0_100, %arg3 : index
                %170 = vector.load %5[%168, %169] : memref<512x1536xf32>, vector<8xf32>
                %171 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %172 = vector.fma %167, %170, %171 : vector<8xf32>
                affine.store %172, %alloca[%163] : memref<4xvector<8xf32>>
                %173 = affine.apply #map(%arg5)
                %174 = arith.addi %163, %arg2 : index
                %175 = arith.addi %173, %arg4 : index
                %176 = memref.load %arg0[%arg1, %174, %175] : memref<1008x64x512xf32>
                %177 = vector.broadcast %176 : f32 to vector<8xf32>
                %178 = arith.addi %173, %arg4 : index
                %179 = arith.addi %c0_100, %arg3 : index
                %180 = vector.load %5[%178, %179] : memref<512x1536xf32>, vector<8xf32>
                %181 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %182 = vector.fma %177, %180, %181 : vector<8xf32>
                affine.store %182, %alloca[%163] : memref<4xvector<8xf32>>
                %183 = affine.apply #map1(%arg5)
                %184 = arith.addi %163, %arg2 : index
                %185 = arith.addi %183, %arg4 : index
                %186 = memref.load %arg0[%arg1, %184, %185] : memref<1008x64x512xf32>
                %187 = vector.broadcast %186 : f32 to vector<8xf32>
                %188 = arith.addi %183, %arg4 : index
                %189 = arith.addi %c0_100, %arg3 : index
                %190 = vector.load %5[%188, %189] : memref<512x1536xf32>, vector<8xf32>
                %191 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %192 = vector.fma %187, %190, %191 : vector<8xf32>
                affine.store %192, %alloca[%163] : memref<4xvector<8xf32>>
                %193 = affine.apply #map2(%arg5)
                %194 = arith.addi %163, %arg2 : index
                %195 = arith.addi %193, %arg4 : index
                %196 = memref.load %arg0[%arg1, %194, %195] : memref<1008x64x512xf32>
                %197 = vector.broadcast %196 : f32 to vector<8xf32>
                %198 = arith.addi %193, %arg4 : index
                %199 = arith.addi %c0_100, %arg3 : index
                %200 = vector.load %5[%198, %199] : memref<512x1536xf32>, vector<8xf32>
                %201 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %202 = vector.fma %197, %200, %201 : vector<8xf32>
                affine.store %202, %alloca[%163] : memref<4xvector<8xf32>>
              }
              %29 = affine.load %alloca[%c0_4] : memref<4xvector<8xf32>>
              %30 = arith.addi %c0_4, %arg2 : index
              %31 = arith.addi %c0_100, %arg3 : index
              vector.store %29, %alloc[%arg1, %30, %31] : memref<1008x64x1536xf32>, vector<8xf32>
              %32 = affine.apply #map(%c0_4)
              %33 = affine.load %alloca[%32] : memref<4xvector<8xf32>>
              %34 = arith.addi %32, %arg2 : index
              %35 = arith.addi %c0_100, %arg3 : index
              vector.store %33, %alloc[%arg1, %34, %35] : memref<1008x64x1536xf32>, vector<8xf32>
              %36 = affine.apply #map1(%c0_4)
              %37 = affine.load %alloca[%36] : memref<4xvector<8xf32>>
              %38 = arith.addi %36, %arg2 : index
              %39 = arith.addi %c0_100, %arg3 : index
              vector.store %37, %alloc[%arg1, %38, %39] : memref<1008x64x1536xf32>, vector<8xf32>
              %40 = affine.apply #map2(%c0_4)
              %41 = affine.load %alloca[%40] : memref<4xvector<8xf32>>
              %42 = arith.addi %40, %arg2 : index
              %43 = arith.addi %c0_100, %arg3 : index
              vector.store %41, %alloc[%arg1, %42, %43] : memref<1008x64x1536xf32>, vector<8xf32>
            } else {
            }
          }
        }
      }
    }
    %alloc_12 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x1536xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 1536 {
          %14 = affine.load %alloc[%arg1, %arg2, %arg3] : memref<1008x64x1536xf32>
          %15 = affine.load %0[%arg3] : memref<1536xf32>
          %16 = arith.addf %14, %15 : f32
          affine.store %16, %alloc_12[%arg1, %arg2, %arg3] : memref<1008x64x1536xf32>
        }
      }
    }
    %alloc_13 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_12[%arg1, %arg2, %arg3] : memref<1008x64x1536xf32>
          affine.store %14, %alloc_13[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    %alloc_14 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.apply #map3(%arg3)
          %15 = affine.load %alloc_12[%arg1, %arg2, %14] : memref<1008x64x1536xf32>
          affine.store %15, %alloc_14[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    %alloc_15 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.apply #map4(%arg3)
          %15 = affine.load %alloc_12[%arg1, %arg2, %14] : memref<1008x64x1536xf32>
          affine.store %15, %alloc_15[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    %reinterpret_cast = memref.reinterpret_cast %alloc_13 to offset: [0], sizes: [1008, 128, 256], strides: [32768, 256, 1] : memref<1008x64x512xf32> to memref<1008x128x256xf32>
    %alloc_16 = memref.alloc() {alignment = 16 : i64} : memref<128x1008x256xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 128 {
        %14 = affine.apply #map5(%arg1, %arg2)
        %15 = affine.apply #map6(%arg1, %arg2)
        "krnl.memcpy"(%alloc_16, %reinterpret_cast, %c256_i64, %15, %14) : (memref<128x1008x256xf32>, memref<1008x128x256xf32>, i64, index, index) -> ()
      }
    }
    %reinterpret_cast_17 = memref.reinterpret_cast %alloc_14 to offset: [0], sizes: [1008, 128, 256], strides: [32768, 256, 1] : memref<1008x64x512xf32> to memref<1008x128x256xf32>
    %reinterpret_cast_18 = memref.reinterpret_cast %alloc_15 to offset: [0], sizes: [1008, 128, 256], strides: [32768, 256, 1] : memref<1008x64x512xf32> to memref<1008x128x256xf32>
    %alloc_19 = memref.alloc() {alignment = 16 : i64} : memref<128x1008x256xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 128 {
        %14 = affine.apply #map5(%arg1, %arg2)
        %15 = affine.apply #map6(%arg1, %arg2)
        "krnl.memcpy"(%alloc_19, %reinterpret_cast_18, %c256_i64, %15, %14) : (memref<128x1008x256xf32>, memref<1008x128x256xf32>, i64, index, index) -> ()
      }
    }
    %8 = "krnl.global"() {name = "constant_17", shape = [], value = dense<1.600000e+01> : tensor<f32>} : () -> memref<f32>
    %alloc_20 = memref.alloc() {alignment = 16 : i64} : memref<128x1008x256xf32>
    affine.for %arg1 = 0 to 128 {
      affine.for %arg2 = 0 to 1008 {
        affine.for %arg3 = 0 to 256 {
          %14 = affine.load %alloc_16[%arg1, %arg2, %arg3] : memref<128x1008x256xf32>
          %15 = affine.load %8[] : memref<f32>
          %16 = arith.divf %14, %15 : f32
          affine.store %16, %alloc_20[%arg1, %arg2, %arg3] : memref<128x1008x256xf32>
        }
      }
    }
    %alloc_21 = memref.alloc() {alignment = 16 : i64} : memref<128x256x1008xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 128 {
        affine.for %arg3 = 0 to 256 {
          %14 = affine.load %reinterpret_cast_17[%arg1, %arg2, %arg3] : memref<1008x128x256xf32>
          affine.store %14, %alloc_21[%arg2, %arg3, %arg1] : memref<128x256x1008xf32>
        }
      }
    }
    %alloc_22 = memref.alloc() {alignment = 16 : i64} : memref<128x1008x1008xf32>
    %c128_23 = arith.constant 128 : index
    %c1008_24 = arith.constant 1008 : index
    %c1008_25 = arith.constant 1008 : index
    %c0_26 = arith.constant 0 : index
    affine.for %arg1 = 0 to 128 {
      affine.for %arg2 = 0 to 1008 {
        affine.for %arg3 = 0 to 1008 {
          affine.store %cst_7, %alloc_22[%arg1, %arg2, %arg3] : memref<128x1008x1008xf32>
        }
      }
    }
    affine.for %arg1 = %c0_6 to %c128 {
      affine.for %arg2 = %c0_6 to %c1008 step 4 {
        affine.for %arg3 = %c0_6 to %c1008 step 8 {
          affine.for %arg4 = %c0_6 to %c256 step 8 {
            %c128_77 = arith.constant 128 : index
            %c1008_78 = arith.constant 1008 : index
            %c256_79 = arith.constant 256 : index
            %c128_80 = arith.constant 128 : index
            %c256_81 = arith.constant 256 : index
            %c1008_82 = arith.constant 1008 : index
            %c128_83 = arith.constant 128 : index
            %c1008_84 = arith.constant 1008 : index
            %c1008_85 = arith.constant 1008 : index
            %c4 = arith.constant 4 : index
            %c8 = arith.constant 8 : index
            %c8_86 = arith.constant 8 : index
            %c1008_87 = arith.constant 1008 : index
            %c1008_88 = arith.constant 1008 : index
            %c256_89 = arith.constant 256 : index
            %c1 = arith.constant 1 : index
            %c0_90 = arith.constant 0 : index
            %c0_91 = arith.constant 0 : index
            %c0_92 = arith.constant 0 : index
            %c0_93 = arith.constant 0 : index
            %c0_94 = arith.constant 0 : index
            %c0_95 = arith.constant 0 : index
            %c1_96 = arith.constant 1 : index
            %c1_97 = arith.constant 1 : index
            %c1_98 = arith.constant 1 : index
            %c0_99 = arith.constant 0 : index
            affine.if #set() {
              %alloca = memref.alloca() {alignment = 64 : i64} : memref<4xvector<8xf32>>
              %c0_100 = arith.constant 0 : index
              %c0_101 = arith.constant 0 : index
              %14 = arith.addi %c0_3, %arg2 : index
              %15 = arith.addi %c0_101, %arg3 : index
              %16 = vector.load %alloc_22[%arg1, %14, %15] : memref<128x1008x1008xf32>, vector<8xf32>
              affine.store %16, %alloca[%c0_3] : memref<4xvector<8xf32>>
              %17 = affine.apply #map(%c0_3)
              %18 = arith.addi %17, %arg2 : index
              %19 = arith.addi %c0_101, %arg3 : index
              %20 = vector.load %alloc_22[%arg1, %18, %19] : memref<128x1008x1008xf32>, vector<8xf32>
              affine.store %20, %alloca[%17] : memref<4xvector<8xf32>>
              %21 = affine.apply #map1(%c0_3)
              %22 = arith.addi %21, %arg2 : index
              %23 = arith.addi %c0_101, %arg3 : index
              %24 = vector.load %alloc_22[%arg1, %22, %23] : memref<128x1008x1008xf32>, vector<8xf32>
              affine.store %24, %alloca[%21] : memref<4xvector<8xf32>>
              %25 = affine.apply #map2(%c0_3)
              %26 = arith.addi %25, %arg2 : index
              %27 = arith.addi %c0_101, %arg3 : index
              %28 = vector.load %alloc_22[%arg1, %26, %27] : memref<128x1008x1008xf32>, vector<8xf32>
              affine.store %28, %alloca[%25] : memref<4xvector<8xf32>>
              affine.for %arg5 = 0 to 8 step 4 {
                %44 = arith.addi %c0_3, %arg2 : index
                %45 = arith.addi %arg5, %arg4 : index
                %46 = memref.load %alloc_20[%arg1, %44, %45] : memref<128x1008x256xf32>
                %47 = vector.broadcast %46 : f32 to vector<8xf32>
                %48 = arith.addi %arg5, %arg4 : index
                %49 = arith.addi %c0_101, %arg3 : index
                %50 = vector.load %alloc_21[%arg1, %48, %49] : memref<128x256x1008xf32>, vector<8xf32>
                %51 = affine.load %alloca[%c0_3] : memref<4xvector<8xf32>>
                %52 = vector.fma %47, %50, %51 : vector<8xf32>
                affine.store %52, %alloca[%c0_3] : memref<4xvector<8xf32>>
                %53 = affine.apply #map(%arg5)
                %54 = arith.addi %c0_3, %arg2 : index
                %55 = arith.addi %53, %arg4 : index
                %56 = memref.load %alloc_20[%arg1, %54, %55] : memref<128x1008x256xf32>
                %57 = vector.broadcast %56 : f32 to vector<8xf32>
                %58 = arith.addi %53, %arg4 : index
                %59 = arith.addi %c0_101, %arg3 : index
                %60 = vector.load %alloc_21[%arg1, %58, %59] : memref<128x256x1008xf32>, vector<8xf32>
                %61 = affine.load %alloca[%c0_3] : memref<4xvector<8xf32>>
                %62 = vector.fma %57, %60, %61 : vector<8xf32>
                affine.store %62, %alloca[%c0_3] : memref<4xvector<8xf32>>
                %63 = affine.apply #map1(%arg5)
                %64 = arith.addi %c0_3, %arg2 : index
                %65 = arith.addi %63, %arg4 : index
                %66 = memref.load %alloc_20[%arg1, %64, %65] : memref<128x1008x256xf32>
                %67 = vector.broadcast %66 : f32 to vector<8xf32>
                %68 = arith.addi %63, %arg4 : index
                %69 = arith.addi %c0_101, %arg3 : index
                %70 = vector.load %alloc_21[%arg1, %68, %69] : memref<128x256x1008xf32>, vector<8xf32>
                %71 = affine.load %alloca[%c0_3] : memref<4xvector<8xf32>>
                %72 = vector.fma %67, %70, %71 : vector<8xf32>
                affine.store %72, %alloca[%c0_3] : memref<4xvector<8xf32>>
                %73 = affine.apply #map2(%arg5)
                %74 = arith.addi %c0_3, %arg2 : index
                %75 = arith.addi %73, %arg4 : index
                %76 = memref.load %alloc_20[%arg1, %74, %75] : memref<128x1008x256xf32>
                %77 = vector.broadcast %76 : f32 to vector<8xf32>
                %78 = arith.addi %73, %arg4 : index
                %79 = arith.addi %c0_101, %arg3 : index
                %80 = vector.load %alloc_21[%arg1, %78, %79] : memref<128x256x1008xf32>, vector<8xf32>
                %81 = affine.load %alloca[%c0_3] : memref<4xvector<8xf32>>
                %82 = vector.fma %77, %80, %81 : vector<8xf32>
                affine.store %82, %alloca[%c0_3] : memref<4xvector<8xf32>>
                %83 = affine.apply #map(%c0_3)
                %84 = arith.addi %83, %arg2 : index
                %85 = arith.addi %arg5, %arg4 : index
                %86 = memref.load %alloc_20[%arg1, %84, %85] : memref<128x1008x256xf32>
                %87 = vector.broadcast %86 : f32 to vector<8xf32>
                %88 = arith.addi %arg5, %arg4 : index
                %89 = arith.addi %c0_101, %arg3 : index
                %90 = vector.load %alloc_21[%arg1, %88, %89] : memref<128x256x1008xf32>, vector<8xf32>
                %91 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %92 = vector.fma %87, %90, %91 : vector<8xf32>
                affine.store %92, %alloca[%83] : memref<4xvector<8xf32>>
                %93 = affine.apply #map(%arg5)
                %94 = arith.addi %83, %arg2 : index
                %95 = arith.addi %93, %arg4 : index
                %96 = memref.load %alloc_20[%arg1, %94, %95] : memref<128x1008x256xf32>
                %97 = vector.broadcast %96 : f32 to vector<8xf32>
                %98 = arith.addi %93, %arg4 : index
                %99 = arith.addi %c0_101, %arg3 : index
                %100 = vector.load %alloc_21[%arg1, %98, %99] : memref<128x256x1008xf32>, vector<8xf32>
                %101 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %102 = vector.fma %97, %100, %101 : vector<8xf32>
                affine.store %102, %alloca[%83] : memref<4xvector<8xf32>>
                %103 = affine.apply #map1(%arg5)
                %104 = arith.addi %83, %arg2 : index
                %105 = arith.addi %103, %arg4 : index
                %106 = memref.load %alloc_20[%arg1, %104, %105] : memref<128x1008x256xf32>
                %107 = vector.broadcast %106 : f32 to vector<8xf32>
                %108 = arith.addi %103, %arg4 : index
                %109 = arith.addi %c0_101, %arg3 : index
                %110 = vector.load %alloc_21[%arg1, %108, %109] : memref<128x256x1008xf32>, vector<8xf32>
                %111 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %112 = vector.fma %107, %110, %111 : vector<8xf32>
                affine.store %112, %alloca[%83] : memref<4xvector<8xf32>>
                %113 = affine.apply #map2(%arg5)
                %114 = arith.addi %83, %arg2 : index
                %115 = arith.addi %113, %arg4 : index
                %116 = memref.load %alloc_20[%arg1, %114, %115] : memref<128x1008x256xf32>
                %117 = vector.broadcast %116 : f32 to vector<8xf32>
                %118 = arith.addi %113, %arg4 : index
                %119 = arith.addi %c0_101, %arg3 : index
                %120 = vector.load %alloc_21[%arg1, %118, %119] : memref<128x256x1008xf32>, vector<8xf32>
                %121 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %122 = vector.fma %117, %120, %121 : vector<8xf32>
                affine.store %122, %alloca[%83] : memref<4xvector<8xf32>>
                %123 = affine.apply #map1(%c0_3)
                %124 = arith.addi %123, %arg2 : index
                %125 = arith.addi %arg5, %arg4 : index
                %126 = memref.load %alloc_20[%arg1, %124, %125] : memref<128x1008x256xf32>
                %127 = vector.broadcast %126 : f32 to vector<8xf32>
                %128 = arith.addi %arg5, %arg4 : index
                %129 = arith.addi %c0_101, %arg3 : index
                %130 = vector.load %alloc_21[%arg1, %128, %129] : memref<128x256x1008xf32>, vector<8xf32>
                %131 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %132 = vector.fma %127, %130, %131 : vector<8xf32>
                affine.store %132, %alloca[%123] : memref<4xvector<8xf32>>
                %133 = affine.apply #map(%arg5)
                %134 = arith.addi %123, %arg2 : index
                %135 = arith.addi %133, %arg4 : index
                %136 = memref.load %alloc_20[%arg1, %134, %135] : memref<128x1008x256xf32>
                %137 = vector.broadcast %136 : f32 to vector<8xf32>
                %138 = arith.addi %133, %arg4 : index
                %139 = arith.addi %c0_101, %arg3 : index
                %140 = vector.load %alloc_21[%arg1, %138, %139] : memref<128x256x1008xf32>, vector<8xf32>
                %141 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %142 = vector.fma %137, %140, %141 : vector<8xf32>
                affine.store %142, %alloca[%123] : memref<4xvector<8xf32>>
                %143 = affine.apply #map1(%arg5)
                %144 = arith.addi %123, %arg2 : index
                %145 = arith.addi %143, %arg4 : index
                %146 = memref.load %alloc_20[%arg1, %144, %145] : memref<128x1008x256xf32>
                %147 = vector.broadcast %146 : f32 to vector<8xf32>
                %148 = arith.addi %143, %arg4 : index
                %149 = arith.addi %c0_101, %arg3 : index
                %150 = vector.load %alloc_21[%arg1, %148, %149] : memref<128x256x1008xf32>, vector<8xf32>
                %151 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %152 = vector.fma %147, %150, %151 : vector<8xf32>
                affine.store %152, %alloca[%123] : memref<4xvector<8xf32>>
                %153 = affine.apply #map2(%arg5)
                %154 = arith.addi %123, %arg2 : index
                %155 = arith.addi %153, %arg4 : index
                %156 = memref.load %alloc_20[%arg1, %154, %155] : memref<128x1008x256xf32>
                %157 = vector.broadcast %156 : f32 to vector<8xf32>
                %158 = arith.addi %153, %arg4 : index
                %159 = arith.addi %c0_101, %arg3 : index
                %160 = vector.load %alloc_21[%arg1, %158, %159] : memref<128x256x1008xf32>, vector<8xf32>
                %161 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %162 = vector.fma %157, %160, %161 : vector<8xf32>
                affine.store %162, %alloca[%123] : memref<4xvector<8xf32>>
                %163 = affine.apply #map2(%c0_3)
                %164 = arith.addi %163, %arg2 : index
                %165 = arith.addi %arg5, %arg4 : index
                %166 = memref.load %alloc_20[%arg1, %164, %165] : memref<128x1008x256xf32>
                %167 = vector.broadcast %166 : f32 to vector<8xf32>
                %168 = arith.addi %arg5, %arg4 : index
                %169 = arith.addi %c0_101, %arg3 : index
                %170 = vector.load %alloc_21[%arg1, %168, %169] : memref<128x256x1008xf32>, vector<8xf32>
                %171 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %172 = vector.fma %167, %170, %171 : vector<8xf32>
                affine.store %172, %alloca[%163] : memref<4xvector<8xf32>>
                %173 = affine.apply #map(%arg5)
                %174 = arith.addi %163, %arg2 : index
                %175 = arith.addi %173, %arg4 : index
                %176 = memref.load %alloc_20[%arg1, %174, %175] : memref<128x1008x256xf32>
                %177 = vector.broadcast %176 : f32 to vector<8xf32>
                %178 = arith.addi %173, %arg4 : index
                %179 = arith.addi %c0_101, %arg3 : index
                %180 = vector.load %alloc_21[%arg1, %178, %179] : memref<128x256x1008xf32>, vector<8xf32>
                %181 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %182 = vector.fma %177, %180, %181 : vector<8xf32>
                affine.store %182, %alloca[%163] : memref<4xvector<8xf32>>
                %183 = affine.apply #map1(%arg5)
                %184 = arith.addi %163, %arg2 : index
                %185 = arith.addi %183, %arg4 : index
                %186 = memref.load %alloc_20[%arg1, %184, %185] : memref<128x1008x256xf32>
                %187 = vector.broadcast %186 : f32 to vector<8xf32>
                %188 = arith.addi %183, %arg4 : index
                %189 = arith.addi %c0_101, %arg3 : index
                %190 = vector.load %alloc_21[%arg1, %188, %189] : memref<128x256x1008xf32>, vector<8xf32>
                %191 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %192 = vector.fma %187, %190, %191 : vector<8xf32>
                affine.store %192, %alloca[%163] : memref<4xvector<8xf32>>
                %193 = affine.apply #map2(%arg5)
                %194 = arith.addi %163, %arg2 : index
                %195 = arith.addi %193, %arg4 : index
                %196 = memref.load %alloc_20[%arg1, %194, %195] : memref<128x1008x256xf32>
                %197 = vector.broadcast %196 : f32 to vector<8xf32>
                %198 = arith.addi %193, %arg4 : index
                %199 = arith.addi %c0_101, %arg3 : index
                %200 = vector.load %alloc_21[%arg1, %198, %199] : memref<128x256x1008xf32>, vector<8xf32>
                %201 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %202 = vector.fma %197, %200, %201 : vector<8xf32>
                affine.store %202, %alloca[%163] : memref<4xvector<8xf32>>
              }
              %29 = affine.load %alloca[%c0_3] : memref<4xvector<8xf32>>
              %30 = arith.addi %c0_3, %arg2 : index
              %31 = arith.addi %c0_101, %arg3 : index
              vector.store %29, %alloc_22[%arg1, %30, %31] : memref<128x1008x1008xf32>, vector<8xf32>
              %32 = affine.apply #map(%c0_3)
              %33 = affine.load %alloca[%32] : memref<4xvector<8xf32>>
              %34 = arith.addi %32, %arg2 : index
              %35 = arith.addi %c0_101, %arg3 : index
              vector.store %33, %alloc_22[%arg1, %34, %35] : memref<128x1008x1008xf32>, vector<8xf32>
              %36 = affine.apply #map1(%c0_3)
              %37 = affine.load %alloca[%36] : memref<4xvector<8xf32>>
              %38 = arith.addi %36, %arg2 : index
              %39 = arith.addi %c0_101, %arg3 : index
              vector.store %37, %alloc_22[%arg1, %38, %39] : memref<128x1008x1008xf32>, vector<8xf32>
              %40 = affine.apply #map2(%c0_3)
              %41 = affine.load %alloca[%40] : memref<4xvector<8xf32>>
              %42 = arith.addi %40, %arg2 : index
              %43 = arith.addi %c0_101, %arg3 : index
              vector.store %41, %alloc_22[%arg1, %42, %43] : memref<128x1008x1008xf32>, vector<8xf32>
            } else {
            }
          }
        }
      }
    }
    %alloc_27 = memref.alloc() {alignment = 16 : i64} : memref<128x1008x1008xf32>
    %alloc_28 = memref.alloc() : memref<f32>
    %alloc_29 = memref.alloc() : memref<f32>
    affine.for %arg1 = 0 to 128 {
      affine.for %arg2 = 0 to 1008 {
        affine.store %cst_7, %alloc_28[] : memref<f32>
        affine.store %cst_5, %alloc_29[] : memref<f32>
        affine.for %arg3 = 0 to 1008 {
          %16 = affine.load %alloc_29[] : memref<f32>
          %17 = affine.load %alloc_22[%arg1, %arg2, %arg3] : memref<128x1008x1008xf32>
          %18 = arith.cmpf ogt, %16, %17 : f32
          %19 = arith.select %18, %16, %17 : f32
          affine.store %19, %alloc_29[] : memref<f32>
        }
        %14 = affine.load %alloc_29[] : memref<f32>
        affine.for %arg3 = 0 to 1008 {
          %16 = affine.load %alloc_28[] : memref<f32>
          %17 = affine.load %alloc_22[%arg1, %arg2, %arg3] : memref<128x1008x1008xf32>
          %18 = arith.subf %17, %14 : f32
          %19 = math.exp %18 : f32
          %20 = arith.addf %16, %19 : f32
          affine.store %20, %alloc_28[] : memref<f32>
          affine.store %19, %alloc_27[%arg1, %arg2, %arg3] : memref<128x1008x1008xf32>
        }
        %15 = affine.load %alloc_28[] : memref<f32>
        affine.for %arg3 = 0 to 1008 {
          %16 = affine.load %alloc_27[%arg1, %arg2, %arg3] : memref<128x1008x1008xf32>
          %17 = arith.divf %16, %15 : f32
          affine.store %17, %alloc_27[%arg1, %arg2, %arg3] : memref<128x1008x1008xf32>
        }
      }
    }
    %alloc_30 = memref.alloc() {alignment = 16 : i64} : memref<128x1008x256xf32>
    %c128_31 = arith.constant 128 : index
    %c1008_32 = arith.constant 1008 : index
    %c256_33 = arith.constant 256 : index
    %c0_34 = arith.constant 0 : index
    affine.for %arg1 = 0 to 128 {
      affine.for %arg2 = 0 to 1008 {
        affine.for %arg3 = 0 to 256 {
          affine.store %cst_7, %alloc_30[%arg1, %arg2, %arg3] : memref<128x1008x256xf32>
        }
      }
    }
    affine.for %arg1 = %c0_6 to %c128 {
      affine.for %arg2 = %c0_6 to %c1008 step 4 {
        affine.for %arg3 = %c0_6 to %c256 step 8 {
          affine.for %arg4 = %c0_6 to %c1008 step 8 {
            %c128_77 = arith.constant 128 : index
            %c1008_78 = arith.constant 1008 : index
            %c1008_79 = arith.constant 1008 : index
            %c128_80 = arith.constant 128 : index
            %c1008_81 = arith.constant 1008 : index
            %c256_82 = arith.constant 256 : index
            %c128_83 = arith.constant 128 : index
            %c1008_84 = arith.constant 1008 : index
            %c256_85 = arith.constant 256 : index
            %c4 = arith.constant 4 : index
            %c8 = arith.constant 8 : index
            %c8_86 = arith.constant 8 : index
            %c1008_87 = arith.constant 1008 : index
            %c256_88 = arith.constant 256 : index
            %c1008_89 = arith.constant 1008 : index
            %c1 = arith.constant 1 : index
            %c0_90 = arith.constant 0 : index
            %c0_91 = arith.constant 0 : index
            %c0_92 = arith.constant 0 : index
            %c0_93 = arith.constant 0 : index
            %c0_94 = arith.constant 0 : index
            %c0_95 = arith.constant 0 : index
            %c1_96 = arith.constant 1 : index
            %c1_97 = arith.constant 1 : index
            %c1_98 = arith.constant 1 : index
            %c0_99 = arith.constant 0 : index
            affine.if #set() {
              %alloca = memref.alloca() {alignment = 64 : i64} : memref<4xvector<8xf32>>
              %c0_100 = arith.constant 0 : index
              %c0_101 = arith.constant 0 : index
              %14 = arith.addi %c0_2, %arg2 : index
              %15 = arith.addi %c0_101, %arg3 : index
              %16 = vector.load %alloc_30[%arg1, %14, %15] : memref<128x1008x256xf32>, vector<8xf32>
              affine.store %16, %alloca[%c0_2] : memref<4xvector<8xf32>>
              %17 = affine.apply #map(%c0_2)
              %18 = arith.addi %17, %arg2 : index
              %19 = arith.addi %c0_101, %arg3 : index
              %20 = vector.load %alloc_30[%arg1, %18, %19] : memref<128x1008x256xf32>, vector<8xf32>
              affine.store %20, %alloca[%17] : memref<4xvector<8xf32>>
              %21 = affine.apply #map1(%c0_2)
              %22 = arith.addi %21, %arg2 : index
              %23 = arith.addi %c0_101, %arg3 : index
              %24 = vector.load %alloc_30[%arg1, %22, %23] : memref<128x1008x256xf32>, vector<8xf32>
              affine.store %24, %alloca[%21] : memref<4xvector<8xf32>>
              %25 = affine.apply #map2(%c0_2)
              %26 = arith.addi %25, %arg2 : index
              %27 = arith.addi %c0_101, %arg3 : index
              %28 = vector.load %alloc_30[%arg1, %26, %27] : memref<128x1008x256xf32>, vector<8xf32>
              affine.store %28, %alloca[%25] : memref<4xvector<8xf32>>
              affine.for %arg5 = 0 to 8 step 4 {
                %44 = arith.addi %c0_2, %arg2 : index
                %45 = arith.addi %arg5, %arg4 : index
                %46 = memref.load %alloc_27[%arg1, %44, %45] : memref<128x1008x1008xf32>
                %47 = vector.broadcast %46 : f32 to vector<8xf32>
                %48 = arith.addi %arg5, %arg4 : index
                %49 = arith.addi %c0_101, %arg3 : index
                %50 = vector.load %alloc_19[%arg1, %48, %49] : memref<128x1008x256xf32>, vector<8xf32>
                %51 = affine.load %alloca[%c0_2] : memref<4xvector<8xf32>>
                %52 = vector.fma %47, %50, %51 : vector<8xf32>
                affine.store %52, %alloca[%c0_2] : memref<4xvector<8xf32>>
                %53 = affine.apply #map(%arg5)
                %54 = arith.addi %c0_2, %arg2 : index
                %55 = arith.addi %53, %arg4 : index
                %56 = memref.load %alloc_27[%arg1, %54, %55] : memref<128x1008x1008xf32>
                %57 = vector.broadcast %56 : f32 to vector<8xf32>
                %58 = arith.addi %53, %arg4 : index
                %59 = arith.addi %c0_101, %arg3 : index
                %60 = vector.load %alloc_19[%arg1, %58, %59] : memref<128x1008x256xf32>, vector<8xf32>
                %61 = affine.load %alloca[%c0_2] : memref<4xvector<8xf32>>
                %62 = vector.fma %57, %60, %61 : vector<8xf32>
                affine.store %62, %alloca[%c0_2] : memref<4xvector<8xf32>>
                %63 = affine.apply #map1(%arg5)
                %64 = arith.addi %c0_2, %arg2 : index
                %65 = arith.addi %63, %arg4 : index
                %66 = memref.load %alloc_27[%arg1, %64, %65] : memref<128x1008x1008xf32>
                %67 = vector.broadcast %66 : f32 to vector<8xf32>
                %68 = arith.addi %63, %arg4 : index
                %69 = arith.addi %c0_101, %arg3 : index
                %70 = vector.load %alloc_19[%arg1, %68, %69] : memref<128x1008x256xf32>, vector<8xf32>
                %71 = affine.load %alloca[%c0_2] : memref<4xvector<8xf32>>
                %72 = vector.fma %67, %70, %71 : vector<8xf32>
                affine.store %72, %alloca[%c0_2] : memref<4xvector<8xf32>>
                %73 = affine.apply #map2(%arg5)
                %74 = arith.addi %c0_2, %arg2 : index
                %75 = arith.addi %73, %arg4 : index
                %76 = memref.load %alloc_27[%arg1, %74, %75] : memref<128x1008x1008xf32>
                %77 = vector.broadcast %76 : f32 to vector<8xf32>
                %78 = arith.addi %73, %arg4 : index
                %79 = arith.addi %c0_101, %arg3 : index
                %80 = vector.load %alloc_19[%arg1, %78, %79] : memref<128x1008x256xf32>, vector<8xf32>
                %81 = affine.load %alloca[%c0_2] : memref<4xvector<8xf32>>
                %82 = vector.fma %77, %80, %81 : vector<8xf32>
                affine.store %82, %alloca[%c0_2] : memref<4xvector<8xf32>>
                %83 = affine.apply #map(%c0_2)
                %84 = arith.addi %83, %arg2 : index
                %85 = arith.addi %arg5, %arg4 : index
                %86 = memref.load %alloc_27[%arg1, %84, %85] : memref<128x1008x1008xf32>
                %87 = vector.broadcast %86 : f32 to vector<8xf32>
                %88 = arith.addi %arg5, %arg4 : index
                %89 = arith.addi %c0_101, %arg3 : index
                %90 = vector.load %alloc_19[%arg1, %88, %89] : memref<128x1008x256xf32>, vector<8xf32>
                %91 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %92 = vector.fma %87, %90, %91 : vector<8xf32>
                affine.store %92, %alloca[%83] : memref<4xvector<8xf32>>
                %93 = affine.apply #map(%arg5)
                %94 = arith.addi %83, %arg2 : index
                %95 = arith.addi %93, %arg4 : index
                %96 = memref.load %alloc_27[%arg1, %94, %95] : memref<128x1008x1008xf32>
                %97 = vector.broadcast %96 : f32 to vector<8xf32>
                %98 = arith.addi %93, %arg4 : index
                %99 = arith.addi %c0_101, %arg3 : index
                %100 = vector.load %alloc_19[%arg1, %98, %99] : memref<128x1008x256xf32>, vector<8xf32>
                %101 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %102 = vector.fma %97, %100, %101 : vector<8xf32>
                affine.store %102, %alloca[%83] : memref<4xvector<8xf32>>
                %103 = affine.apply #map1(%arg5)
                %104 = arith.addi %83, %arg2 : index
                %105 = arith.addi %103, %arg4 : index
                %106 = memref.load %alloc_27[%arg1, %104, %105] : memref<128x1008x1008xf32>
                %107 = vector.broadcast %106 : f32 to vector<8xf32>
                %108 = arith.addi %103, %arg4 : index
                %109 = arith.addi %c0_101, %arg3 : index
                %110 = vector.load %alloc_19[%arg1, %108, %109] : memref<128x1008x256xf32>, vector<8xf32>
                %111 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %112 = vector.fma %107, %110, %111 : vector<8xf32>
                affine.store %112, %alloca[%83] : memref<4xvector<8xf32>>
                %113 = affine.apply #map2(%arg5)
                %114 = arith.addi %83, %arg2 : index
                %115 = arith.addi %113, %arg4 : index
                %116 = memref.load %alloc_27[%arg1, %114, %115] : memref<128x1008x1008xf32>
                %117 = vector.broadcast %116 : f32 to vector<8xf32>
                %118 = arith.addi %113, %arg4 : index
                %119 = arith.addi %c0_101, %arg3 : index
                %120 = vector.load %alloc_19[%arg1, %118, %119] : memref<128x1008x256xf32>, vector<8xf32>
                %121 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %122 = vector.fma %117, %120, %121 : vector<8xf32>
                affine.store %122, %alloca[%83] : memref<4xvector<8xf32>>
                %123 = affine.apply #map1(%c0_2)
                %124 = arith.addi %123, %arg2 : index
                %125 = arith.addi %arg5, %arg4 : index
                %126 = memref.load %alloc_27[%arg1, %124, %125] : memref<128x1008x1008xf32>
                %127 = vector.broadcast %126 : f32 to vector<8xf32>
                %128 = arith.addi %arg5, %arg4 : index
                %129 = arith.addi %c0_101, %arg3 : index
                %130 = vector.load %alloc_19[%arg1, %128, %129] : memref<128x1008x256xf32>, vector<8xf32>
                %131 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %132 = vector.fma %127, %130, %131 : vector<8xf32>
                affine.store %132, %alloca[%123] : memref<4xvector<8xf32>>
                %133 = affine.apply #map(%arg5)
                %134 = arith.addi %123, %arg2 : index
                %135 = arith.addi %133, %arg4 : index
                %136 = memref.load %alloc_27[%arg1, %134, %135] : memref<128x1008x1008xf32>
                %137 = vector.broadcast %136 : f32 to vector<8xf32>
                %138 = arith.addi %133, %arg4 : index
                %139 = arith.addi %c0_101, %arg3 : index
                %140 = vector.load %alloc_19[%arg1, %138, %139] : memref<128x1008x256xf32>, vector<8xf32>
                %141 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %142 = vector.fma %137, %140, %141 : vector<8xf32>
                affine.store %142, %alloca[%123] : memref<4xvector<8xf32>>
                %143 = affine.apply #map1(%arg5)
                %144 = arith.addi %123, %arg2 : index
                %145 = arith.addi %143, %arg4 : index
                %146 = memref.load %alloc_27[%arg1, %144, %145] : memref<128x1008x1008xf32>
                %147 = vector.broadcast %146 : f32 to vector<8xf32>
                %148 = arith.addi %143, %arg4 : index
                %149 = arith.addi %c0_101, %arg3 : index
                %150 = vector.load %alloc_19[%arg1, %148, %149] : memref<128x1008x256xf32>, vector<8xf32>
                %151 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %152 = vector.fma %147, %150, %151 : vector<8xf32>
                affine.store %152, %alloca[%123] : memref<4xvector<8xf32>>
                %153 = affine.apply #map2(%arg5)
                %154 = arith.addi %123, %arg2 : index
                %155 = arith.addi %153, %arg4 : index
                %156 = memref.load %alloc_27[%arg1, %154, %155] : memref<128x1008x1008xf32>
                %157 = vector.broadcast %156 : f32 to vector<8xf32>
                %158 = arith.addi %153, %arg4 : index
                %159 = arith.addi %c0_101, %arg3 : index
                %160 = vector.load %alloc_19[%arg1, %158, %159] : memref<128x1008x256xf32>, vector<8xf32>
                %161 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %162 = vector.fma %157, %160, %161 : vector<8xf32>
                affine.store %162, %alloca[%123] : memref<4xvector<8xf32>>
                %163 = affine.apply #map2(%c0_2)
                %164 = arith.addi %163, %arg2 : index
                %165 = arith.addi %arg5, %arg4 : index
                %166 = memref.load %alloc_27[%arg1, %164, %165] : memref<128x1008x1008xf32>
                %167 = vector.broadcast %166 : f32 to vector<8xf32>
                %168 = arith.addi %arg5, %arg4 : index
                %169 = arith.addi %c0_101, %arg3 : index
                %170 = vector.load %alloc_19[%arg1, %168, %169] : memref<128x1008x256xf32>, vector<8xf32>
                %171 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %172 = vector.fma %167, %170, %171 : vector<8xf32>
                affine.store %172, %alloca[%163] : memref<4xvector<8xf32>>
                %173 = affine.apply #map(%arg5)
                %174 = arith.addi %163, %arg2 : index
                %175 = arith.addi %173, %arg4 : index
                %176 = memref.load %alloc_27[%arg1, %174, %175] : memref<128x1008x1008xf32>
                %177 = vector.broadcast %176 : f32 to vector<8xf32>
                %178 = arith.addi %173, %arg4 : index
                %179 = arith.addi %c0_101, %arg3 : index
                %180 = vector.load %alloc_19[%arg1, %178, %179] : memref<128x1008x256xf32>, vector<8xf32>
                %181 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %182 = vector.fma %177, %180, %181 : vector<8xf32>
                affine.store %182, %alloca[%163] : memref<4xvector<8xf32>>
                %183 = affine.apply #map1(%arg5)
                %184 = arith.addi %163, %arg2 : index
                %185 = arith.addi %183, %arg4 : index
                %186 = memref.load %alloc_27[%arg1, %184, %185] : memref<128x1008x1008xf32>
                %187 = vector.broadcast %186 : f32 to vector<8xf32>
                %188 = arith.addi %183, %arg4 : index
                %189 = arith.addi %c0_101, %arg3 : index
                %190 = vector.load %alloc_19[%arg1, %188, %189] : memref<128x1008x256xf32>, vector<8xf32>
                %191 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %192 = vector.fma %187, %190, %191 : vector<8xf32>
                affine.store %192, %alloca[%163] : memref<4xvector<8xf32>>
                %193 = affine.apply #map2(%arg5)
                %194 = arith.addi %163, %arg2 : index
                %195 = arith.addi %193, %arg4 : index
                %196 = memref.load %alloc_27[%arg1, %194, %195] : memref<128x1008x1008xf32>
                %197 = vector.broadcast %196 : f32 to vector<8xf32>
                %198 = arith.addi %193, %arg4 : index
                %199 = arith.addi %c0_101, %arg3 : index
                %200 = vector.load %alloc_19[%arg1, %198, %199] : memref<128x1008x256xf32>, vector<8xf32>
                %201 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %202 = vector.fma %197, %200, %201 : vector<8xf32>
                affine.store %202, %alloca[%163] : memref<4xvector<8xf32>>
              }
              %29 = affine.load %alloca[%c0_2] : memref<4xvector<8xf32>>
              %30 = arith.addi %c0_2, %arg2 : index
              %31 = arith.addi %c0_101, %arg3 : index
              vector.store %29, %alloc_30[%arg1, %30, %31] : memref<128x1008x256xf32>, vector<8xf32>
              %32 = affine.apply #map(%c0_2)
              %33 = affine.load %alloca[%32] : memref<4xvector<8xf32>>
              %34 = arith.addi %32, %arg2 : index
              %35 = arith.addi %c0_101, %arg3 : index
              vector.store %33, %alloc_30[%arg1, %34, %35] : memref<128x1008x256xf32>, vector<8xf32>
              %36 = affine.apply #map1(%c0_2)
              %37 = affine.load %alloca[%36] : memref<4xvector<8xf32>>
              %38 = arith.addi %36, %arg2 : index
              %39 = arith.addi %c0_101, %arg3 : index
              vector.store %37, %alloc_30[%arg1, %38, %39] : memref<128x1008x256xf32>, vector<8xf32>
              %40 = affine.apply #map2(%c0_2)
              %41 = affine.load %alloca[%40] : memref<4xvector<8xf32>>
              %42 = arith.addi %40, %arg2 : index
              %43 = arith.addi %c0_101, %arg3 : index
              vector.store %41, %alloc_30[%arg1, %42, %43] : memref<128x1008x256xf32>, vector<8xf32>
            } else {
            }
          }
        }
      }
    }
    %alloc_35 = memref.alloc() {alignment = 16 : i64} : memref<1008x128x256xf32>
    affine.for %arg1 = 0 to 128 {
      affine.for %arg2 = 0 to 1008 {
        %14 = affine.apply #map7(%arg1, %arg2)
        %15 = affine.apply #map8(%arg1, %arg2)
        "krnl.memcpy"(%alloc_35, %alloc_30, %c256_i64, %15, %14) : (memref<1008x128x256xf32>, memref<128x1008x256xf32>, i64, index, index) -> ()
      }
    }
    %reinterpret_cast_36 = memref.reinterpret_cast %alloc_35 to offset: [0], sizes: [64512, 512], strides: [512, 1] : memref<1008x128x256xf32> to memref<64512x512xf32>
    %alloc_37 = memref.alloc() {alignment = 128 : i64} : memref<64512x512xf32>
    %c64512_38 = arith.constant 64512 : index
    %c512_39 = arith.constant 512 : index
    %c0_40 = arith.constant 0 : index
    affine.for %arg1 = 0 to 64512 {
      affine.for %arg2 = 0 to 512 {
        affine.store %cst_7, %alloc_37[%arg1, %arg2] : memref<64512x512xf32>
      }
    }
    %alloc_41 = memref.alloc() {alignment = 128 : i64} : memref<32x256xf32>
    %alloc_42 = memref.alloc() {alignment = 128 : i64} : memref<256x64xf32>
    affine.for %arg1 = 0 to 512 step 64 {
      affine.for %arg2 = 0 to 512 step 256 {
        %c256_77 = arith.constant 256 : index
        %c64_78 = arith.constant 64 : index
        %c512_79 = arith.constant 512 : index
        %c512_80 = arith.constant 512 : index
        %c1 = arith.constant 1 : index
        %c1_81 = arith.constant 1 : index
        %c0_82 = arith.constant 0 : index
        affine.for %arg3 = 0 to 256 {
          affine.for %arg4 = 0 to 64 {
            %14 = affine.apply #map9(%arg1, %arg4)
            %15 = affine.apply #map10(%arg1, %arg4, %arg2, %arg3)
            %16 = affine.load %1[%14, %15] : memref<512x512xf32>
            affine.store %16, %alloc_42[%arg3, %arg4] : memref<256x64xf32>
          }
        }
        affine.for %arg3 = 0 to 64512 step 32 {
          %c32 = arith.constant 32 : index
          %c256_83 = arith.constant 256 : index
          %c64512_84 = arith.constant 64512 : index
          %c512_85 = arith.constant 512 : index
          %c1_86 = arith.constant 1 : index
          %c1_87 = arith.constant 1 : index
          %c0_88 = arith.constant 0 : index
          affine.for %arg4 = 0 to 32 {
            affine.for %arg5 = 0 to 256 {
              %14 = affine.apply #map9(%arg3, %arg4)
              %15 = affine.apply #map10(%arg3, %arg4, %arg2, %arg5)
              %16 = affine.load %reinterpret_cast_36[%14, %15] : memref<64512x512xf32>
              affine.store %16, %alloc_41[%arg4, %arg5] : memref<32x256xf32>
            }
          }
          affine.for %arg4 = #map11(%arg1) to #map12(%arg1) step 16 {
            affine.for %arg5 = #map11(%arg3) to #map13(%arg3) step 4 {
              %c32_89 = arith.constant 32 : index
              %c256_90 = arith.constant 256 : index
              %c256_91 = arith.constant 256 : index
              %c64_92 = arith.constant 64 : index
              %c64512_93 = arith.constant 64512 : index
              %c512_94 = arith.constant 512 : index
              %c4 = arith.constant 4 : index
              %c16 = arith.constant 16 : index
              %c256_95 = arith.constant 256 : index
              %c64512_96 = arith.constant 64512 : index
              %c512_97 = arith.constant 512 : index
              %c512_98 = arith.constant 512 : index
              %c1_99 = arith.constant 1 : index
              %14 = affine.apply #map14(%arg3, %arg5)
              %c0_100 = arith.constant 0 : index
              %c0_101 = arith.constant 0 : index
              %15 = affine.apply #map15(%arg3, %arg5, %arg2, %arg1, %arg4)
              %c0_102 = arith.constant 0 : index
              %c0_103 = arith.constant 0 : index
              %c1_104 = arith.constant 1 : index
              %c1_105 = arith.constant 1 : index
              %c1_106 = arith.constant 1 : index
              %c0_107 = arith.constant 0 : index
              affine.if #set1(%arg3, %arg5, %arg2, %arg1, %arg4) {
                %alloca = memref.alloca() {alignment = 64 : i64} : memref<4xvector<16xf32>>
                %c0_108 = arith.constant 0 : index
                %c0_109 = arith.constant 0 : index
                %16 = arith.addi %c0_1, %arg5 : index
                %17 = arith.addi %c0_109, %arg4 : index
                %18 = vector.load %alloc_37[%16, %17] : memref<64512x512xf32>, vector<16xf32>
                affine.store %18, %alloca[%c0_1] : memref<4xvector<16xf32>>
                %19 = affine.apply #map(%c0_1)
                %20 = arith.addi %19, %arg5 : index
                %21 = arith.addi %c0_109, %arg4 : index
                %22 = vector.load %alloc_37[%20, %21] : memref<64512x512xf32>, vector<16xf32>
                affine.store %22, %alloca[%19] : memref<4xvector<16xf32>>
                %23 = affine.apply #map1(%c0_1)
                %24 = arith.addi %23, %arg5 : index
                %25 = arith.addi %c0_109, %arg4 : index
                %26 = vector.load %alloc_37[%24, %25] : memref<64512x512xf32>, vector<16xf32>
                affine.store %26, %alloca[%23] : memref<4xvector<16xf32>>
                %27 = affine.apply #map2(%c0_1)
                %28 = arith.addi %27, %arg5 : index
                %29 = arith.addi %c0_109, %arg4 : index
                %30 = vector.load %alloc_37[%28, %29] : memref<64512x512xf32>, vector<16xf32>
                affine.store %30, %alloca[%27] : memref<4xvector<16xf32>>
                affine.for %arg6 = 0 to 256 step 4 {
                  %46 = arith.addi %c0_1, %14 : index
                  %47 = arith.addi %arg6, %c0_100 : index
                  %48 = memref.load %alloc_41[%46, %47] : memref<32x256xf32>
                  %49 = vector.broadcast %48 : f32 to vector<16xf32>
                  %50 = arith.addi %arg6, %c0_101 : index
                  %51 = arith.addi %c0_109, %15 : index
                  %52 = vector.load %alloc_42[%50, %51] : memref<256x64xf32>, vector<16xf32>
                  %53 = affine.load %alloca[%c0_1] : memref<4xvector<16xf32>>
                  %54 = vector.fma %49, %52, %53 : vector<16xf32>
                  affine.store %54, %alloca[%c0_1] : memref<4xvector<16xf32>>
                  %55 = affine.apply #map(%arg6)
                  %56 = arith.addi %c0_1, %14 : index
                  %57 = arith.addi %55, %c0_100 : index
                  %58 = memref.load %alloc_41[%56, %57] : memref<32x256xf32>
                  %59 = vector.broadcast %58 : f32 to vector<16xf32>
                  %60 = arith.addi %55, %c0_101 : index
                  %61 = arith.addi %c0_109, %15 : index
                  %62 = vector.load %alloc_42[%60, %61] : memref<256x64xf32>, vector<16xf32>
                  %63 = affine.load %alloca[%c0_1] : memref<4xvector<16xf32>>
                  %64 = vector.fma %59, %62, %63 : vector<16xf32>
                  affine.store %64, %alloca[%c0_1] : memref<4xvector<16xf32>>
                  %65 = affine.apply #map1(%arg6)
                  %66 = arith.addi %c0_1, %14 : index
                  %67 = arith.addi %65, %c0_100 : index
                  %68 = memref.load %alloc_41[%66, %67] : memref<32x256xf32>
                  %69 = vector.broadcast %68 : f32 to vector<16xf32>
                  %70 = arith.addi %65, %c0_101 : index
                  %71 = arith.addi %c0_109, %15 : index
                  %72 = vector.load %alloc_42[%70, %71] : memref<256x64xf32>, vector<16xf32>
                  %73 = affine.load %alloca[%c0_1] : memref<4xvector<16xf32>>
                  %74 = vector.fma %69, %72, %73 : vector<16xf32>
                  affine.store %74, %alloca[%c0_1] : memref<4xvector<16xf32>>
                  %75 = affine.apply #map2(%arg6)
                  %76 = arith.addi %c0_1, %14 : index
                  %77 = arith.addi %75, %c0_100 : index
                  %78 = memref.load %alloc_41[%76, %77] : memref<32x256xf32>
                  %79 = vector.broadcast %78 : f32 to vector<16xf32>
                  %80 = arith.addi %75, %c0_101 : index
                  %81 = arith.addi %c0_109, %15 : index
                  %82 = vector.load %alloc_42[%80, %81] : memref<256x64xf32>, vector<16xf32>
                  %83 = affine.load %alloca[%c0_1] : memref<4xvector<16xf32>>
                  %84 = vector.fma %79, %82, %83 : vector<16xf32>
                  affine.store %84, %alloca[%c0_1] : memref<4xvector<16xf32>>
                  %85 = affine.apply #map(%c0_1)
                  %86 = arith.addi %85, %14 : index
                  %87 = arith.addi %arg6, %c0_100 : index
                  %88 = memref.load %alloc_41[%86, %87] : memref<32x256xf32>
                  %89 = vector.broadcast %88 : f32 to vector<16xf32>
                  %90 = arith.addi %arg6, %c0_101 : index
                  %91 = arith.addi %c0_109, %15 : index
                  %92 = vector.load %alloc_42[%90, %91] : memref<256x64xf32>, vector<16xf32>
                  %93 = affine.load %alloca[%85] : memref<4xvector<16xf32>>
                  %94 = vector.fma %89, %92, %93 : vector<16xf32>
                  affine.store %94, %alloca[%85] : memref<4xvector<16xf32>>
                  %95 = affine.apply #map(%arg6)
                  %96 = arith.addi %85, %14 : index
                  %97 = arith.addi %95, %c0_100 : index
                  %98 = memref.load %alloc_41[%96, %97] : memref<32x256xf32>
                  %99 = vector.broadcast %98 : f32 to vector<16xf32>
                  %100 = arith.addi %95, %c0_101 : index
                  %101 = arith.addi %c0_109, %15 : index
                  %102 = vector.load %alloc_42[%100, %101] : memref<256x64xf32>, vector<16xf32>
                  %103 = affine.load %alloca[%85] : memref<4xvector<16xf32>>
                  %104 = vector.fma %99, %102, %103 : vector<16xf32>
                  affine.store %104, %alloca[%85] : memref<4xvector<16xf32>>
                  %105 = affine.apply #map1(%arg6)
                  %106 = arith.addi %85, %14 : index
                  %107 = arith.addi %105, %c0_100 : index
                  %108 = memref.load %alloc_41[%106, %107] : memref<32x256xf32>
                  %109 = vector.broadcast %108 : f32 to vector<16xf32>
                  %110 = arith.addi %105, %c0_101 : index
                  %111 = arith.addi %c0_109, %15 : index
                  %112 = vector.load %alloc_42[%110, %111] : memref<256x64xf32>, vector<16xf32>
                  %113 = affine.load %alloca[%85] : memref<4xvector<16xf32>>
                  %114 = vector.fma %109, %112, %113 : vector<16xf32>
                  affine.store %114, %alloca[%85] : memref<4xvector<16xf32>>
                  %115 = affine.apply #map2(%arg6)
                  %116 = arith.addi %85, %14 : index
                  %117 = arith.addi %115, %c0_100 : index
                  %118 = memref.load %alloc_41[%116, %117] : memref<32x256xf32>
                  %119 = vector.broadcast %118 : f32 to vector<16xf32>
                  %120 = arith.addi %115, %c0_101 : index
                  %121 = arith.addi %c0_109, %15 : index
                  %122 = vector.load %alloc_42[%120, %121] : memref<256x64xf32>, vector<16xf32>
                  %123 = affine.load %alloca[%85] : memref<4xvector<16xf32>>
                  %124 = vector.fma %119, %122, %123 : vector<16xf32>
                  affine.store %124, %alloca[%85] : memref<4xvector<16xf32>>
                  %125 = affine.apply #map1(%c0_1)
                  %126 = arith.addi %125, %14 : index
                  %127 = arith.addi %arg6, %c0_100 : index
                  %128 = memref.load %alloc_41[%126, %127] : memref<32x256xf32>
                  %129 = vector.broadcast %128 : f32 to vector<16xf32>
                  %130 = arith.addi %arg6, %c0_101 : index
                  %131 = arith.addi %c0_109, %15 : index
                  %132 = vector.load %alloc_42[%130, %131] : memref<256x64xf32>, vector<16xf32>
                  %133 = affine.load %alloca[%125] : memref<4xvector<16xf32>>
                  %134 = vector.fma %129, %132, %133 : vector<16xf32>
                  affine.store %134, %alloca[%125] : memref<4xvector<16xf32>>
                  %135 = affine.apply #map(%arg6)
                  %136 = arith.addi %125, %14 : index
                  %137 = arith.addi %135, %c0_100 : index
                  %138 = memref.load %alloc_41[%136, %137] : memref<32x256xf32>
                  %139 = vector.broadcast %138 : f32 to vector<16xf32>
                  %140 = arith.addi %135, %c0_101 : index
                  %141 = arith.addi %c0_109, %15 : index
                  %142 = vector.load %alloc_42[%140, %141] : memref<256x64xf32>, vector<16xf32>
                  %143 = affine.load %alloca[%125] : memref<4xvector<16xf32>>
                  %144 = vector.fma %139, %142, %143 : vector<16xf32>
                  affine.store %144, %alloca[%125] : memref<4xvector<16xf32>>
                  %145 = affine.apply #map1(%arg6)
                  %146 = arith.addi %125, %14 : index
                  %147 = arith.addi %145, %c0_100 : index
                  %148 = memref.load %alloc_41[%146, %147] : memref<32x256xf32>
                  %149 = vector.broadcast %148 : f32 to vector<16xf32>
                  %150 = arith.addi %145, %c0_101 : index
                  %151 = arith.addi %c0_109, %15 : index
                  %152 = vector.load %alloc_42[%150, %151] : memref<256x64xf32>, vector<16xf32>
                  %153 = affine.load %alloca[%125] : memref<4xvector<16xf32>>
                  %154 = vector.fma %149, %152, %153 : vector<16xf32>
                  affine.store %154, %alloca[%125] : memref<4xvector<16xf32>>
                  %155 = affine.apply #map2(%arg6)
                  %156 = arith.addi %125, %14 : index
                  %157 = arith.addi %155, %c0_100 : index
                  %158 = memref.load %alloc_41[%156, %157] : memref<32x256xf32>
                  %159 = vector.broadcast %158 : f32 to vector<16xf32>
                  %160 = arith.addi %155, %c0_101 : index
                  %161 = arith.addi %c0_109, %15 : index
                  %162 = vector.load %alloc_42[%160, %161] : memref<256x64xf32>, vector<16xf32>
                  %163 = affine.load %alloca[%125] : memref<4xvector<16xf32>>
                  %164 = vector.fma %159, %162, %163 : vector<16xf32>
                  affine.store %164, %alloca[%125] : memref<4xvector<16xf32>>
                  %165 = affine.apply #map2(%c0_1)
                  %166 = arith.addi %165, %14 : index
                  %167 = arith.addi %arg6, %c0_100 : index
                  %168 = memref.load %alloc_41[%166, %167] : memref<32x256xf32>
                  %169 = vector.broadcast %168 : f32 to vector<16xf32>
                  %170 = arith.addi %arg6, %c0_101 : index
                  %171 = arith.addi %c0_109, %15 : index
                  %172 = vector.load %alloc_42[%170, %171] : memref<256x64xf32>, vector<16xf32>
                  %173 = affine.load %alloca[%165] : memref<4xvector<16xf32>>
                  %174 = vector.fma %169, %172, %173 : vector<16xf32>
                  affine.store %174, %alloca[%165] : memref<4xvector<16xf32>>
                  %175 = affine.apply #map(%arg6)
                  %176 = arith.addi %165, %14 : index
                  %177 = arith.addi %175, %c0_100 : index
                  %178 = memref.load %alloc_41[%176, %177] : memref<32x256xf32>
                  %179 = vector.broadcast %178 : f32 to vector<16xf32>
                  %180 = arith.addi %175, %c0_101 : index
                  %181 = arith.addi %c0_109, %15 : index
                  %182 = vector.load %alloc_42[%180, %181] : memref<256x64xf32>, vector<16xf32>
                  %183 = affine.load %alloca[%165] : memref<4xvector<16xf32>>
                  %184 = vector.fma %179, %182, %183 : vector<16xf32>
                  affine.store %184, %alloca[%165] : memref<4xvector<16xf32>>
                  %185 = affine.apply #map1(%arg6)
                  %186 = arith.addi %165, %14 : index
                  %187 = arith.addi %185, %c0_100 : index
                  %188 = memref.load %alloc_41[%186, %187] : memref<32x256xf32>
                  %189 = vector.broadcast %188 : f32 to vector<16xf32>
                  %190 = arith.addi %185, %c0_101 : index
                  %191 = arith.addi %c0_109, %15 : index
                  %192 = vector.load %alloc_42[%190, %191] : memref<256x64xf32>, vector<16xf32>
                  %193 = affine.load %alloca[%165] : memref<4xvector<16xf32>>
                  %194 = vector.fma %189, %192, %193 : vector<16xf32>
                  affine.store %194, %alloca[%165] : memref<4xvector<16xf32>>
                  %195 = affine.apply #map2(%arg6)
                  %196 = arith.addi %165, %14 : index
                  %197 = arith.addi %195, %c0_100 : index
                  %198 = memref.load %alloc_41[%196, %197] : memref<32x256xf32>
                  %199 = vector.broadcast %198 : f32 to vector<16xf32>
                  %200 = arith.addi %195, %c0_101 : index
                  %201 = arith.addi %c0_109, %15 : index
                  %202 = vector.load %alloc_42[%200, %201] : memref<256x64xf32>, vector<16xf32>
                  %203 = affine.load %alloca[%165] : memref<4xvector<16xf32>>
                  %204 = vector.fma %199, %202, %203 : vector<16xf32>
                  affine.store %204, %alloca[%165] : memref<4xvector<16xf32>>
                }
                %31 = affine.load %alloca[%c0_1] : memref<4xvector<16xf32>>
                %32 = arith.addi %c0_1, %arg5 : index
                %33 = arith.addi %c0_109, %arg4 : index
                vector.store %31, %alloc_37[%32, %33] : memref<64512x512xf32>, vector<16xf32>
                %34 = affine.apply #map(%c0_1)
                %35 = affine.load %alloca[%34] : memref<4xvector<16xf32>>
                %36 = arith.addi %34, %arg5 : index
                %37 = arith.addi %c0_109, %arg4 : index
                vector.store %35, %alloc_37[%36, %37] : memref<64512x512xf32>, vector<16xf32>
                %38 = affine.apply #map1(%c0_1)
                %39 = affine.load %alloca[%38] : memref<4xvector<16xf32>>
                %40 = arith.addi %38, %arg5 : index
                %41 = arith.addi %c0_109, %arg4 : index
                vector.store %39, %alloc_37[%40, %41] : memref<64512x512xf32>, vector<16xf32>
                %42 = affine.apply #map2(%c0_1)
                %43 = affine.load %alloca[%42] : memref<4xvector<16xf32>>
                %44 = arith.addi %42, %arg5 : index
                %45 = arith.addi %c0_109, %arg4 : index
                vector.store %43, %alloc_37[%44, %45] : memref<64512x512xf32>, vector<16xf32>
              } else {
              }
            }
          }
        }
      }
    }
    affine.for %arg1 = 0 to 64512 {
      affine.for %arg2 = 0 to 512 {
        %14 = affine.load %alloc_37[%arg1, %arg2] : memref<64512x512xf32>
        %15 = affine.load %2[%arg2] : memref<512xf32>
        %16 = arith.addf %14, %15 : f32
        affine.store %16, %alloc_37[%arg1, %arg2] : memref<64512x512xf32>
      }
    }
    %reinterpret_cast_43 = memref.reinterpret_cast %alloc_37 to offset: [0], sizes: [1008, 64, 512], strides: [32768, 512, 1] : memref<64512x512xf32> to memref<1008x64x512xf32>
    %alloc_44 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %arg0[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %reinterpret_cast_43[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %16 = arith.addf %14, %15 : f32
          affine.store %16, %alloc_44[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    %alloc_45 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x1xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 1 {
          affine.store %cst_7, %alloc_45[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
        }
      }
    }
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_44[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %alloc_45[%arg1, %arg2, %c0_6] : memref<1008x64x1xf32>
          %16 = arith.addf %15, %14 : f32
          affine.store %16, %alloc_45[%arg1, %arg2, %c0_6] : memref<1008x64x1xf32>
        }
      }
    }
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 1 {
          %14 = affine.load %alloc_45[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
          %15 = arith.divf %14, %cst : f32
          affine.store %15, %alloc_45[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
        }
      }
    }
    %alloc_46 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_44[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %alloc_45[%arg1, %arg2, %c0_6] : memref<1008x64x1xf32>
          %16 = arith.subf %14, %15 : f32
          affine.store %16, %alloc_46[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    %9 = "krnl.global"() {name = "constant_20", shape = [], value = dense<2.000000e+00> : tensor<f32>} : () -> memref<f32>
    %alloc_47 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_46[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %9[] : memref<f32>
          %16 = math.powf %14, %15 : f32
          affine.store %16, %alloc_47[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    %alloc_48 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x1xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 1 {
          affine.store %cst_7, %alloc_48[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
        }
      }
    }
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_47[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %alloc_48[%arg1, %arg2, %c0_6] : memref<1008x64x1xf32>
          %16 = arith.addf %15, %14 : f32
          affine.store %16, %alloc_48[%arg1, %arg2, %c0_6] : memref<1008x64x1xf32>
        }
      }
    }
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 1 {
          %14 = affine.load %alloc_48[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
          %15 = arith.divf %14, %cst : f32
          affine.store %15, %alloc_48[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
        }
      }
    }
    %10 = "krnl.global"() {name = "constant_21", shape = [], value = dense<9.99999974E-6> : tensor<f32>} : () -> memref<f32>
    %alloc_49 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x1xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 1 {
          %14 = affine.load %alloc_48[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
          %15 = affine.load %10[] : memref<f32>
          %16 = arith.addf %14, %15 : f32
          affine.store %16, %alloc_49[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
        }
      }
    }
    %alloc_50 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x1xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 1 {
          %14 = affine.load %alloc_49[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
          %15 = math.sqrt %14 : f32
          affine.store %15, %alloc_50[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
        }
      }
    }
    %alloc_51 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_46[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %alloc_50[%arg1, %arg2, %c0_6] : memref<1008x64x1xf32>
          %16 = arith.divf %14, %15 : f32
          affine.store %16, %alloc_51[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    %alloc_52 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_51[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %4[%arg3] : memref<512xf32>
          %16 = arith.mulf %14, %15 : f32
          affine.store %16, %alloc_52[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    %alloc_53 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_52[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %2[%arg3] : memref<512xf32>
          %16 = arith.addf %14, %15 : f32
          affine.store %16, %alloc_53[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    %alloc_54 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x2048xf32>
    %c1008_55 = arith.constant 1008 : index
    %c64_56 = arith.constant 64 : index
    %c2048_57 = arith.constant 2048 : index
    %c0_58 = arith.constant 0 : index
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 2048 {
          affine.store %cst_7, %alloc_54[%arg1, %arg2, %arg3] : memref<1008x64x2048xf32>
        }
      }
    }
    affine.for %arg1 = %c0_6 to %c1008 {
      affine.for %arg2 = %c0_6 to %c64 step 4 {
        affine.for %arg3 = %c0_6 to %c2048 step 8 {
          affine.for %arg4 = %c0_6 to %c512 step 8 {
            %c1008_77 = arith.constant 1008 : index
            %c64_78 = arith.constant 64 : index
            %c512_79 = arith.constant 512 : index
            %c512_80 = arith.constant 512 : index
            %c2048_81 = arith.constant 2048 : index
            %c1008_82 = arith.constant 1008 : index
            %c64_83 = arith.constant 64 : index
            %c2048_84 = arith.constant 2048 : index
            %c4 = arith.constant 4 : index
            %c8 = arith.constant 8 : index
            %c8_85 = arith.constant 8 : index
            %c64_86 = arith.constant 64 : index
            %c2048_87 = arith.constant 2048 : index
            %c512_88 = arith.constant 512 : index
            %c1 = arith.constant 1 : index
            %c0_89 = arith.constant 0 : index
            %c0_90 = arith.constant 0 : index
            %c0_91 = arith.constant 0 : index
            %c0_92 = arith.constant 0 : index
            %c0_93 = arith.constant 0 : index
            %c0_94 = arith.constant 0 : index
            %c1_95 = arith.constant 1 : index
            %c1_96 = arith.constant 1 : index
            %c1_97 = arith.constant 1 : index
            %c0_98 = arith.constant 0 : index
            affine.if #set() {
              %alloca = memref.alloca() {alignment = 64 : i64} : memref<4xvector<8xf32>>
              %c0_99 = arith.constant 0 : index
              %c0_100 = arith.constant 0 : index
              %14 = arith.addi %c0_0, %arg2 : index
              %15 = arith.addi %c0_100, %arg3 : index
              %16 = vector.load %alloc_54[%arg1, %14, %15] : memref<1008x64x2048xf32>, vector<8xf32>
              affine.store %16, %alloca[%c0_0] : memref<4xvector<8xf32>>
              %17 = affine.apply #map(%c0_0)
              %18 = arith.addi %17, %arg2 : index
              %19 = arith.addi %c0_100, %arg3 : index
              %20 = vector.load %alloc_54[%arg1, %18, %19] : memref<1008x64x2048xf32>, vector<8xf32>
              affine.store %20, %alloca[%17] : memref<4xvector<8xf32>>
              %21 = affine.apply #map1(%c0_0)
              %22 = arith.addi %21, %arg2 : index
              %23 = arith.addi %c0_100, %arg3 : index
              %24 = vector.load %alloc_54[%arg1, %22, %23] : memref<1008x64x2048xf32>, vector<8xf32>
              affine.store %24, %alloca[%21] : memref<4xvector<8xf32>>
              %25 = affine.apply #map2(%c0_0)
              %26 = arith.addi %25, %arg2 : index
              %27 = arith.addi %c0_100, %arg3 : index
              %28 = vector.load %alloc_54[%arg1, %26, %27] : memref<1008x64x2048xf32>, vector<8xf32>
              affine.store %28, %alloca[%25] : memref<4xvector<8xf32>>
              affine.for %arg5 = 0 to 8 step 4 {
                %44 = arith.addi %c0_0, %arg2 : index
                %45 = arith.addi %arg5, %arg4 : index
                %46 = memref.load %alloc_53[%arg1, %44, %45] : memref<1008x64x512xf32>
                %47 = vector.broadcast %46 : f32 to vector<8xf32>
                %48 = arith.addi %arg5, %arg4 : index
                %49 = arith.addi %c0_100, %arg3 : index
                %50 = vector.load %6[%48, %49] : memref<512x2048xf32>, vector<8xf32>
                %51 = affine.load %alloca[%c0_0] : memref<4xvector<8xf32>>
                %52 = vector.fma %47, %50, %51 : vector<8xf32>
                affine.store %52, %alloca[%c0_0] : memref<4xvector<8xf32>>
                %53 = affine.apply #map(%arg5)
                %54 = arith.addi %c0_0, %arg2 : index
                %55 = arith.addi %53, %arg4 : index
                %56 = memref.load %alloc_53[%arg1, %54, %55] : memref<1008x64x512xf32>
                %57 = vector.broadcast %56 : f32 to vector<8xf32>
                %58 = arith.addi %53, %arg4 : index
                %59 = arith.addi %c0_100, %arg3 : index
                %60 = vector.load %6[%58, %59] : memref<512x2048xf32>, vector<8xf32>
                %61 = affine.load %alloca[%c0_0] : memref<4xvector<8xf32>>
                %62 = vector.fma %57, %60, %61 : vector<8xf32>
                affine.store %62, %alloca[%c0_0] : memref<4xvector<8xf32>>
                %63 = affine.apply #map1(%arg5)
                %64 = arith.addi %c0_0, %arg2 : index
                %65 = arith.addi %63, %arg4 : index
                %66 = memref.load %alloc_53[%arg1, %64, %65] : memref<1008x64x512xf32>
                %67 = vector.broadcast %66 : f32 to vector<8xf32>
                %68 = arith.addi %63, %arg4 : index
                %69 = arith.addi %c0_100, %arg3 : index
                %70 = vector.load %6[%68, %69] : memref<512x2048xf32>, vector<8xf32>
                %71 = affine.load %alloca[%c0_0] : memref<4xvector<8xf32>>
                %72 = vector.fma %67, %70, %71 : vector<8xf32>
                affine.store %72, %alloca[%c0_0] : memref<4xvector<8xf32>>
                %73 = affine.apply #map2(%arg5)
                %74 = arith.addi %c0_0, %arg2 : index
                %75 = arith.addi %73, %arg4 : index
                %76 = memref.load %alloc_53[%arg1, %74, %75] : memref<1008x64x512xf32>
                %77 = vector.broadcast %76 : f32 to vector<8xf32>
                %78 = arith.addi %73, %arg4 : index
                %79 = arith.addi %c0_100, %arg3 : index
                %80 = vector.load %6[%78, %79] : memref<512x2048xf32>, vector<8xf32>
                %81 = affine.load %alloca[%c0_0] : memref<4xvector<8xf32>>
                %82 = vector.fma %77, %80, %81 : vector<8xf32>
                affine.store %82, %alloca[%c0_0] : memref<4xvector<8xf32>>
                %83 = affine.apply #map(%c0_0)
                %84 = arith.addi %83, %arg2 : index
                %85 = arith.addi %arg5, %arg4 : index
                %86 = memref.load %alloc_53[%arg1, %84, %85] : memref<1008x64x512xf32>
                %87 = vector.broadcast %86 : f32 to vector<8xf32>
                %88 = arith.addi %arg5, %arg4 : index
                %89 = arith.addi %c0_100, %arg3 : index
                %90 = vector.load %6[%88, %89] : memref<512x2048xf32>, vector<8xf32>
                %91 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %92 = vector.fma %87, %90, %91 : vector<8xf32>
                affine.store %92, %alloca[%83] : memref<4xvector<8xf32>>
                %93 = affine.apply #map(%arg5)
                %94 = arith.addi %83, %arg2 : index
                %95 = arith.addi %93, %arg4 : index
                %96 = memref.load %alloc_53[%arg1, %94, %95] : memref<1008x64x512xf32>
                %97 = vector.broadcast %96 : f32 to vector<8xf32>
                %98 = arith.addi %93, %arg4 : index
                %99 = arith.addi %c0_100, %arg3 : index
                %100 = vector.load %6[%98, %99] : memref<512x2048xf32>, vector<8xf32>
                %101 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %102 = vector.fma %97, %100, %101 : vector<8xf32>
                affine.store %102, %alloca[%83] : memref<4xvector<8xf32>>
                %103 = affine.apply #map1(%arg5)
                %104 = arith.addi %83, %arg2 : index
                %105 = arith.addi %103, %arg4 : index
                %106 = memref.load %alloc_53[%arg1, %104, %105] : memref<1008x64x512xf32>
                %107 = vector.broadcast %106 : f32 to vector<8xf32>
                %108 = arith.addi %103, %arg4 : index
                %109 = arith.addi %c0_100, %arg3 : index
                %110 = vector.load %6[%108, %109] : memref<512x2048xf32>, vector<8xf32>
                %111 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %112 = vector.fma %107, %110, %111 : vector<8xf32>
                affine.store %112, %alloca[%83] : memref<4xvector<8xf32>>
                %113 = affine.apply #map2(%arg5)
                %114 = arith.addi %83, %arg2 : index
                %115 = arith.addi %113, %arg4 : index
                %116 = memref.load %alloc_53[%arg1, %114, %115] : memref<1008x64x512xf32>
                %117 = vector.broadcast %116 : f32 to vector<8xf32>
                %118 = arith.addi %113, %arg4 : index
                %119 = arith.addi %c0_100, %arg3 : index
                %120 = vector.load %6[%118, %119] : memref<512x2048xf32>, vector<8xf32>
                %121 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %122 = vector.fma %117, %120, %121 : vector<8xf32>
                affine.store %122, %alloca[%83] : memref<4xvector<8xf32>>
                %123 = affine.apply #map1(%c0_0)
                %124 = arith.addi %123, %arg2 : index
                %125 = arith.addi %arg5, %arg4 : index
                %126 = memref.load %alloc_53[%arg1, %124, %125] : memref<1008x64x512xf32>
                %127 = vector.broadcast %126 : f32 to vector<8xf32>
                %128 = arith.addi %arg5, %arg4 : index
                %129 = arith.addi %c0_100, %arg3 : index
                %130 = vector.load %6[%128, %129] : memref<512x2048xf32>, vector<8xf32>
                %131 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %132 = vector.fma %127, %130, %131 : vector<8xf32>
                affine.store %132, %alloca[%123] : memref<4xvector<8xf32>>
                %133 = affine.apply #map(%arg5)
                %134 = arith.addi %123, %arg2 : index
                %135 = arith.addi %133, %arg4 : index
                %136 = memref.load %alloc_53[%arg1, %134, %135] : memref<1008x64x512xf32>
                %137 = vector.broadcast %136 : f32 to vector<8xf32>
                %138 = arith.addi %133, %arg4 : index
                %139 = arith.addi %c0_100, %arg3 : index
                %140 = vector.load %6[%138, %139] : memref<512x2048xf32>, vector<8xf32>
                %141 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %142 = vector.fma %137, %140, %141 : vector<8xf32>
                affine.store %142, %alloca[%123] : memref<4xvector<8xf32>>
                %143 = affine.apply #map1(%arg5)
                %144 = arith.addi %123, %arg2 : index
                %145 = arith.addi %143, %arg4 : index
                %146 = memref.load %alloc_53[%arg1, %144, %145] : memref<1008x64x512xf32>
                %147 = vector.broadcast %146 : f32 to vector<8xf32>
                %148 = arith.addi %143, %arg4 : index
                %149 = arith.addi %c0_100, %arg3 : index
                %150 = vector.load %6[%148, %149] : memref<512x2048xf32>, vector<8xf32>
                %151 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %152 = vector.fma %147, %150, %151 : vector<8xf32>
                affine.store %152, %alloca[%123] : memref<4xvector<8xf32>>
                %153 = affine.apply #map2(%arg5)
                %154 = arith.addi %123, %arg2 : index
                %155 = arith.addi %153, %arg4 : index
                %156 = memref.load %alloc_53[%arg1, %154, %155] : memref<1008x64x512xf32>
                %157 = vector.broadcast %156 : f32 to vector<8xf32>
                %158 = arith.addi %153, %arg4 : index
                %159 = arith.addi %c0_100, %arg3 : index
                %160 = vector.load %6[%158, %159] : memref<512x2048xf32>, vector<8xf32>
                %161 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %162 = vector.fma %157, %160, %161 : vector<8xf32>
                affine.store %162, %alloca[%123] : memref<4xvector<8xf32>>
                %163 = affine.apply #map2(%c0_0)
                %164 = arith.addi %163, %arg2 : index
                %165 = arith.addi %arg5, %arg4 : index
                %166 = memref.load %alloc_53[%arg1, %164, %165] : memref<1008x64x512xf32>
                %167 = vector.broadcast %166 : f32 to vector<8xf32>
                %168 = arith.addi %arg5, %arg4 : index
                %169 = arith.addi %c0_100, %arg3 : index
                %170 = vector.load %6[%168, %169] : memref<512x2048xf32>, vector<8xf32>
                %171 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %172 = vector.fma %167, %170, %171 : vector<8xf32>
                affine.store %172, %alloca[%163] : memref<4xvector<8xf32>>
                %173 = affine.apply #map(%arg5)
                %174 = arith.addi %163, %arg2 : index
                %175 = arith.addi %173, %arg4 : index
                %176 = memref.load %alloc_53[%arg1, %174, %175] : memref<1008x64x512xf32>
                %177 = vector.broadcast %176 : f32 to vector<8xf32>
                %178 = arith.addi %173, %arg4 : index
                %179 = arith.addi %c0_100, %arg3 : index
                %180 = vector.load %6[%178, %179] : memref<512x2048xf32>, vector<8xf32>
                %181 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %182 = vector.fma %177, %180, %181 : vector<8xf32>
                affine.store %182, %alloca[%163] : memref<4xvector<8xf32>>
                %183 = affine.apply #map1(%arg5)
                %184 = arith.addi %163, %arg2 : index
                %185 = arith.addi %183, %arg4 : index
                %186 = memref.load %alloc_53[%arg1, %184, %185] : memref<1008x64x512xf32>
                %187 = vector.broadcast %186 : f32 to vector<8xf32>
                %188 = arith.addi %183, %arg4 : index
                %189 = arith.addi %c0_100, %arg3 : index
                %190 = vector.load %6[%188, %189] : memref<512x2048xf32>, vector<8xf32>
                %191 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %192 = vector.fma %187, %190, %191 : vector<8xf32>
                affine.store %192, %alloca[%163] : memref<4xvector<8xf32>>
                %193 = affine.apply #map2(%arg5)
                %194 = arith.addi %163, %arg2 : index
                %195 = arith.addi %193, %arg4 : index
                %196 = memref.load %alloc_53[%arg1, %194, %195] : memref<1008x64x512xf32>
                %197 = vector.broadcast %196 : f32 to vector<8xf32>
                %198 = arith.addi %193, %arg4 : index
                %199 = arith.addi %c0_100, %arg3 : index
                %200 = vector.load %6[%198, %199] : memref<512x2048xf32>, vector<8xf32>
                %201 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %202 = vector.fma %197, %200, %201 : vector<8xf32>
                affine.store %202, %alloca[%163] : memref<4xvector<8xf32>>
              }
              %29 = affine.load %alloca[%c0_0] : memref<4xvector<8xf32>>
              %30 = arith.addi %c0_0, %arg2 : index
              %31 = arith.addi %c0_100, %arg3 : index
              vector.store %29, %alloc_54[%arg1, %30, %31] : memref<1008x64x2048xf32>, vector<8xf32>
              %32 = affine.apply #map(%c0_0)
              %33 = affine.load %alloca[%32] : memref<4xvector<8xf32>>
              %34 = arith.addi %32, %arg2 : index
              %35 = arith.addi %c0_100, %arg3 : index
              vector.store %33, %alloc_54[%arg1, %34, %35] : memref<1008x64x2048xf32>, vector<8xf32>
              %36 = affine.apply #map1(%c0_0)
              %37 = affine.load %alloca[%36] : memref<4xvector<8xf32>>
              %38 = arith.addi %36, %arg2 : index
              %39 = arith.addi %c0_100, %arg3 : index
              vector.store %37, %alloc_54[%arg1, %38, %39] : memref<1008x64x2048xf32>, vector<8xf32>
              %40 = affine.apply #map2(%c0_0)
              %41 = affine.load %alloca[%40] : memref<4xvector<8xf32>>
              %42 = arith.addi %40, %arg2 : index
              %43 = arith.addi %c0_100, %arg3 : index
              vector.store %41, %alloc_54[%arg1, %42, %43] : memref<1008x64x2048xf32>, vector<8xf32>
            } else {
            }
          }
        }
      }
    }
    %alloc_59 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x2048xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 2048 {
          %14 = affine.load %alloc_54[%arg1, %arg2, %arg3] : memref<1008x64x2048xf32>
          %15 = affine.load %3[%arg3] : memref<2048xf32>
          %16 = arith.addf %14, %15 : f32
          affine.store %16, %alloc_59[%arg1, %arg2, %arg3] : memref<1008x64x2048xf32>
        }
      }
    }
    %alloc_60 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x2048xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 2048 {
          %14 = affine.load %alloc_59[%arg1, %arg2, %arg3] : memref<1008x64x2048xf32>
          %15 = arith.cmpf oge, %14, %cst_7 : f32
          %16 = arith.select %15, %14, %cst_7 : f32
          affine.store %16, %alloc_60[%arg1, %arg2, %arg3] : memref<1008x64x2048xf32>
        }
      }
    }
    %alloc_61 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    %c1008_62 = arith.constant 1008 : index
    %c64_63 = arith.constant 64 : index
    %c512_64 = arith.constant 512 : index
    %c0_65 = arith.constant 0 : index
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          affine.store %cst_7, %alloc_61[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    affine.for %arg1 = %c0_6 to %c1008 {
      affine.for %arg2 = %c0_6 to %c64 step 4 {
        affine.for %arg3 = %c0_6 to %c512 step 8 {
          affine.for %arg4 = %c0_6 to %c2048 step 8 {
            %c1008_77 = arith.constant 1008 : index
            %c64_78 = arith.constant 64 : index
            %c2048_79 = arith.constant 2048 : index
            %c2048_80 = arith.constant 2048 : index
            %c512_81 = arith.constant 512 : index
            %c1008_82 = arith.constant 1008 : index
            %c64_83 = arith.constant 64 : index
            %c512_84 = arith.constant 512 : index
            %c4 = arith.constant 4 : index
            %c8 = arith.constant 8 : index
            %c8_85 = arith.constant 8 : index
            %c64_86 = arith.constant 64 : index
            %c512_87 = arith.constant 512 : index
            %c2048_88 = arith.constant 2048 : index
            %c1 = arith.constant 1 : index
            %c0_89 = arith.constant 0 : index
            %c0_90 = arith.constant 0 : index
            %c0_91 = arith.constant 0 : index
            %c0_92 = arith.constant 0 : index
            %c0_93 = arith.constant 0 : index
            %c0_94 = arith.constant 0 : index
            %c1_95 = arith.constant 1 : index
            %c1_96 = arith.constant 1 : index
            %c1_97 = arith.constant 1 : index
            %c0_98 = arith.constant 0 : index
            affine.if #set() {
              %alloca = memref.alloca() {alignment = 64 : i64} : memref<4xvector<8xf32>>
              %c0_99 = arith.constant 0 : index
              %c0_100 = arith.constant 0 : index
              %14 = arith.addi %c0, %arg2 : index
              %15 = arith.addi %c0_100, %arg3 : index
              %16 = vector.load %alloc_61[%arg1, %14, %15] : memref<1008x64x512xf32>, vector<8xf32>
              affine.store %16, %alloca[%c0] : memref<4xvector<8xf32>>
              %17 = affine.apply #map(%c0)
              %18 = arith.addi %17, %arg2 : index
              %19 = arith.addi %c0_100, %arg3 : index
              %20 = vector.load %alloc_61[%arg1, %18, %19] : memref<1008x64x512xf32>, vector<8xf32>
              affine.store %20, %alloca[%17] : memref<4xvector<8xf32>>
              %21 = affine.apply #map1(%c0)
              %22 = arith.addi %21, %arg2 : index
              %23 = arith.addi %c0_100, %arg3 : index
              %24 = vector.load %alloc_61[%arg1, %22, %23] : memref<1008x64x512xf32>, vector<8xf32>
              affine.store %24, %alloca[%21] : memref<4xvector<8xf32>>
              %25 = affine.apply #map2(%c0)
              %26 = arith.addi %25, %arg2 : index
              %27 = arith.addi %c0_100, %arg3 : index
              %28 = vector.load %alloc_61[%arg1, %26, %27] : memref<1008x64x512xf32>, vector<8xf32>
              affine.store %28, %alloca[%25] : memref<4xvector<8xf32>>
              affine.for %arg5 = 0 to 8 step 4 {
                %44 = arith.addi %c0, %arg2 : index
                %45 = arith.addi %arg5, %arg4 : index
                %46 = memref.load %alloc_60[%arg1, %44, %45] : memref<1008x64x2048xf32>
                %47 = vector.broadcast %46 : f32 to vector<8xf32>
                %48 = arith.addi %arg5, %arg4 : index
                %49 = arith.addi %c0_100, %arg3 : index
                %50 = vector.load %7[%48, %49] : memref<2048x512xf32>, vector<8xf32>
                %51 = affine.load %alloca[%c0] : memref<4xvector<8xf32>>
                %52 = vector.fma %47, %50, %51 : vector<8xf32>
                affine.store %52, %alloca[%c0] : memref<4xvector<8xf32>>
                %53 = affine.apply #map(%arg5)
                %54 = arith.addi %c0, %arg2 : index
                %55 = arith.addi %53, %arg4 : index
                %56 = memref.load %alloc_60[%arg1, %54, %55] : memref<1008x64x2048xf32>
                %57 = vector.broadcast %56 : f32 to vector<8xf32>
                %58 = arith.addi %53, %arg4 : index
                %59 = arith.addi %c0_100, %arg3 : index
                %60 = vector.load %7[%58, %59] : memref<2048x512xf32>, vector<8xf32>
                %61 = affine.load %alloca[%c0] : memref<4xvector<8xf32>>
                %62 = vector.fma %57, %60, %61 : vector<8xf32>
                affine.store %62, %alloca[%c0] : memref<4xvector<8xf32>>
                %63 = affine.apply #map1(%arg5)
                %64 = arith.addi %c0, %arg2 : index
                %65 = arith.addi %63, %arg4 : index
                %66 = memref.load %alloc_60[%arg1, %64, %65] : memref<1008x64x2048xf32>
                %67 = vector.broadcast %66 : f32 to vector<8xf32>
                %68 = arith.addi %63, %arg4 : index
                %69 = arith.addi %c0_100, %arg3 : index
                %70 = vector.load %7[%68, %69] : memref<2048x512xf32>, vector<8xf32>
                %71 = affine.load %alloca[%c0] : memref<4xvector<8xf32>>
                %72 = vector.fma %67, %70, %71 : vector<8xf32>
                affine.store %72, %alloca[%c0] : memref<4xvector<8xf32>>
                %73 = affine.apply #map2(%arg5)
                %74 = arith.addi %c0, %arg2 : index
                %75 = arith.addi %73, %arg4 : index
                %76 = memref.load %alloc_60[%arg1, %74, %75] : memref<1008x64x2048xf32>
                %77 = vector.broadcast %76 : f32 to vector<8xf32>
                %78 = arith.addi %73, %arg4 : index
                %79 = arith.addi %c0_100, %arg3 : index
                %80 = vector.load %7[%78, %79] : memref<2048x512xf32>, vector<8xf32>
                %81 = affine.load %alloca[%c0] : memref<4xvector<8xf32>>
                %82 = vector.fma %77, %80, %81 : vector<8xf32>
                affine.store %82, %alloca[%c0] : memref<4xvector<8xf32>>
                %83 = affine.apply #map(%c0)
                %84 = arith.addi %83, %arg2 : index
                %85 = arith.addi %arg5, %arg4 : index
                %86 = memref.load %alloc_60[%arg1, %84, %85] : memref<1008x64x2048xf32>
                %87 = vector.broadcast %86 : f32 to vector<8xf32>
                %88 = arith.addi %arg5, %arg4 : index
                %89 = arith.addi %c0_100, %arg3 : index
                %90 = vector.load %7[%88, %89] : memref<2048x512xf32>, vector<8xf32>
                %91 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %92 = vector.fma %87, %90, %91 : vector<8xf32>
                affine.store %92, %alloca[%83] : memref<4xvector<8xf32>>
                %93 = affine.apply #map(%arg5)
                %94 = arith.addi %83, %arg2 : index
                %95 = arith.addi %93, %arg4 : index
                %96 = memref.load %alloc_60[%arg1, %94, %95] : memref<1008x64x2048xf32>
                %97 = vector.broadcast %96 : f32 to vector<8xf32>
                %98 = arith.addi %93, %arg4 : index
                %99 = arith.addi %c0_100, %arg3 : index
                %100 = vector.load %7[%98, %99] : memref<2048x512xf32>, vector<8xf32>
                %101 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %102 = vector.fma %97, %100, %101 : vector<8xf32>
                affine.store %102, %alloca[%83] : memref<4xvector<8xf32>>
                %103 = affine.apply #map1(%arg5)
                %104 = arith.addi %83, %arg2 : index
                %105 = arith.addi %103, %arg4 : index
                %106 = memref.load %alloc_60[%arg1, %104, %105] : memref<1008x64x2048xf32>
                %107 = vector.broadcast %106 : f32 to vector<8xf32>
                %108 = arith.addi %103, %arg4 : index
                %109 = arith.addi %c0_100, %arg3 : index
                %110 = vector.load %7[%108, %109] : memref<2048x512xf32>, vector<8xf32>
                %111 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %112 = vector.fma %107, %110, %111 : vector<8xf32>
                affine.store %112, %alloca[%83] : memref<4xvector<8xf32>>
                %113 = affine.apply #map2(%arg5)
                %114 = arith.addi %83, %arg2 : index
                %115 = arith.addi %113, %arg4 : index
                %116 = memref.load %alloc_60[%arg1, %114, %115] : memref<1008x64x2048xf32>
                %117 = vector.broadcast %116 : f32 to vector<8xf32>
                %118 = arith.addi %113, %arg4 : index
                %119 = arith.addi %c0_100, %arg3 : index
                %120 = vector.load %7[%118, %119] : memref<2048x512xf32>, vector<8xf32>
                %121 = affine.load %alloca[%83] : memref<4xvector<8xf32>>
                %122 = vector.fma %117, %120, %121 : vector<8xf32>
                affine.store %122, %alloca[%83] : memref<4xvector<8xf32>>
                %123 = affine.apply #map1(%c0)
                %124 = arith.addi %123, %arg2 : index
                %125 = arith.addi %arg5, %arg4 : index
                %126 = memref.load %alloc_60[%arg1, %124, %125] : memref<1008x64x2048xf32>
                %127 = vector.broadcast %126 : f32 to vector<8xf32>
                %128 = arith.addi %arg5, %arg4 : index
                %129 = arith.addi %c0_100, %arg3 : index
                %130 = vector.load %7[%128, %129] : memref<2048x512xf32>, vector<8xf32>
                %131 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %132 = vector.fma %127, %130, %131 : vector<8xf32>
                affine.store %132, %alloca[%123] : memref<4xvector<8xf32>>
                %133 = affine.apply #map(%arg5)
                %134 = arith.addi %123, %arg2 : index
                %135 = arith.addi %133, %arg4 : index
                %136 = memref.load %alloc_60[%arg1, %134, %135] : memref<1008x64x2048xf32>
                %137 = vector.broadcast %136 : f32 to vector<8xf32>
                %138 = arith.addi %133, %arg4 : index
                %139 = arith.addi %c0_100, %arg3 : index
                %140 = vector.load %7[%138, %139] : memref<2048x512xf32>, vector<8xf32>
                %141 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %142 = vector.fma %137, %140, %141 : vector<8xf32>
                affine.store %142, %alloca[%123] : memref<4xvector<8xf32>>
                %143 = affine.apply #map1(%arg5)
                %144 = arith.addi %123, %arg2 : index
                %145 = arith.addi %143, %arg4 : index
                %146 = memref.load %alloc_60[%arg1, %144, %145] : memref<1008x64x2048xf32>
                %147 = vector.broadcast %146 : f32 to vector<8xf32>
                %148 = arith.addi %143, %arg4 : index
                %149 = arith.addi %c0_100, %arg3 : index
                %150 = vector.load %7[%148, %149] : memref<2048x512xf32>, vector<8xf32>
                %151 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %152 = vector.fma %147, %150, %151 : vector<8xf32>
                affine.store %152, %alloca[%123] : memref<4xvector<8xf32>>
                %153 = affine.apply #map2(%arg5)
                %154 = arith.addi %123, %arg2 : index
                %155 = arith.addi %153, %arg4 : index
                %156 = memref.load %alloc_60[%arg1, %154, %155] : memref<1008x64x2048xf32>
                %157 = vector.broadcast %156 : f32 to vector<8xf32>
                %158 = arith.addi %153, %arg4 : index
                %159 = arith.addi %c0_100, %arg3 : index
                %160 = vector.load %7[%158, %159] : memref<2048x512xf32>, vector<8xf32>
                %161 = affine.load %alloca[%123] : memref<4xvector<8xf32>>
                %162 = vector.fma %157, %160, %161 : vector<8xf32>
                affine.store %162, %alloca[%123] : memref<4xvector<8xf32>>
                %163 = affine.apply #map2(%c0)
                %164 = arith.addi %163, %arg2 : index
                %165 = arith.addi %arg5, %arg4 : index
                %166 = memref.load %alloc_60[%arg1, %164, %165] : memref<1008x64x2048xf32>
                %167 = vector.broadcast %166 : f32 to vector<8xf32>
                %168 = arith.addi %arg5, %arg4 : index
                %169 = arith.addi %c0_100, %arg3 : index
                %170 = vector.load %7[%168, %169] : memref<2048x512xf32>, vector<8xf32>
                %171 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %172 = vector.fma %167, %170, %171 : vector<8xf32>
                affine.store %172, %alloca[%163] : memref<4xvector<8xf32>>
                %173 = affine.apply #map(%arg5)
                %174 = arith.addi %163, %arg2 : index
                %175 = arith.addi %173, %arg4 : index
                %176 = memref.load %alloc_60[%arg1, %174, %175] : memref<1008x64x2048xf32>
                %177 = vector.broadcast %176 : f32 to vector<8xf32>
                %178 = arith.addi %173, %arg4 : index
                %179 = arith.addi %c0_100, %arg3 : index
                %180 = vector.load %7[%178, %179] : memref<2048x512xf32>, vector<8xf32>
                %181 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %182 = vector.fma %177, %180, %181 : vector<8xf32>
                affine.store %182, %alloca[%163] : memref<4xvector<8xf32>>
                %183 = affine.apply #map1(%arg5)
                %184 = arith.addi %163, %arg2 : index
                %185 = arith.addi %183, %arg4 : index
                %186 = memref.load %alloc_60[%arg1, %184, %185] : memref<1008x64x2048xf32>
                %187 = vector.broadcast %186 : f32 to vector<8xf32>
                %188 = arith.addi %183, %arg4 : index
                %189 = arith.addi %c0_100, %arg3 : index
                %190 = vector.load %7[%188, %189] : memref<2048x512xf32>, vector<8xf32>
                %191 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %192 = vector.fma %187, %190, %191 : vector<8xf32>
                affine.store %192, %alloca[%163] : memref<4xvector<8xf32>>
                %193 = affine.apply #map2(%arg5)
                %194 = arith.addi %163, %arg2 : index
                %195 = arith.addi %193, %arg4 : index
                %196 = memref.load %alloc_60[%arg1, %194, %195] : memref<1008x64x2048xf32>
                %197 = vector.broadcast %196 : f32 to vector<8xf32>
                %198 = arith.addi %193, %arg4 : index
                %199 = arith.addi %c0_100, %arg3 : index
                %200 = vector.load %7[%198, %199] : memref<2048x512xf32>, vector<8xf32>
                %201 = affine.load %alloca[%163] : memref<4xvector<8xf32>>
                %202 = vector.fma %197, %200, %201 : vector<8xf32>
                affine.store %202, %alloca[%163] : memref<4xvector<8xf32>>
              }
              %29 = affine.load %alloca[%c0] : memref<4xvector<8xf32>>
              %30 = arith.addi %c0, %arg2 : index
              %31 = arith.addi %c0_100, %arg3 : index
              vector.store %29, %alloc_61[%arg1, %30, %31] : memref<1008x64x512xf32>, vector<8xf32>
              %32 = affine.apply #map(%c0)
              %33 = affine.load %alloca[%32] : memref<4xvector<8xf32>>
              %34 = arith.addi %32, %arg2 : index
              %35 = arith.addi %c0_100, %arg3 : index
              vector.store %33, %alloc_61[%arg1, %34, %35] : memref<1008x64x512xf32>, vector<8xf32>
              %36 = affine.apply #map1(%c0)
              %37 = affine.load %alloca[%36] : memref<4xvector<8xf32>>
              %38 = arith.addi %36, %arg2 : index
              %39 = arith.addi %c0_100, %arg3 : index
              vector.store %37, %alloc_61[%arg1, %38, %39] : memref<1008x64x512xf32>, vector<8xf32>
              %40 = affine.apply #map2(%c0)
              %41 = affine.load %alloca[%40] : memref<4xvector<8xf32>>
              %42 = arith.addi %40, %arg2 : index
              %43 = arith.addi %c0_100, %arg3 : index
              vector.store %41, %alloc_61[%arg1, %42, %43] : memref<1008x64x512xf32>, vector<8xf32>
            } else {
            }
          }
        }
      }
    }
    %alloc_66 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_52[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %alloc_61[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %16 = arith.addf %14, %15 : f32
          affine.store %16, %alloc_66[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    %11 = "krnl.global"() {name = "constant_22", shape = [512], value = dense_resource<__elided__> : tensor<512xf32>} : () -> memref<512xf32>
    %alloc_67 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_66[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %11[%arg3] : memref<512xf32>
          %16 = arith.addf %14, %15 : f32
          affine.store %16, %alloc_67[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    %alloc_68 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x1xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 1 {
          affine.store %cst_7, %alloc_68[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
        }
      }
    }
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_67[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %alloc_68[%arg1, %arg2, %c0_6] : memref<1008x64x1xf32>
          %16 = arith.addf %15, %14 : f32
          affine.store %16, %alloc_68[%arg1, %arg2, %c0_6] : memref<1008x64x1xf32>
        }
      }
    }
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 1 {
          %14 = affine.load %alloc_68[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
          %15 = arith.divf %14, %cst : f32
          affine.store %15, %alloc_68[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
        }
      }
    }
    %alloc_69 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_67[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %alloc_68[%arg1, %arg2, %c0_6] : memref<1008x64x1xf32>
          %16 = arith.subf %14, %15 : f32
          affine.store %16, %alloc_69[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    %12 = "krnl.global"() {name = "constant_23", shape = [], value = dense<2.000000e+00> : tensor<f32>} : () -> memref<f32>
    %alloc_70 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_69[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %12[] : memref<f32>
          %16 = math.powf %14, %15 : f32
          affine.store %16, %alloc_70[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    %alloc_71 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x1xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 1 {
          affine.store %cst_7, %alloc_71[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
        }
      }
    }
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_70[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %alloc_71[%arg1, %arg2, %c0_6] : memref<1008x64x1xf32>
          %16 = arith.addf %15, %14 : f32
          affine.store %16, %alloc_71[%arg1, %arg2, %c0_6] : memref<1008x64x1xf32>
        }
      }
    }
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 1 {
          %14 = affine.load %alloc_71[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
          %15 = arith.divf %14, %cst : f32
          affine.store %15, %alloc_71[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
        }
      }
    }
    %13 = "krnl.global"() {name = "constant_24", shape = [], value = dense<9.99999974E-6> : tensor<f32>} : () -> memref<f32>
    %alloc_72 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x1xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 1 {
          %14 = affine.load %alloc_71[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
          %15 = affine.load %13[] : memref<f32>
          %16 = arith.addf %14, %15 : f32
          affine.store %16, %alloc_72[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
        }
      }
    }
    %alloc_73 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x1xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 1 {
          %14 = affine.load %alloc_72[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
          %15 = math.sqrt %14 : f32
          affine.store %15, %alloc_73[%arg1, %arg2, %arg3] : memref<1008x64x1xf32>
        }
      }
    }
    %alloc_74 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_69[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %alloc_73[%arg1, %arg2, %c0_6] : memref<1008x64x1xf32>
          %16 = arith.divf %14, %15 : f32
          affine.store %16, %alloc_74[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    %alloc_75 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_74[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %4[%arg3] : memref<512xf32>
          %16 = arith.mulf %14, %15 : f32
          affine.store %16, %alloc_75[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    %alloc_76 = memref.alloc() {alignment = 16 : i64} : memref<1008x64x512xf32>
    affine.for %arg1 = 0 to 1008 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 512 {
          %14 = affine.load %alloc_75[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
          %15 = affine.load %2[%arg3] : memref<512xf32>
          %16 = arith.addf %14, %15 : f32
          affine.store %16, %alloc_76[%arg1, %arg2, %arg3] : memref<1008x64x512xf32>
        }
      }
    }
    return %alloc_76 : memref<1008x64x512xf32>
  }
  "krnl.entry_point"() {func = @main_graph, numInputs = 1 : i32, numOutputs = 1 : i32, signature = "[    { \22type\22 : \22f32\22 , \22dims\22 : [1008 , 64 , 512] , \22name\22 : \22series\22 }\0A\0A]\00@[   { \22type\22 : \22f32\22 , \22dims\22 : [1008 , 64 , 512] , \22name\22 : \22prediction\22 }\0A\0A]\00"} : () -> ()
}
