module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
  func.func @main_graph(%arg0: tensor<1008x64x512xf32>) -> tensor<1008x64x512xf32> attributes {input_names = ["series"], output_names = ["prediction"]} {
    %0 = onnx.Constant dense<0.000000e+00> : tensor<1536xf32>
    %1 = onnx.Constant dense_resource<__elided__> : tensor<512x512xf32>
    %2 = onnx.Constant dense<0.000000e+00> : tensor<512xf32>
    %3 = onnx.Constant dense_resource<__elided__> : tensor<2048xf32>
    %4 = onnx.Constant dense<1.000000e+00> : tensor<512xf32>
    %5 = onnx.Constant dense_resource<__elided__> : tensor<512x1536xf32>
    %6 = onnx.Constant dense_resource<__elided__> : tensor<512x2048xf32>
    %7 = onnx.Constant dense_resource<__elided__> : tensor<2048x512xf32>
    %8 = "onnx.MatMul"(%arg0, %5) {onnx_node_name = "/self_attn/MatMul"} : (tensor<1008x64x512xf32>, tensor<512x1536xf32>) -> tensor<1008x64x1536xf32>
    %9 = "onnx.Add"(%8, %0) : (tensor<1008x64x1536xf32>, tensor<1536xf32>) -> tensor<1008x64x1536xf32>
    %10 = onnx.Constant dense<-1> : tensor<1xi64>
    %11 = onnx.Constant dense<0> : tensor<1xi64>
    %12 = onnx.Constant dense<512> : tensor<1xi64>
    %13 = onnx.Constant dense<1> : tensor<1xi64>
    %14 = "onnx.Slice"(%9, %11, %12, %10, %13) {onnx_node_name = "/self_attn/Slice"} : (tensor<1008x64x1536xf32>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<1008x64x512xf32>
    %15 = onnx.Constant dense<1024> : tensor<1xi64>
    %16 = onnx.Constant dense<1> : tensor<1xi64>
    %17 = "onnx.Slice"(%9, %12, %15, %10, %16) {onnx_node_name = "/self_attn/Slice_1"} : (tensor<1008x64x1536xf32>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<1008x64x512xf32>
    %18 = onnx.Constant dense<1536> : tensor<1xi64>
    %19 = onnx.Constant dense<1> : tensor<1xi64>
    %20 = "onnx.Slice"(%9, %15, %18, %10, %19) {onnx_node_name = "/self_attn/Slice_2"} : (tensor<1008x64x1536xf32>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>, tensor<1xi64>) -> tensor<1008x64x512xf32>
    %21 = onnx.Constant dense<[1008, 128, 256]> : tensor<3xi64>
    %22 = "onnx.Reshape"(%14, %21) {allowzero = 0 : si64, onnx_node_name = "/self_attn/Reshape"} : (tensor<1008x64x512xf32>, tensor<3xi64>) -> tensor<1008x128x256xf32>
    %23 = "onnx.Transpose"(%22) {onnx_node_name = "/self_attn/Transpose", perm = [1, 0, 2]} : (tensor<1008x128x256xf32>) -> tensor<128x1008x256xf32>
    %24 = onnx.Constant dense<[1008, 128, 256]> : tensor<3xi64>
    %25 = "onnx.Reshape"(%17, %24) {allowzero = 0 : si64, onnx_node_name = "/self_attn/Reshape_1"} : (tensor<1008x64x512xf32>, tensor<3xi64>) -> tensor<1008x128x256xf32>
    %26 = onnx.Constant dense<[1008, 128, 256]> : tensor<3xi64>
    %27 = "onnx.Reshape"(%20, %26) {allowzero = 0 : si64, onnx_node_name = "/self_attn/Reshape_2"} : (tensor<1008x64x512xf32>, tensor<3xi64>) -> tensor<1008x128x256xf32>
    %28 = "onnx.Transpose"(%27) {onnx_node_name = "/self_attn/Transpose_1", perm = [1, 0, 2]} : (tensor<1008x128x256xf32>) -> tensor<128x1008x256xf32>
    %29 = onnx.Constant dense<1.600000e+01> : tensor<f32>
    %30 = "onnx.Div"(%23, %29) {onnx_node_name = "/self_attn/Div_1"} : (tensor<128x1008x256xf32>, tensor<f32>) -> tensor<128x1008x256xf32>
    %31 = "onnx.Transpose"(%25) {onnx_node_name = "/self_attn/Transpose_2", perm = [1, 2, 0]} : (tensor<1008x128x256xf32>) -> tensor<128x256x1008xf32>
    %32 = "onnx.MatMul"(%30, %31) {onnx_node_name = "/self_attn/MatMul_1"} : (tensor<128x1008x256xf32>, tensor<128x256x1008xf32>) -> tensor<128x1008x1008xf32>
    %33 = "onnx.Softmax"(%32) {axis = -1 : si64, onnx_node_name = "/self_attn/Softmax"} : (tensor<128x1008x1008xf32>) -> tensor<128x1008x1008xf32>
    %34 = "onnx.MatMul"(%33, %28) {onnx_node_name = "/self_attn/MatMul_2"} : (tensor<128x1008x1008xf32>, tensor<128x1008x256xf32>) -> tensor<128x1008x256xf32>
    %35 = "onnx.Transpose"(%34) {onnx_node_name = "/self_attn/Transpose_3", perm = [1, 0, 2]} : (tensor<128x1008x256xf32>) -> tensor<1008x128x256xf32>
    %36 = onnx.Constant dense<[64512, 512]> : tensor<2xi64>
    %37 = "onnx.Reshape"(%35, %36) {allowzero = 0 : si64, onnx_node_name = "/self_attn/Reshape_3"} : (tensor<1008x128x256xf32>, tensor<2xi64>) -> tensor<64512x512xf32>
    %38 = "onnx.Gemm"(%37, %1, %2) {alpha = 1.000000e+00 : f32, beta = 1.000000e+00 : f32, onnx_node_name = "/self_attn/Gemm", transA = 0 : si64, transB = 1 : si64} : (tensor<64512x512xf32>, tensor<512x512xf32>, tensor<512xf32>) -> tensor<64512x512xf32>
    %39 = onnx.Constant dense<[1008, 64, 512]> : tensor<3xi64>
    %40 = "onnx.Reshape"(%38, %39) {allowzero = 0 : si64, onnx_node_name = "/self_attn/Reshape_4"} : (tensor<64512x512xf32>, tensor<3xi64>) -> tensor<1008x64x512xf32>
    %41 = "onnx.Add"(%arg0, %40) {onnx_node_name = "/Add"} : (tensor<1008x64x512xf32>, tensor<1008x64x512xf32>) -> tensor<1008x64x512xf32>
    %42 = "onnx.ReduceMean"(%41) {axes = [-1], keepdims = 1 : si64, onnx_node_name = "/norm1/ReduceMean"} : (tensor<1008x64x512xf32>) -> tensor<1008x64x1xf32>
    %43 = "onnx.Sub"(%41, %42) {onnx_node_name = "/norm1/Sub"} : (tensor<1008x64x512xf32>, tensor<1008x64x1xf32>) -> tensor<1008x64x512xf32>
    %44 = onnx.Constant dense<2.000000e+00> : tensor<f32>
    %45 = "onnx.Pow"(%43, %44) {onnx_node_name = "/norm1/Pow"} : (tensor<1008x64x512xf32>, tensor<f32>) -> tensor<1008x64x512xf32>
    %46 = "onnx.ReduceMean"(%45) {axes = [-1], keepdims = 1 : si64, onnx_node_name = "/norm1/ReduceMean_1"} : (tensor<1008x64x512xf32>) -> tensor<1008x64x1xf32>
    %47 = onnx.Constant dense<9.99999974E-6> : tensor<f32>
    %48 = "onnx.Add"(%46, %47) {onnx_node_name = "/norm1/Add"} : (tensor<1008x64x1xf32>, tensor<f32>) -> tensor<1008x64x1xf32>
    %49 = "onnx.Sqrt"(%48) {onnx_node_name = "/norm1/Sqrt"} : (tensor<1008x64x1xf32>) -> tensor<1008x64x1xf32>
    %50 = "onnx.Div"(%43, %49) {onnx_node_name = "/norm1/Div"} : (tensor<1008x64x512xf32>, tensor<1008x64x1xf32>) -> tensor<1008x64x512xf32>
    %51 = "onnx.Mul"(%50, %4) {onnx_node_name = "/norm1/Mul"} : (tensor<1008x64x512xf32>, tensor<512xf32>) -> tensor<1008x64x512xf32>
    %52 = "onnx.Add"(%51, %2) {onnx_node_name = "/norm1/Add_1"} : (tensor<1008x64x512xf32>, tensor<512xf32>) -> tensor<1008x64x512xf32>
    %53 = "onnx.MatMul"(%52, %6) {onnx_node_name = "/linear1/MatMul"} : (tensor<1008x64x512xf32>, tensor<512x2048xf32>) -> tensor<1008x64x2048xf32>
    %54 = "onnx.Add"(%53, %3) : (tensor<1008x64x2048xf32>, tensor<2048xf32>) -> tensor<1008x64x2048xf32>
    %55 = "onnx.Relu"(%54) {onnx_node_name = "/Relu"} : (tensor<1008x64x2048xf32>) -> tensor<1008x64x2048xf32>
    %56 = "onnx.MatMul"(%55, %7) {onnx_node_name = "/linear2/MatMul"} : (tensor<1008x64x2048xf32>, tensor<2048x512xf32>) -> tensor<1008x64x512xf32>
    %57 = "onnx.Add"(%51, %56) : (tensor<1008x64x512xf32>, tensor<1008x64x512xf32>) -> tensor<1008x64x512xf32>
    %58 = onnx.Constant dense_resource<__elided__> : tensor<512xf32>
    %59 = "onnx.Add"(%57, %58) : (tensor<1008x64x512xf32>, tensor<512xf32>) -> tensor<1008x64x512xf32>
    %60 = "onnx.ReduceMean"(%59) {axes = [-1], keepdims = 1 : si64, onnx_node_name = "/norm2/ReduceMean"} : (tensor<1008x64x512xf32>) -> tensor<1008x64x1xf32>
    %61 = "onnx.Sub"(%59, %60) {onnx_node_name = "/norm2/Sub"} : (tensor<1008x64x512xf32>, tensor<1008x64x1xf32>) -> tensor<1008x64x512xf32>
    %62 = onnx.Constant dense<2.000000e+00> : tensor<f32>
    %63 = "onnx.Pow"(%61, %62) {onnx_node_name = "/norm2/Pow"} : (tensor<1008x64x512xf32>, tensor<f32>) -> tensor<1008x64x512xf32>
    %64 = "onnx.ReduceMean"(%63) {axes = [-1], keepdims = 1 : si64, onnx_node_name = "/norm2/ReduceMean_1"} : (tensor<1008x64x512xf32>) -> tensor<1008x64x1xf32>
    %65 = onnx.Constant dense<9.99999974E-6> : tensor<f32>
    %66 = "onnx.Add"(%64, %65) {onnx_node_name = "/norm2/Add"} : (tensor<1008x64x1xf32>, tensor<f32>) -> tensor<1008x64x1xf32>
    %67 = "onnx.Sqrt"(%66) {onnx_node_name = "/norm2/Sqrt"} : (tensor<1008x64x1xf32>) -> tensor<1008x64x1xf32>
    %68 = "onnx.Div"(%61, %67) {onnx_node_name = "/norm2/Div"} : (tensor<1008x64x512xf32>, tensor<1008x64x1xf32>) -> tensor<1008x64x512xf32>
    %69 = "onnx.Mul"(%68, %4) {onnx_node_name = "/norm2/Mul"} : (tensor<1008x64x512xf32>, tensor<512xf32>) -> tensor<1008x64x512xf32>
    %70 = "onnx.Add"(%69, %2) {onnx_node_name = "/norm2/Add_1"} : (tensor<1008x64x512xf32>, tensor<512xf32>) -> tensor<1008x64x512xf32>
    return %70 : tensor<1008x64x512xf32>
  }
  "onnx.EntryPoint"() {func = @main_graph} : () -> ()
}
