#map = affine_map<(d0, d1) -> (d1 + d0)>
#map1 = affine_map<(d0, d1, d2, d3) -> (d3 + d2)>
#map2 = affine_map<(d0) -> (d0)>
#map3 = affine_map<(d0) -> (d0 + 64)>
#map4 = affine_map<(d0) -> (d0 + 32)>
#map5 = affine_map<(d0, d1) -> (d1 - d0)>
#map6 = affine_map<(d0, d1, d2, d3, d4) -> (d4 - d3)>
#map7 = affine_map<(d0) -> (d0 + 1)>
#map8 = affine_map<(d0) -> (d0 + 2)>
#map9 = affine_map<(d0) -> (d0 + 3)>
#set = affine_set<(d0, d1, d2, d3, d4) : (1 >= 0, 1 >= 0, 1 >= 0)>
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
  func.func @main_graph(%arg0: memref<64512x512xf32>) -> memref<64512x2048xf32> attributes {input_names = ["x"], llvm.emit_c_interface, output_names = ["y"]} {
    %c0 = arith.constant 0 : index
    %c0_0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %c2048 = arith.constant 2048 : index
    %c512 = arith.constant 512 : index
    %c64512 = arith.constant 64512 : index
    %0 = "krnl.global"() {name = "constant_0", shape = [2048, 512], value = dense_resource<__elided__> : tensor<2048x512xf32>} : () -> memref<2048x512xf32>
    %1 = "krnl.global"() {name = "constant_1", shape = [2048], value = dense_resource<__elided__> : tensor<2048xf32>} : () -> memref<2048xf32>
    %alloc = memref.alloc() {alignment = 128 : i64} : memref<64512x2048xf32>
    %c64512_1 = arith.constant 64512 : index
    %c2048_2 = arith.constant 2048 : index
    %c0_3 = arith.constant 0 : index
    affine.for %arg1 = 0 to 64512 {
      affine.for %arg2 = 0 to 2048 {
        affine.store %cst, %alloc[%arg1, %arg2] : memref<64512x2048xf32>
      }
    }
    %alloc_4 = memref.alloc() {alignment = 128 : i64} : memref<32x256xf32>
    %alloc_5 = memref.alloc() {alignment = 128 : i64} : memref<256x64xf32>
    affine.for %arg1 = 0 to 2048 step 64 {
      affine.for %arg2 = 0 to 512 step 256 {
        %c256 = arith.constant 256 : index
        %c64 = arith.constant 64 : index
        %c2048_6 = arith.constant 2048 : index
        %c512_7 = arith.constant 512 : index
        %c1 = arith.constant 1 : index
        %c1_8 = arith.constant 1 : index
        %c0_9 = arith.constant 0 : index
        affine.for %arg3 = 0 to 256 {
          affine.for %arg4 = 0 to 64 {
            %2 = affine.apply #map(%arg1, %arg4)
            %3 = affine.apply #map1(%arg1, %arg4, %arg2, %arg3)
            %4 = affine.load %0[%2, %3] : memref<2048x512xf32>
            affine.store %4, %alloc_5[%arg3, %arg4] : memref<256x64xf32>
          }
        }
        affine.for %arg3 = 0 to 64512 step 32 {
          %c32 = arith.constant 32 : index
          %c256_10 = arith.constant 256 : index
          %c64512_11 = arith.constant 64512 : index
          %c512_12 = arith.constant 512 : index
          %c1_13 = arith.constant 1 : index
          %c1_14 = arith.constant 1 : index
          %c0_15 = arith.constant 0 : index
          affine.for %arg4 = 0 to 32 {
            affine.for %arg5 = 0 to 256 {
              %2 = affine.apply #map(%arg3, %arg4)
              %3 = affine.apply #map1(%arg3, %arg4, %arg2, %arg5)
              %4 = affine.load %arg0[%2, %3] : memref<64512x512xf32>
              affine.store %4, %alloc_4[%arg4, %arg5] : memref<32x256xf32>
            }
          }
          affine.for %arg4 = #map2(%arg1) to #map3(%arg1) step 16 {
            affine.for %arg5 = #map2(%arg3) to #map4(%arg3) step 4 {
              %c32_16 = arith.constant 32 : index
              %c256_17 = arith.constant 256 : index
              %c256_18 = arith.constant 256 : index
              %c64_19 = arith.constant 64 : index
              %c64512_20 = arith.constant 64512 : index
              %c2048_21 = arith.constant 2048 : index
              %c4 = arith.constant 4 : index
              %c16 = arith.constant 16 : index
              %c256_22 = arith.constant 256 : index
              %c64512_23 = arith.constant 64512 : index
              %c2048_24 = arith.constant 2048 : index
              %c512_25 = arith.constant 512 : index
              %c1_26 = arith.constant 1 : index
              %2 = affine.apply #map5(%arg3, %arg5)
              %c0_27 = arith.constant 0 : index
              %c0_28 = arith.constant 0 : index
              %3 = affine.apply #map6(%arg3, %arg5, %arg2, %arg1, %arg4)
              %c0_29 = arith.constant 0 : index
              %c0_30 = arith.constant 0 : index
              %c1_31 = arith.constant 1 : index
              %c1_32 = arith.constant 1 : index
              %c1_33 = arith.constant 1 : index
              %c0_34 = arith.constant 0 : index
              affine.if #set(%arg3, %arg5, %arg2, %arg1, %arg4) {
                %alloca = memref.alloca() {alignment = 64 : i64} : memref<4xvector<16xf32>>
                %c0_35 = arith.constant 0 : index
                %c0_36 = arith.constant 0 : index
                %4 = arith.addi %c0, %arg5 : index
                %5 = arith.addi %c0_36, %arg4 : index
                %6 = vector.load %alloc[%4, %5] : memref<64512x2048xf32>, vector<16xf32>
                affine.store %6, %alloca[%c0] : memref<4xvector<16xf32>>
                %7 = affine.apply #map7(%c0)
                %8 = arith.addi %7, %arg5 : index
                %9 = arith.addi %c0_36, %arg4 : index
                %10 = vector.load %alloc[%8, %9] : memref<64512x2048xf32>, vector<16xf32>
                affine.store %10, %alloca[%7] : memref<4xvector<16xf32>>
                %11 = affine.apply #map8(%c0)
                %12 = arith.addi %11, %arg5 : index
                %13 = arith.addi %c0_36, %arg4 : index
                %14 = vector.load %alloc[%12, %13] : memref<64512x2048xf32>, vector<16xf32>
                affine.store %14, %alloca[%11] : memref<4xvector<16xf32>>
                %15 = affine.apply #map9(%c0)
                %16 = arith.addi %15, %arg5 : index
                %17 = arith.addi %c0_36, %arg4 : index
                %18 = vector.load %alloc[%16, %17] : memref<64512x2048xf32>, vector<16xf32>
                affine.store %18, %alloca[%15] : memref<4xvector<16xf32>>
                affine.for %arg6 = 0 to 256 step 4 {
                  %34 = arith.addi %c0, %2 : index
                  %35 = arith.addi %arg6, %c0_27 : index
                  %36 = memref.load %alloc_4[%34, %35] : memref<32x256xf32>
                  %37 = vector.broadcast %36 : f32 to vector<16xf32>
                  %38 = arith.addi %arg6, %c0_28 : index
                  %39 = arith.addi %c0_36, %3 : index
                  %40 = vector.load %alloc_5[%38, %39] : memref<256x64xf32>, vector<16xf32>
                  %41 = affine.load %alloca[%c0] : memref<4xvector<16xf32>>
                  %42 = vector.fma %37, %40, %41 : vector<16xf32>
                  affine.store %42, %alloca[%c0] : memref<4xvector<16xf32>>
                  %43 = affine.apply #map7(%arg6)
                  %44 = arith.addi %c0, %2 : index
                  %45 = arith.addi %43, %c0_27 : index
                  %46 = memref.load %alloc_4[%44, %45] : memref<32x256xf32>
                  %47 = vector.broadcast %46 : f32 to vector<16xf32>
                  %48 = arith.addi %43, %c0_28 : index
                  %49 = arith.addi %c0_36, %3 : index
                  %50 = vector.load %alloc_5[%48, %49] : memref<256x64xf32>, vector<16xf32>
                  %51 = affine.load %alloca[%c0] : memref<4xvector<16xf32>>
                  %52 = vector.fma %47, %50, %51 : vector<16xf32>
                  affine.store %52, %alloca[%c0] : memref<4xvector<16xf32>>
                  %53 = affine.apply #map8(%arg6)
                  %54 = arith.addi %c0, %2 : index
                  %55 = arith.addi %53, %c0_27 : index
                  %56 = memref.load %alloc_4[%54, %55] : memref<32x256xf32>
                  %57 = vector.broadcast %56 : f32 to vector<16xf32>
                  %58 = arith.addi %53, %c0_28 : index
                  %59 = arith.addi %c0_36, %3 : index
                  %60 = vector.load %alloc_5[%58, %59] : memref<256x64xf32>, vector<16xf32>
                  %61 = affine.load %alloca[%c0] : memref<4xvector<16xf32>>
                  %62 = vector.fma %57, %60, %61 : vector<16xf32>
                  affine.store %62, %alloca[%c0] : memref<4xvector<16xf32>>
                  %63 = affine.apply #map9(%arg6)
                  %64 = arith.addi %c0, %2 : index
                  %65 = arith.addi %63, %c0_27 : index
                  %66 = memref.load %alloc_4[%64, %65] : memref<32x256xf32>
                  %67 = vector.broadcast %66 : f32 to vector<16xf32>
                  %68 = arith.addi %63, %c0_28 : index
                  %69 = arith.addi %c0_36, %3 : index
                  %70 = vector.load %alloc_5[%68, %69] : memref<256x64xf32>, vector<16xf32>
                  %71 = affine.load %alloca[%c0] : memref<4xvector<16xf32>>
                  %72 = vector.fma %67, %70, %71 : vector<16xf32>
                  affine.store %72, %alloca[%c0] : memref<4xvector<16xf32>>
                  %73 = affine.apply #map7(%c0)
                  %74 = arith.addi %73, %2 : index
                  %75 = arith.addi %arg6, %c0_27 : index
                  %76 = memref.load %alloc_4[%74, %75] : memref<32x256xf32>
                  %77 = vector.broadcast %76 : f32 to vector<16xf32>
                  %78 = arith.addi %arg6, %c0_28 : index
                  %79 = arith.addi %c0_36, %3 : index
                  %80 = vector.load %alloc_5[%78, %79] : memref<256x64xf32>, vector<16xf32>
                  %81 = affine.load %alloca[%73] : memref<4xvector<16xf32>>
                  %82 = vector.fma %77, %80, %81 : vector<16xf32>
                  affine.store %82, %alloca[%73] : memref<4xvector<16xf32>>
                  %83 = affine.apply #map7(%arg6)
                  %84 = arith.addi %73, %2 : index
                  %85 = arith.addi %83, %c0_27 : index
                  %86 = memref.load %alloc_4[%84, %85] : memref<32x256xf32>
                  %87 = vector.broadcast %86 : f32 to vector<16xf32>
                  %88 = arith.addi %83, %c0_28 : index
                  %89 = arith.addi %c0_36, %3 : index
                  %90 = vector.load %alloc_5[%88, %89] : memref<256x64xf32>, vector<16xf32>
                  %91 = affine.load %alloca[%73] : memref<4xvector<16xf32>>
                  %92 = vector.fma %87, %90, %91 : vector<16xf32>
                  affine.store %92, %alloca[%73] : memref<4xvector<16xf32>>
                  %93 = affine.apply #map8(%arg6)
                  %94 = arith.addi %73, %2 : index
                  %95 = arith.addi %93, %c0_27 : index
                  %96 = memref.load %alloc_4[%94, %95] : memref<32x256xf32>
                  %97 = vector.broadcast %96 : f32 to vector<16xf32>
                  %98 = arith.addi %93, %c0_28 : index
                  %99 = arith.addi %c0_36, %3 : index
                  %100 = vector.load %alloc_5[%98, %99] : memref<256x64xf32>, vector<16xf32>
                  %101 = affine.load %alloca[%73] : memref<4xvector<16xf32>>
                  %102 = vector.fma %97, %100, %101 : vector<16xf32>
                  affine.store %102, %alloca[%73] : memref<4xvector<16xf32>>
                  %103 = affine.apply #map9(%arg6)
                  %104 = arith.addi %73, %2 : index
                  %105 = arith.addi %103, %c0_27 : index
                  %106 = memref.load %alloc_4[%104, %105] : memref<32x256xf32>
                  %107 = vector.broadcast %106 : f32 to vector<16xf32>
                  %108 = arith.addi %103, %c0_28 : index
                  %109 = arith.addi %c0_36, %3 : index
                  %110 = vector.load %alloc_5[%108, %109] : memref<256x64xf32>, vector<16xf32>
                  %111 = affine.load %alloca[%73] : memref<4xvector<16xf32>>
                  %112 = vector.fma %107, %110, %111 : vector<16xf32>
                  affine.store %112, %alloca[%73] : memref<4xvector<16xf32>>
                  %113 = affine.apply #map8(%c0)
                  %114 = arith.addi %113, %2 : index
                  %115 = arith.addi %arg6, %c0_27 : index
                  %116 = memref.load %alloc_4[%114, %115] : memref<32x256xf32>
                  %117 = vector.broadcast %116 : f32 to vector<16xf32>
                  %118 = arith.addi %arg6, %c0_28 : index
                  %119 = arith.addi %c0_36, %3 : index
                  %120 = vector.load %alloc_5[%118, %119] : memref<256x64xf32>, vector<16xf32>
                  %121 = affine.load %alloca[%113] : memref<4xvector<16xf32>>
                  %122 = vector.fma %117, %120, %121 : vector<16xf32>
                  affine.store %122, %alloca[%113] : memref<4xvector<16xf32>>
                  %123 = affine.apply #map7(%arg6)
                  %124 = arith.addi %113, %2 : index
                  %125 = arith.addi %123, %c0_27 : index
                  %126 = memref.load %alloc_4[%124, %125] : memref<32x256xf32>
                  %127 = vector.broadcast %126 : f32 to vector<16xf32>
                  %128 = arith.addi %123, %c0_28 : index
                  %129 = arith.addi %c0_36, %3 : index
                  %130 = vector.load %alloc_5[%128, %129] : memref<256x64xf32>, vector<16xf32>
                  %131 = affine.load %alloca[%113] : memref<4xvector<16xf32>>
                  %132 = vector.fma %127, %130, %131 : vector<16xf32>
                  affine.store %132, %alloca[%113] : memref<4xvector<16xf32>>
                  %133 = affine.apply #map8(%arg6)
                  %134 = arith.addi %113, %2 : index
                  %135 = arith.addi %133, %c0_27 : index
                  %136 = memref.load %alloc_4[%134, %135] : memref<32x256xf32>
                  %137 = vector.broadcast %136 : f32 to vector<16xf32>
                  %138 = arith.addi %133, %c0_28 : index
                  %139 = arith.addi %c0_36, %3 : index
                  %140 = vector.load %alloc_5[%138, %139] : memref<256x64xf32>, vector<16xf32>
                  %141 = affine.load %alloca[%113] : memref<4xvector<16xf32>>
                  %142 = vector.fma %137, %140, %141 : vector<16xf32>
                  affine.store %142, %alloca[%113] : memref<4xvector<16xf32>>
                  %143 = affine.apply #map9(%arg6)
                  %144 = arith.addi %113, %2 : index
                  %145 = arith.addi %143, %c0_27 : index
                  %146 = memref.load %alloc_4[%144, %145] : memref<32x256xf32>
                  %147 = vector.broadcast %146 : f32 to vector<16xf32>
                  %148 = arith.addi %143, %c0_28 : index
                  %149 = arith.addi %c0_36, %3 : index
                  %150 = vector.load %alloc_5[%148, %149] : memref<256x64xf32>, vector<16xf32>
                  %151 = affine.load %alloca[%113] : memref<4xvector<16xf32>>
                  %152 = vector.fma %147, %150, %151 : vector<16xf32>
                  affine.store %152, %alloca[%113] : memref<4xvector<16xf32>>
                  %153 = affine.apply #map9(%c0)
                  %154 = arith.addi %153, %2 : index
                  %155 = arith.addi %arg6, %c0_27 : index
                  %156 = memref.load %alloc_4[%154, %155] : memref<32x256xf32>
                  %157 = vector.broadcast %156 : f32 to vector<16xf32>
                  %158 = arith.addi %arg6, %c0_28 : index
                  %159 = arith.addi %c0_36, %3 : index
                  %160 = vector.load %alloc_5[%158, %159] : memref<256x64xf32>, vector<16xf32>
                  %161 = affine.load %alloca[%153] : memref<4xvector<16xf32>>
                  %162 = vector.fma %157, %160, %161 : vector<16xf32>
                  affine.store %162, %alloca[%153] : memref<4xvector<16xf32>>
                  %163 = affine.apply #map7(%arg6)
                  %164 = arith.addi %153, %2 : index
                  %165 = arith.addi %163, %c0_27 : index
                  %166 = memref.load %alloc_4[%164, %165] : memref<32x256xf32>
                  %167 = vector.broadcast %166 : f32 to vector<16xf32>
                  %168 = arith.addi %163, %c0_28 : index
                  %169 = arith.addi %c0_36, %3 : index
                  %170 = vector.load %alloc_5[%168, %169] : memref<256x64xf32>, vector<16xf32>
                  %171 = affine.load %alloca[%153] : memref<4xvector<16xf32>>
                  %172 = vector.fma %167, %170, %171 : vector<16xf32>
                  affine.store %172, %alloca[%153] : memref<4xvector<16xf32>>
                  %173 = affine.apply #map8(%arg6)
                  %174 = arith.addi %153, %2 : index
                  %175 = arith.addi %173, %c0_27 : index
                  %176 = memref.load %alloc_4[%174, %175] : memref<32x256xf32>
                  %177 = vector.broadcast %176 : f32 to vector<16xf32>
                  %178 = arith.addi %173, %c0_28 : index
                  %179 = arith.addi %c0_36, %3 : index
                  %180 = vector.load %alloc_5[%178, %179] : memref<256x64xf32>, vector<16xf32>
                  %181 = affine.load %alloca[%153] : memref<4xvector<16xf32>>
                  %182 = vector.fma %177, %180, %181 : vector<16xf32>
                  affine.store %182, %alloca[%153] : memref<4xvector<16xf32>>
                  %183 = affine.apply #map9(%arg6)
                  %184 = arith.addi %153, %2 : index
                  %185 = arith.addi %183, %c0_27 : index
                  %186 = memref.load %alloc_4[%184, %185] : memref<32x256xf32>
                  %187 = vector.broadcast %186 : f32 to vector<16xf32>
                  %188 = arith.addi %183, %c0_28 : index
                  %189 = arith.addi %c0_36, %3 : index
                  %190 = vector.load %alloc_5[%188, %189] : memref<256x64xf32>, vector<16xf32>
                  %191 = affine.load %alloca[%153] : memref<4xvector<16xf32>>
                  %192 = vector.fma %187, %190, %191 : vector<16xf32>
                  affine.store %192, %alloca[%153] : memref<4xvector<16xf32>>
                }
                %19 = affine.load %alloca[%c0] : memref<4xvector<16xf32>>
                %20 = arith.addi %c0, %arg5 : index
                %21 = arith.addi %c0_36, %arg4 : index
                vector.store %19, %alloc[%20, %21] : memref<64512x2048xf32>, vector<16xf32>
                %22 = affine.apply #map7(%c0)
                %23 = affine.load %alloca[%22] : memref<4xvector<16xf32>>
                %24 = arith.addi %22, %arg5 : index
                %25 = arith.addi %c0_36, %arg4 : index
                vector.store %23, %alloc[%24, %25] : memref<64512x2048xf32>, vector<16xf32>
                %26 = affine.apply #map8(%c0)
                %27 = affine.load %alloca[%26] : memref<4xvector<16xf32>>
                %28 = arith.addi %26, %arg5 : index
                %29 = arith.addi %c0_36, %arg4 : index
                vector.store %27, %alloc[%28, %29] : memref<64512x2048xf32>, vector<16xf32>
                %30 = affine.apply #map9(%c0)
                %31 = affine.load %alloca[%30] : memref<4xvector<16xf32>>
                %32 = arith.addi %30, %arg5 : index
                %33 = arith.addi %c0_36, %arg4 : index
                vector.store %31, %alloc[%32, %33] : memref<64512x2048xf32>, vector<16xf32>
              } else {
              }
            }
          }
        }
      }
    }
    affine.for %arg1 = 0 to 64512 {
      affine.for %arg2 = 0 to 2048 {
        %2 = affine.load %alloc[%arg1, %arg2] : memref<64512x2048xf32>
        %3 = affine.load %1[%arg2] : memref<2048xf32>
        %4 = arith.addf %2, %3 : f32
        affine.store %4, %alloc[%arg1, %arg2] : memref<64512x2048xf32>
      }
    }
    return %alloc : memref<64512x2048xf32>
  }
  "krnl.entry_point"() {func = @main_graph, numInputs = 1 : i32, numOutputs = 1 : i32, signature = "[    { \22type\22 : \22f32\22 , \22dims\22 : [64512 , 512] , \22name\22 : \22x\22 }\0A\0A]\00@[   { \22type\22 : \22f32\22 , \22dims\22 : [64512 , 2048] , \22name\22 : \22y\22 }\0A\0A]\00"} : () -> ()
}
