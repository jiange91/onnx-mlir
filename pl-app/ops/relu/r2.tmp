module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
  func.func @main_graph(%arg0: memref<10000x64x24x24xf32>) -> memref<10000x64x24x24xf32> attributes {input_names = ["image"], llvm.emit_c_interface, output_names = ["prediction"]} {
    %cst = arith.constant 0.000000e+00 : f32
    %alloc = memref.alloc() {alignment = 16 : i64} : memref<10000x64x24x24xf32>
    affine.for %arg1 = 0 to 10000 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 24 {
          affine.for %arg4 = 0 to 24 {
            %0 = affine.load %arg0[%arg1, %arg2, %arg3, %arg4] : memref<10000x64x24x24xf32>
            %1 = arith.cmpf oge, %0, %cst : f32
            %2 = arith.select %1, %0, %cst : f32
            affine.store %2, %alloc[%arg1, %arg2, %arg3, %arg4] : memref<10000x64x24x24xf32>
          }
        }
      }
    }
    return %alloc : memref<10000x64x24x24xf32>
  }
  "krnl.entry_point"() {func = @main_graph, numInputs = 1 : i32, numOutputs = 1 : i32, signature = "[    { \22type\22 : \22f32\22 , \22dims\22 : [10000 , 64 , 24 , 24] , \22name\22 : \22image\22 }\0A\0A]\00@[   { \22type\22 : \22f32\22 , \22dims\22 : [10000 , 64 , 24 , 24] , \22name\22 : \22prediction\22 }\0A\0A]\00"} : () -> ()
}
