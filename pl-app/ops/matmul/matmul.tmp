#map = affine_map<(d0) -> (-d0 + 249)>
#map1 = affine_map<(d0) -> (-d0 + 257)>
#map2 = affine_map<(d0) -> (-d0 + 257, 8)>
#map3 = affine_map<(d0) -> (d0 + 1)>
#map4 = affine_map<(d0) -> (d0 + 2)>
#map5 = affine_map<(d0) -> (d0 + 3)>
#map6 = affine_map<(d0) -> (d0 + 4)>
#map7 = affine_map<(d0) -> (d0 + 5)>
#map8 = affine_map<(d0) -> (d0 + 6)>
#map9 = affine_map<(d0) -> (d0 + 7)>
#set = affine_set<(d0) : (1 >= 0, 1 >= 0, -d0 + 249 >= 0)>
#set1 = affine_set<(d0) : (1 >= 0)>
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
  func.func @main_graph(%arg0: memref<64x12x1x257xf32>, %arg1: memref<64x12x257x64xf32>) -> memref<64x12x1x64xf32> attributes {input_names = ["X1", "X2"], llvm.emit_c_interface, output_names = ["Y"]} {
    %c0 = arith.constant 0 : index
    %c0_0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %c1 = arith.constant 1 : index
    %c64 = arith.constant 64 : index
    %c12 = arith.constant 12 : index
    %c257 = arith.constant 257 : index
    %alloc = memref.alloc() {alignment = 16 : i64} : memref<64x12x1x64xf32>
    %c64_1 = arith.constant 64 : index
    %c12_2 = arith.constant 12 : index
    %c1_3 = arith.constant 1 : index
    %c64_4 = arith.constant 64 : index
    %c0_5 = arith.constant 0 : index
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 12 {
        affine.for %arg4 = 0 to 1 {
          affine.for %arg5 = 0 to 64 {
            affine.store %cst, %alloc[%arg2, %arg3, %arg4, %arg5] : memref<64x12x1x64xf32>
          }
        }
      }
    }
    affine.for %arg2 = %c0_0 to %c64 {
      affine.for %arg3 = %c0_0 to %c12 {
        affine.for %arg4 = %c0_0 to %c1 {
          affine.for %arg5 = %c0_0 to %c64 step 8 {
            affine.for %arg6 = %c0_0 to %c257 step 8 {
              %c64_6 = arith.constant 64 : index
              %c12_7 = arith.constant 12 : index
              %c1_8 = arith.constant 1 : index
              %c257_9 = arith.constant 257 : index
              %c64_10 = arith.constant 64 : index
              %c12_11 = arith.constant 12 : index
              %c257_12 = arith.constant 257 : index
              %c64_13 = arith.constant 64 : index
              %c64_14 = arith.constant 64 : index
              %c12_15 = arith.constant 12 : index
              %c1_16 = arith.constant 1 : index
              %c64_17 = arith.constant 64 : index
              %c1_18 = arith.constant 1 : index
              %c8 = arith.constant 8 : index
              %c8_19 = arith.constant 8 : index
              %c1_20 = arith.constant 1 : index
              %c64_21 = arith.constant 64 : index
              %c257_22 = arith.constant 257 : index
              %c1_23 = arith.constant 1 : index
              %c0_24 = arith.constant 0 : index
              %c0_25 = arith.constant 0 : index
              %c0_26 = arith.constant 0 : index
              %c0_27 = arith.constant 0 : index
              %c0_28 = arith.constant 0 : index
              %c0_29 = arith.constant 0 : index
              %c1_30 = arith.constant 1 : index
              %c1_31 = arith.constant 1 : index
              %c249 = arith.constant 249 : index
              %0 = affine.apply #map(%arg6)
              %1 = affine.apply #map1(%arg6)
              %2 = affine.min #map2(%arg6)
              %c0_32 = arith.constant 0 : index
              affine.if #set(%arg6) {
                %alloca = memref.alloca() {alignment = 64 : i64} : memref<1xvector<8xf32>>
                %c0_33 = arith.constant 0 : index
                %c0_34 = arith.constant 0 : index
                affine.for %arg7 = 0 to 1 {
                  %3 = arith.addi %arg7, %arg4 : index
                  %4 = arith.addi %c0_34, %arg5 : index
                  %5 = vector.load %alloc[%arg2, %arg3, %3, %4] : memref<64x12x1x64xf32>, vector<8xf32>
                  affine.store %5, %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %6 = arith.addi %arg7, %arg4 : index
                  %7 = arith.addi %c0, %arg6 : index
                  %8 = memref.load %arg0[%arg2, %arg3, %6, %7] : memref<64x12x1x257xf32>
                  %9 = vector.broadcast %8 : f32 to vector<8xf32>
                  %10 = arith.addi %c0, %arg6 : index
                  %11 = arith.addi %c0_34, %arg5 : index
                  %12 = vector.load %arg1[%arg2, %arg3, %10, %11] : memref<64x12x257x64xf32>, vector<8xf32>
                  %13 = affine.load %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %14 = vector.fma %9, %12, %13 : vector<8xf32>
                  affine.store %14, %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %15 = affine.apply #map3(%c0)
                  %16 = arith.addi %arg7, %arg4 : index
                  %17 = arith.addi %15, %arg6 : index
                  %18 = memref.load %arg0[%arg2, %arg3, %16, %17] : memref<64x12x1x257xf32>
                  %19 = vector.broadcast %18 : f32 to vector<8xf32>
                  %20 = arith.addi %15, %arg6 : index
                  %21 = arith.addi %c0_34, %arg5 : index
                  %22 = vector.load %arg1[%arg2, %arg3, %20, %21] : memref<64x12x257x64xf32>, vector<8xf32>
                  %23 = affine.load %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %24 = vector.fma %19, %22, %23 : vector<8xf32>
                  affine.store %24, %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %25 = affine.apply #map4(%c0)
                  %26 = arith.addi %arg7, %arg4 : index
                  %27 = arith.addi %25, %arg6 : index
                  %28 = memref.load %arg0[%arg2, %arg3, %26, %27] : memref<64x12x1x257xf32>
                  %29 = vector.broadcast %28 : f32 to vector<8xf32>
                  %30 = arith.addi %25, %arg6 : index
                  %31 = arith.addi %c0_34, %arg5 : index
                  %32 = vector.load %arg1[%arg2, %arg3, %30, %31] : memref<64x12x257x64xf32>, vector<8xf32>
                  %33 = affine.load %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %34 = vector.fma %29, %32, %33 : vector<8xf32>
                  affine.store %34, %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %35 = affine.apply #map5(%c0)
                  %36 = arith.addi %arg7, %arg4 : index
                  %37 = arith.addi %35, %arg6 : index
                  %38 = memref.load %arg0[%arg2, %arg3, %36, %37] : memref<64x12x1x257xf32>
                  %39 = vector.broadcast %38 : f32 to vector<8xf32>
                  %40 = arith.addi %35, %arg6 : index
                  %41 = arith.addi %c0_34, %arg5 : index
                  %42 = vector.load %arg1[%arg2, %arg3, %40, %41] : memref<64x12x257x64xf32>, vector<8xf32>
                  %43 = affine.load %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %44 = vector.fma %39, %42, %43 : vector<8xf32>
                  affine.store %44, %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %45 = affine.apply #map6(%c0)
                  %46 = arith.addi %arg7, %arg4 : index
                  %47 = arith.addi %45, %arg6 : index
                  %48 = memref.load %arg0[%arg2, %arg3, %46, %47] : memref<64x12x1x257xf32>
                  %49 = vector.broadcast %48 : f32 to vector<8xf32>
                  %50 = arith.addi %45, %arg6 : index
                  %51 = arith.addi %c0_34, %arg5 : index
                  %52 = vector.load %arg1[%arg2, %arg3, %50, %51] : memref<64x12x257x64xf32>, vector<8xf32>
                  %53 = affine.load %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %54 = vector.fma %49, %52, %53 : vector<8xf32>
                  affine.store %54, %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %55 = affine.apply #map7(%c0)
                  %56 = arith.addi %arg7, %arg4 : index
                  %57 = arith.addi %55, %arg6 : index
                  %58 = memref.load %arg0[%arg2, %arg3, %56, %57] : memref<64x12x1x257xf32>
                  %59 = vector.broadcast %58 : f32 to vector<8xf32>
                  %60 = arith.addi %55, %arg6 : index
                  %61 = arith.addi %c0_34, %arg5 : index
                  %62 = vector.load %arg1[%arg2, %arg3, %60, %61] : memref<64x12x257x64xf32>, vector<8xf32>
                  %63 = affine.load %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %64 = vector.fma %59, %62, %63 : vector<8xf32>
                  affine.store %64, %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %65 = affine.apply #map8(%c0)
                  %66 = arith.addi %arg7, %arg4 : index
                  %67 = arith.addi %65, %arg6 : index
                  %68 = memref.load %arg0[%arg2, %arg3, %66, %67] : memref<64x12x1x257xf32>
                  %69 = vector.broadcast %68 : f32 to vector<8xf32>
                  %70 = arith.addi %65, %arg6 : index
                  %71 = arith.addi %c0_34, %arg5 : index
                  %72 = vector.load %arg1[%arg2, %arg3, %70, %71] : memref<64x12x257x64xf32>, vector<8xf32>
                  %73 = affine.load %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %74 = vector.fma %69, %72, %73 : vector<8xf32>
                  affine.store %74, %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %75 = affine.apply #map9(%c0)
                  %76 = arith.addi %arg7, %arg4 : index
                  %77 = arith.addi %75, %arg6 : index
                  %78 = memref.load %arg0[%arg2, %arg3, %76, %77] : memref<64x12x1x257xf32>
                  %79 = vector.broadcast %78 : f32 to vector<8xf32>
                  %80 = arith.addi %75, %arg6 : index
                  %81 = arith.addi %c0_34, %arg5 : index
                  %82 = vector.load %arg1[%arg2, %arg3, %80, %81] : memref<64x12x257x64xf32>, vector<8xf32>
                  %83 = affine.load %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %84 = vector.fma %79, %82, %83 : vector<8xf32>
                  affine.store %84, %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %85 = affine.load %alloca[%c0_33] : memref<1xvector<8xf32>>
                  %86 = arith.addi %arg7, %arg4 : index
                  %87 = arith.addi %c0_34, %arg5 : index
                  vector.store %85, %alloc[%arg2, %arg3, %86, %87] : memref<64x12x1x64xf32>, vector<8xf32>
                }
              } else {
                affine.if #set1(%arg6) {
                  %alloca = memref.alloca() {alignment = 64 : i64} : memref<1xvector<8xf32>>
                  %c0_33 = arith.constant 0 : index
                  %c0_34 = arith.constant 0 : index
                  affine.for %arg7 = 0 to 1 {
                    %3 = arith.addi %arg7, %arg4 : index
                    %4 = arith.addi %c0_34, %arg5 : index
                    %5 = vector.load %alloc[%arg2, %arg3, %3, %4] : memref<64x12x1x64xf32>, vector<8xf32>
                    affine.store %5, %alloca[%c0_33] : memref<1xvector<8xf32>>
                    affine.for %arg8 = 0 to min #map2(%arg6) {
                      %9 = arith.addi %arg7, %arg4 : index
                      %10 = arith.addi %arg8, %arg6 : index
                      %11 = memref.load %arg0[%arg2, %arg3, %9, %10] : memref<64x12x1x257xf32>
                      %12 = vector.broadcast %11 : f32 to vector<8xf32>
                      %13 = arith.addi %arg8, %arg6 : index
                      %14 = arith.addi %c0_34, %arg5 : index
                      %15 = vector.load %arg1[%arg2, %arg3, %13, %14] : memref<64x12x257x64xf32>, vector<8xf32>
                      %16 = affine.load %alloca[%c0_33] : memref<1xvector<8xf32>>
                      %17 = vector.fma %12, %15, %16 : vector<8xf32>
                      affine.store %17, %alloca[%c0_33] : memref<1xvector<8xf32>>
                    }
                    %6 = affine.load %alloca[%c0_33] : memref<1xvector<8xf32>>
                    %7 = arith.addi %arg7, %arg4 : index
                    %8 = arith.addi %c0_34, %arg5 : index
                    vector.store %6, %alloc[%arg2, %arg3, %7, %8] : memref<64x12x1x64xf32>, vector<8xf32>
                  }
                } else {
                }
              }
            }
          }
        }
      }
    }
    return %alloc : memref<64x12x1x64xf32>
  }
  "krnl.entry_point"() {func = @main_graph, numInputs = 2 : i32, numOutputs = 1 : i32, signature = "[    { \22type\22 : \22f32\22 , \22dims\22 : [64 , 12 , 1 , 257] , \22name\22 : \22X1\22 }\0A ,    { \22type\22 : \22f32\22 , \22dims\22 : [64 , 12 , 257 , 64] , \22name\22 : \22X2\22 }\0A\0A]\00@[   { \22type\22 : \22f32\22 , \22dims\22 : [64 , 12 , 1 , 64] , \22name\22 : \22Y\22 }\0A\0A]\00"} : () -> ()
}
