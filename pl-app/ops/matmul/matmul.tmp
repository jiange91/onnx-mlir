#map = affine_map<(d0) -> (d0 + 1)>
#map1 = affine_map<(d0) -> (d0 + 2)>
#map2 = affine_map<(d0) -> (d0 + 3)>
#map3 = affine_map<(d0) -> (d0 + 4)>
#map4 = affine_map<(d0) -> (d0 + 5)>
#map5 = affine_map<(d0) -> (d0 + 6)>
#map6 = affine_map<(d0) -> (d0 + 7)>
#set = affine_set<() : (1 >= 0, 1 >= 0, 1 >= 0)>
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
  func.func @main_graph(%arg0: memref<64x1x768xf32>, %arg1: memref<768x50264xf32>) -> memref<64x1x50264xf32> attributes {input_names = ["X1", "X2"], llvm.emit_c_interface, output_names = ["Y"]} {
    %c0 = arith.constant 0 : index
    %c0_0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %c1 = arith.constant 1 : index
    %c64 = arith.constant 64 : index
    %c768 = arith.constant 768 : index
    %c50264 = arith.constant 50264 : index
    %alloc = memref.alloc() {alignment = 16 : i64} : memref<64x1x50264xf32>
    %c64_1 = arith.constant 64 : index
    %c1_2 = arith.constant 1 : index
    %c50264_3 = arith.constant 50264 : index
    %c0_4 = arith.constant 0 : index
    affine.for %arg2 = 0 to 64 {
      affine.for %arg3 = 0 to 1 {
        affine.for %arg4 = 0 to 50264 {
          affine.store %cst, %alloc[%arg2, %arg3, %arg4] : memref<64x1x50264xf32>
        }
      }
    }
    affine.for %arg2 = %c0_0 to %c64 {
      affine.for %arg3 = %c0_0 to %c1 {
        affine.for %arg4 = %c0_0 to %c50264 step 8 {
          affine.for %arg5 = %c0_0 to %c768 step 8 {
            %c64_5 = arith.constant 64 : index
            %c1_6 = arith.constant 1 : index
            %c768_7 = arith.constant 768 : index
            %c768_8 = arith.constant 768 : index
            %c50264_9 = arith.constant 50264 : index
            %c64_10 = arith.constant 64 : index
            %c1_11 = arith.constant 1 : index
            %c50264_12 = arith.constant 50264 : index
            %c1_13 = arith.constant 1 : index
            %c8 = arith.constant 8 : index
            %c8_14 = arith.constant 8 : index
            %c1_15 = arith.constant 1 : index
            %c50264_16 = arith.constant 50264 : index
            %c768_17 = arith.constant 768 : index
            %c1_18 = arith.constant 1 : index
            %c0_19 = arith.constant 0 : index
            %c0_20 = arith.constant 0 : index
            %c0_21 = arith.constant 0 : index
            %c0_22 = arith.constant 0 : index
            %c0_23 = arith.constant 0 : index
            %c0_24 = arith.constant 0 : index
            %c1_25 = arith.constant 1 : index
            %c1_26 = arith.constant 1 : index
            %c1_27 = arith.constant 1 : index
            %c0_28 = arith.constant 0 : index
            affine.if #set() {
              %alloca = memref.alloca() {alignment = 64 : i64} : memref<1xvector<8xf32>>
              %c0_29 = arith.constant 0 : index
              %c0_30 = arith.constant 0 : index
              affine.for %arg6 = 0 to 1 {
                %0 = arith.addi %arg6, %arg3 : index
                %1 = arith.addi %c0_30, %arg4 : index
                %2 = vector.load %alloc[%arg2, %0, %1] : memref<64x1x50264xf32>, vector<8xf32>
                affine.store %2, %alloca[%c0_29] : memref<1xvector<8xf32>>
                %3 = arith.addi %arg6, %arg3 : index
                %4 = arith.addi %c0, %arg5 : index
                %5 = memref.load %arg0[%arg2, %3, %4] : memref<64x1x768xf32>
                %6 = vector.broadcast %5 : f32 to vector<8xf32>
                %7 = arith.addi %c0, %arg5 : index
                %8 = arith.addi %c0_30, %arg4 : index
                %9 = vector.load %arg1[%7, %8] : memref<768x50264xf32>, vector<8xf32>
                %10 = affine.load %alloca[%c0_29] : memref<1xvector<8xf32>>
                %11 = vector.fma %6, %9, %10 : vector<8xf32>
                affine.store %11, %alloca[%c0_29] : memref<1xvector<8xf32>>
                %12 = affine.apply #map(%c0)
                %13 = arith.addi %arg6, %arg3 : index
                %14 = arith.addi %12, %arg5 : index
                %15 = memref.load %arg0[%arg2, %13, %14] : memref<64x1x768xf32>
                %16 = vector.broadcast %15 : f32 to vector<8xf32>
                %17 = arith.addi %12, %arg5 : index
                %18 = arith.addi %c0_30, %arg4 : index
                %19 = vector.load %arg1[%17, %18] : memref<768x50264xf32>, vector<8xf32>
                %20 = affine.load %alloca[%c0_29] : memref<1xvector<8xf32>>
                %21 = vector.fma %16, %19, %20 : vector<8xf32>
                affine.store %21, %alloca[%c0_29] : memref<1xvector<8xf32>>
                %22 = affine.apply #map1(%c0)
                %23 = arith.addi %arg6, %arg3 : index
                %24 = arith.addi %22, %arg5 : index
                %25 = memref.load %arg0[%arg2, %23, %24] : memref<64x1x768xf32>
                %26 = vector.broadcast %25 : f32 to vector<8xf32>
                %27 = arith.addi %22, %arg5 : index
                %28 = arith.addi %c0_30, %arg4 : index
                %29 = vector.load %arg1[%27, %28] : memref<768x50264xf32>, vector<8xf32>
                %30 = affine.load %alloca[%c0_29] : memref<1xvector<8xf32>>
                %31 = vector.fma %26, %29, %30 : vector<8xf32>
                affine.store %31, %alloca[%c0_29] : memref<1xvector<8xf32>>
                %32 = affine.apply #map2(%c0)
                %33 = arith.addi %arg6, %arg3 : index
                %34 = arith.addi %32, %arg5 : index
                %35 = memref.load %arg0[%arg2, %33, %34] : memref<64x1x768xf32>
                %36 = vector.broadcast %35 : f32 to vector<8xf32>
                %37 = arith.addi %32, %arg5 : index
                %38 = arith.addi %c0_30, %arg4 : index
                %39 = vector.load %arg1[%37, %38] : memref<768x50264xf32>, vector<8xf32>
                %40 = affine.load %alloca[%c0_29] : memref<1xvector<8xf32>>
                %41 = vector.fma %36, %39, %40 : vector<8xf32>
                affine.store %41, %alloca[%c0_29] : memref<1xvector<8xf32>>
                %42 = affine.apply #map3(%c0)
                %43 = arith.addi %arg6, %arg3 : index
                %44 = arith.addi %42, %arg5 : index
                %45 = memref.load %arg0[%arg2, %43, %44] : memref<64x1x768xf32>
                %46 = vector.broadcast %45 : f32 to vector<8xf32>
                %47 = arith.addi %42, %arg5 : index
                %48 = arith.addi %c0_30, %arg4 : index
                %49 = vector.load %arg1[%47, %48] : memref<768x50264xf32>, vector<8xf32>
                %50 = affine.load %alloca[%c0_29] : memref<1xvector<8xf32>>
                %51 = vector.fma %46, %49, %50 : vector<8xf32>
                affine.store %51, %alloca[%c0_29] : memref<1xvector<8xf32>>
                %52 = affine.apply #map4(%c0)
                %53 = arith.addi %arg6, %arg3 : index
                %54 = arith.addi %52, %arg5 : index
                %55 = memref.load %arg0[%arg2, %53, %54] : memref<64x1x768xf32>
                %56 = vector.broadcast %55 : f32 to vector<8xf32>
                %57 = arith.addi %52, %arg5 : index
                %58 = arith.addi %c0_30, %arg4 : index
                %59 = vector.load %arg1[%57, %58] : memref<768x50264xf32>, vector<8xf32>
                %60 = affine.load %alloca[%c0_29] : memref<1xvector<8xf32>>
                %61 = vector.fma %56, %59, %60 : vector<8xf32>
                affine.store %61, %alloca[%c0_29] : memref<1xvector<8xf32>>
                %62 = affine.apply #map5(%c0)
                %63 = arith.addi %arg6, %arg3 : index
                %64 = arith.addi %62, %arg5 : index
                %65 = memref.load %arg0[%arg2, %63, %64] : memref<64x1x768xf32>
                %66 = vector.broadcast %65 : f32 to vector<8xf32>
                %67 = arith.addi %62, %arg5 : index
                %68 = arith.addi %c0_30, %arg4 : index
                %69 = vector.load %arg1[%67, %68] : memref<768x50264xf32>, vector<8xf32>
                %70 = affine.load %alloca[%c0_29] : memref<1xvector<8xf32>>
                %71 = vector.fma %66, %69, %70 : vector<8xf32>
                affine.store %71, %alloca[%c0_29] : memref<1xvector<8xf32>>
                %72 = affine.apply #map6(%c0)
                %73 = arith.addi %arg6, %arg3 : index
                %74 = arith.addi %72, %arg5 : index
                %75 = memref.load %arg0[%arg2, %73, %74] : memref<64x1x768xf32>
                %76 = vector.broadcast %75 : f32 to vector<8xf32>
                %77 = arith.addi %72, %arg5 : index
                %78 = arith.addi %c0_30, %arg4 : index
                %79 = vector.load %arg1[%77, %78] : memref<768x50264xf32>, vector<8xf32>
                %80 = affine.load %alloca[%c0_29] : memref<1xvector<8xf32>>
                %81 = vector.fma %76, %79, %80 : vector<8xf32>
                affine.store %81, %alloca[%c0_29] : memref<1xvector<8xf32>>
                %82 = affine.load %alloca[%c0_29] : memref<1xvector<8xf32>>
                %83 = arith.addi %arg6, %arg3 : index
                %84 = arith.addi %c0_30, %arg4 : index
                vector.store %82, %alloc[%arg2, %83, %84] : memref<64x1x50264xf32>, vector<8xf32>
              }
            } else {
            }
          }
        }
      }
    }
    return %alloc : memref<64x1x50264xf32>
  }
  "krnl.entry_point"() {func = @main_graph, numInputs = 2 : i32, numOutputs = 1 : i32, signature = "[    { \22type\22 : \22f32\22 , \22dims\22 : [64 , 1 , 768] , \22name\22 : \22X1\22 }\0A ,    { \22type\22 : \22f32\22 , \22dims\22 : [768 , 50264] , \22name\22 : \22X2\22 }\0A\0A]\00@[   { \22type\22 : \22f32\22 , \22dims\22 : [64 , 1 , 50264] , \22name\22 : \22Y\22 }\0A\0A]\00"} : () -> ()
}
