#map = affine_map<(d0, d1) -> (d0 * 32 + d1)>
#map1 = affine_map<(d0) -> (-d0, 0)>
#map2 = affine_map<(d0) -> (-d0 + 28, 3)>
#map3 = affine_map<(d0, d1) -> (-d1, 0)>
#map4 = affine_map<(d0, d1) -> (-d1 + 28, 3)>
#map5 = affine_map<(d0)[s0] -> (d0 + s0)>
#map6 = affine_map<(d0, d1) -> (d0 + d1)>
#map7 = affine_map<(d0, d1) -> (d0 * 64 + d1)>
#map8 = affine_map<(d0) -> (-d0 + 26, 3)>
#map9 = affine_map<(d0, d1) -> (-d1 + 26, 3)>
#map10 = affine_map<(d0, d1) -> (d0 + d1 * 32)>
#map11 = affine_map<(d0) -> (0, d0 * 2)>
#map12 = affine_map<(d0)[s0, s1, s2, s3, s4] -> (s0 - ((s2 ceildiv s4) * s4 - s2), -(d0 * s3 - s2) + s0, d0 * s3 + (s1 - 1) * s4 - s2 - ((s2 ceildiv s4) * s4 - s2) + 1, d0 * s3 + (s1 - 1) * s4 - s2 - (d0 * s3 - s2) + 1)>
#map13 = affine_map<(d0, d1, d2) -> (d0 * 144 + d1 * 12 + d2)>
#map14 = affine_map<(d0, d1) -> (d1 + d0)>
#map15 = affine_map<(d0, d1, d2, d3) -> (d3 + d2)>
#map16 = affine_map<(d0) -> (-d0 + 10000)>
#map17 = affine_map<(d0) -> (-d0 + 10000, 32)>
#map18 = affine_map<(d0) -> (d0)>
#map19 = affine_map<(d0) -> (d0 + 64)>
#map20 = affine_map<(d0) -> (d0 + 32, 10000)>
#map21 = affine_map<(d0, d1) -> (d1 - d0)>
#map22 = affine_map<(d0, d1, d2, d3, d4) -> (d4 - d3)>
#map23 = affine_map<(d0) -> (d0 + 1)>
#map24 = affine_map<(d0) -> (d0 + 2)>
#map25 = affine_map<(d0) -> (d0 + 3)>
#map26 = affine_map<(d0) -> (-d0 + 128)>
#map27 = affine_map<(d0) -> (-d0 + 128, 256)>
#map28 = affine_map<(d0, d1) -> (-d1 + 10)>
#map29 = affine_map<(d0, d1) -> (-d1 + 10, 64)>
#map30 = affine_map<(d0, d1) -> (-d1 + 128)>
#map31 = affine_map<(d0, d1) -> (-d1 + 128, 256)>
#map32 = affine_map<(d0) -> (d0 + 10)>
#map33 = affine_map<(d0, d1, d2, d3, d4) -> (-d4 - 6)>
#map34 = affine_map<(d0, d1, d2, d3, d4) -> (-d2 - 128)>
#map35 = affine_map<(d0, d1, d2, d3, d4) -> (-d4 + 10)>
#map36 = affine_map<(d0, d1, d2, d3, d4) -> (-d4 + 10, 16)>
#map37 = affine_map<(d0, d1, d2, d3, d4) -> (-d2 + 128)>
#map38 = affine_map<(d0, d1, d2, d3, d4) -> (-d2 + 128, 256)>
#map39 = affine_map<(d0) -> (d0 + 4)>
#map40 = affine_map<(d0) -> (d0 + 5)>
#map41 = affine_map<(d0) -> (d0 + 6)>
#map42 = affine_map<(d0) -> (d0 + 7)>
#map43 = affine_map<(d0) -> (d0 + 8)>
#map44 = affine_map<(d0) -> (d0 + 9)>
#map45 = affine_map<(d0) -> (d0 + 11)>
#map46 = affine_map<(d0) -> (d0 + 12)>
#map47 = affine_map<(d0) -> (d0 + 13)>
#map48 = affine_map<(d0) -> (d0 + 14)>
#map49 = affine_map<(d0) -> (d0 + 15)>
#set = affine_set<(d0, d1, d2, d3, d4) : (1 >= 0, 1 >= 0, 1 >= 0)>
#set1 = affine_set<(d0, d1, d2, d3, d4) : (1 >= 0, -d4 - 6 >= 0, -d2 - 128 >= 0)>
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu"} {
  func.func @main_graph(%arg0: memref<10000x1x28x28xf32>) -> memref<10000x10xf32> attributes {input_names = ["image"], llvm.emit_c_interface, output_names = ["prediction"]} {
    %c0 = arith.constant 0 : index
    %c0_0 = arith.constant 0 : index
    %c10 = arith.constant 10 : index
    %c128 = arith.constant 128 : index
    %c9216 = arith.constant 9216 : index
    %cst = arith.constant 0xFF800000 : f32
    %c24 = arith.constant 24 : index
    %cst_1 = arith.constant 0.000000e+00 : f32
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c10000 = arith.constant 10000 : index
    %c0_2 = arith.constant 0 : index
    %0 = "krnl.global"() {name = "constant_0", shape = [32, 1, 3, 3], value = dense_resource<__elided__> : tensor<32x1x3x3xf32>} : () -> memref<32x1x3x3xf32>
    %1 = "krnl.global"() {name = "constant_1", shape = [32], value = dense<[-0.0413751751, 0.00647304859, 0.121048577, -0.246914402, -7.32650456E-4, -0.0536536686, -0.0940010324, -0.158220366, 0.0894400477, 0.128942981, 0.0648366138, -0.024774529, -0.259112507, -0.14859204, -0.165043339, -0.0169340577, -0.352700323, -0.0776385292, -0.0765846446, -0.133212268, 0.0272235814, 0.0955112576, -0.159105465, -0.00377246528, -0.139577657, -0.134778023, 0.00602820143, -0.0472631939, -0.206980392, 0.0231945943, 0.119713888, -1.521770e-01]> : tensor<32xf32>} : () -> memref<32xf32>
    %2 = "krnl.global"() {name = "constant_2", shape = [64, 32, 3, 3], value = dense_resource<__elided__> : tensor<64x32x3x3xf32>} : () -> memref<64x32x3x3xf32>
    %3 = "krnl.global"() {name = "constant_3", shape = [64], value = dense<[-0.0446456447, 0.0400701351, 0.0760369077, -0.02703958, -0.0444451235, -0.0453657359, 0.0129853627, -0.00195369334, 9.091060e-02, -0.00203127367, 0.0144827468, -0.069686152, 0.0519479364, 0.00876102782, 0.154324532, 0.0886125118, -6.396320e-02, 0.00210528937, 0.0648061484, 0.133643284, 0.0388542302, -0.0467311256, -0.0118214414, 0.0170596279, -0.0748515576, 0.0306458939, 0.080421567, 0.106840335, -0.048381675, 0.130181313, 0.0116176195, 0.0321412198, -0.0388309434, 0.0536956452, 0.114982672, 0.0216093156, -0.0213988069, -0.0536230914, -0.0242792908, -0.04534363, -0.078140676, 0.0224999972, -0.0710086748, -0.0417166427, -0.0172679964, 3.64768202E-4, 0.0725041106, 0.0263273977, 0.00426188065, -0.0607554577, 0.00498728175, -4.61652759E-4, 0.168069914, 0.061551243, 0.0401430428, 0.0136206942, -0.0640458614, 0.0401206389, 0.00208586035, 0.0219519585, -0.0431582741, -0.0712755471, 0.0791610404, 0.102982618]> : tensor<64xf32>} : () -> memref<64xf32>
    %4 = "krnl.global"() {name = "constant_4", shape = [128, 9216], value = dense_resource<__elided__> : tensor<128x9216xf32>} : () -> memref<128x9216xf32>
    %5 = "krnl.global"() {name = "constant_5", shape = [128], value = dense_resource<__elided__> : tensor<128xf32>} : () -> memref<128xf32>
    %6 = "krnl.global"() {name = "constant_6", shape = [10, 128], value = dense_resource<__elided__> : tensor<10x128xf32>} : () -> memref<10x128xf32>
    %7 = "krnl.global"() {name = "constant_7", shape = [10], value = dense<[0.100333534, -0.122685716, -0.00974090304, 0.0916311592, -0.0128672328, -0.214983642, 0.035601344, -0.0752696171, -0.098198153, -0.0580892526]> : tensor<10xf32>} : () -> memref<10xf32>
    %alloc = memref.alloc() {alignment = 16 : i64} : memref<10000x32x26x26xf32>
    %alloca = memref.alloca() : memref<f32>
    affine.for %arg1 = 0 to 10000 {
      affine.for %arg2 = 0 to 1 {
        affine.for %arg3 = 0 to 32 {
          %8 = affine.apply #map(%arg2, %arg3)
          affine.for %arg4 = 0 to 26 {
            affine.for %arg5 = 0 to 26 {
              affine.store %cst_1, %alloca[] : memref<f32>
              affine.for %arg6 = 0 to 1 {
                affine.for %arg7 = max #map1(%arg4) to min #map2(%arg4) {
                  affine.for %arg8 = max #map3(%arg4, %arg5) to min #map4(%arg4, %arg5) {
                    %12 = affine.apply #map5(%arg6)[%arg2]
                    %13 = affine.apply #map6(%arg7, %arg4)
                    %14 = affine.apply #map6(%arg8, %arg5)
                    %15 = affine.load %arg0[%arg1, %12, %13, %14] : memref<10000x1x28x28xf32>
                    %16 = affine.load %0[%8, %arg6, %arg7, %arg8] : memref<32x1x3x3xf32>
                    %17 = affine.load %alloca[] : memref<f32>
                    %18 = arith.mulf %15, %16 : f32
                    %19 = arith.addf %17, %18 : f32
                    affine.store %19, %alloca[] : memref<f32>
                  }
                }
              }
              %9 = affine.load %alloca[] : memref<f32>
              %10 = affine.load %1[%8] : memref<32xf32>
              %11 = arith.addf %9, %10 : f32
              affine.store %11, %alloc[%arg1, %8, %arg4, %arg5] : memref<10000x32x26x26xf32>
            }
          }
        }
      }
    }
    %alloc_3 = memref.alloc() {alignment = 16 : i64} : memref<10000x32x26x26xf32>
    affine.for %arg1 = 0 to 10000 {
      affine.for %arg2 = 0 to 32 {
        affine.for %arg3 = 0 to 26 {
          affine.for %arg4 = 0 to 26 {
            %8 = affine.load %alloc[%arg1, %arg2, %arg3, %arg4] : memref<10000x32x26x26xf32>
            %9 = arith.cmpf oge, %8, %cst_1 : f32
            %10 = arith.select %9, %8, %cst_1 : f32
            affine.store %10, %alloc_3[%arg1, %arg2, %arg3, %arg4] : memref<10000x32x26x26xf32>
          }
        }
      }
    }
    %alloc_4 = memref.alloc() {alignment = 16 : i64} : memref<10000x64x24x24xf32>
    %alloca_5 = memref.alloca() : memref<f32>
    affine.for %arg1 = 0 to 10000 {
      affine.for %arg2 = 0 to 1 {
        affine.for %arg3 = 0 to 64 {
          %8 = affine.apply #map7(%arg2, %arg3)
          affine.for %arg4 = 0 to 24 {
            affine.for %arg5 = 0 to 24 {
              affine.store %cst_1, %alloca_5[] : memref<f32>
              affine.for %arg6 = 0 to 32 {
                affine.for %arg7 = max #map1(%arg4) to min #map8(%arg4) {
                  affine.for %arg8 = max #map3(%arg4, %arg5) to min #map9(%arg4, %arg5) {
                    %12 = affine.apply #map10(%arg6, %arg2)
                    %13 = affine.apply #map6(%arg7, %arg4)
                    %14 = affine.apply #map6(%arg8, %arg5)
                    %15 = affine.load %alloc_3[%arg1, %12, %13, %14] : memref<10000x32x26x26xf32>
                    %16 = affine.load %2[%8, %arg6, %arg7, %arg8] : memref<64x32x3x3xf32>
                    %17 = affine.load %alloca_5[] : memref<f32>
                    %18 = arith.mulf %15, %16 : f32
                    %19 = arith.addf %17, %18 : f32
                    affine.store %19, %alloca_5[] : memref<f32>
                  }
                }
              }
              %9 = affine.load %alloca_5[] : memref<f32>
              %10 = affine.load %3[%8] : memref<64xf32>
              %11 = arith.addf %9, %10 : f32
              affine.store %11, %alloc_4[%arg1, %8, %arg4, %arg5] : memref<10000x64x24x24xf32>
            }
          }
        }
      }
    }
    %alloc_6 = memref.alloc() {alignment = 16 : i64} : memref<10000x64x24x24xf32>
    affine.for %arg1 = 0 to 10000 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 24 {
          affine.for %arg4 = 0 to 24 {
            %8 = affine.load %alloc_4[%arg1, %arg2, %arg3, %arg4] : memref<10000x64x24x24xf32>
            %9 = arith.cmpf oge, %8, %cst_1 : f32
            %10 = arith.select %9, %8, %cst_1 : f32
            affine.store %10, %alloc_6[%arg1, %arg2, %arg3, %arg4] : memref<10000x64x24x24xf32>
          }
        }
      }
    }
    %alloc_7 = memref.alloc() {alignment = 16 : i64} : memref<10000x64x12x12xf32>
    %alloca_8 = memref.alloca() : memref<f32>
    affine.for %arg1 = 0 to 10000 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 12 {
          affine.for %arg4 = 0 to 12 {
            affine.store %cst, %alloca_8[] : memref<f32>
            %8 = affine.max #map11(%arg3)
            %9 = affine.max #map11(%arg4)
            affine.for %arg5 = 0 to min #map12(%arg3)[%c24, %c2, %c0_2, %c2, %c1] {
              affine.for %arg6 = 0 to min #map12(%arg4)[%c24, %c2, %c0_2, %c2, %c1] {
                %11 = arith.addi %arg5, %8 : index
                %12 = arith.addi %arg6, %9 : index
                %13 = memref.load %alloc_6[%arg1, %arg2, %11, %12] : memref<10000x64x24x24xf32>
                %14 = affine.load %alloca_8[] : memref<f32>
                %15 = arith.cmpf ogt, %14, %13 : f32
                %16 = arith.select %15, %14, %13 : f32
                affine.store %16, %alloca_8[] : memref<f32>
              }
            }
            %10 = affine.load %alloca_8[] : memref<f32>
            affine.store %10, %alloc_7[%arg1, %arg2, %arg3, %arg4] : memref<10000x64x12x12xf32>
          }
        }
      }
    }
    %alloc_9 = memref.alloc() {alignment = 16 : i64} : memref<10000x9216xf32>
    affine.for %arg1 = 0 to 10000 {
      affine.for %arg2 = 0 to 64 {
        affine.for %arg3 = 0 to 12 {
          affine.for %arg4 = 0 to 12 {
            %8 = affine.load %alloc_7[%arg1, %arg2, %arg3, %arg4] : memref<10000x64x12x12xf32>
            %9 = affine.apply #map13(%arg2, %arg3, %arg4)
            affine.store %8, %alloc_9[%arg1, %9] : memref<10000x9216xf32>
          }
        }
      }
    }
    %alloc_10 = memref.alloc() {alignment = 128 : i64} : memref<10000x128xf32>
    %c10000_11 = arith.constant 10000 : index
    %c128_12 = arith.constant 128 : index
    %c0_13 = arith.constant 0 : index
    affine.for %arg1 = 0 to 10000 {
      affine.for %arg2 = 0 to 128 {
        affine.store %cst_1, %alloc_10[%arg1, %arg2] : memref<10000x128xf32>
      }
    }
    %alloc_14 = memref.alloc() {alignment = 128 : i64} : memref<32x256xf32>
    %alloc_15 = memref.alloc() {alignment = 128 : i64} : memref<256x64xf32>
    affine.for %arg1 = 0 to 128 step 64 {
      affine.for %arg2 = 0 to 9216 step 256 {
        %c256 = arith.constant 256 : index
        %c64 = arith.constant 64 : index
        %c128_27 = arith.constant 128 : index
        %c9216_28 = arith.constant 9216 : index
        %c1_29 = arith.constant 1 : index
        %c1_30 = arith.constant 1 : index
        %c0_31 = arith.constant 0 : index
        affine.for %arg3 = 0 to 256 {
          affine.for %arg4 = 0 to 64 {
            %8 = affine.apply #map14(%arg1, %arg4)
            %9 = affine.apply #map15(%arg1, %arg4, %arg2, %arg3)
            %10 = affine.load %4[%8, %9] : memref<128x9216xf32>
            affine.store %10, %alloc_15[%arg3, %arg4] : memref<256x64xf32>
          }
        }
        affine.for %arg3 = 0 to 10000 step 32 {
          %c32 = arith.constant 32 : index
          %c256_32 = arith.constant 256 : index
          %c10000_33 = arith.constant 10000 : index
          %c9216_34 = arith.constant 9216 : index
          %c1_35 = arith.constant 1 : index
          %c1_36 = arith.constant 1 : index
          %c0_37 = arith.constant 0 : index
          %8 = affine.apply #map16(%arg3)
          %9 = affine.min #map17(%arg3)
          affine.for %arg4 = 0 to min #map17(%arg3) {
            affine.for %arg5 = 0 to 256 {
              %10 = affine.apply #map14(%arg3, %arg4)
              %11 = affine.apply #map15(%arg3, %arg4, %arg2, %arg5)
              %12 = affine.load %alloc_9[%10, %11] : memref<10000x9216xf32>
              affine.store %12, %alloc_14[%arg4, %arg5] : memref<32x256xf32>
            }
          }
          affine.for %arg4 = #map18(%arg1) to #map19(%arg1) step 16 {
            affine.for %arg5 = #map18(%arg3) to min #map20(%arg3) step 4 {
              %c32_38 = arith.constant 32 : index
              %c256_39 = arith.constant 256 : index
              %c256_40 = arith.constant 256 : index
              %c64_41 = arith.constant 64 : index
              %c10000_42 = arith.constant 10000 : index
              %c128_43 = arith.constant 128 : index
              %c4 = arith.constant 4 : index
              %c16 = arith.constant 16 : index
              %c256_44 = arith.constant 256 : index
              %c10000_45 = arith.constant 10000 : index
              %c128_46 = arith.constant 128 : index
              %c9216_47 = arith.constant 9216 : index
              %c1_48 = arith.constant 1 : index
              %10 = affine.apply #map21(%arg3, %arg5)
              %c0_49 = arith.constant 0 : index
              %c0_50 = arith.constant 0 : index
              %11 = affine.apply #map22(%arg3, %arg5, %arg2, %arg1, %arg4)
              %c0_51 = arith.constant 0 : index
              %c0_52 = arith.constant 0 : index
              %c1_53 = arith.constant 1 : index
              %c1_54 = arith.constant 1 : index
              %c1_55 = arith.constant 1 : index
              %c0_56 = arith.constant 0 : index
              affine.if #set(%arg3, %arg5, %arg2, %arg1, %arg4) {
                %alloca_57 = memref.alloca() {alignment = 64 : i64} : memref<4xvector<16xf32>>
                %c0_58 = arith.constant 0 : index
                %c0_59 = arith.constant 0 : index
                %12 = arith.addi %c0_0, %arg5 : index
                %13 = arith.addi %c0_59, %arg4 : index
                %14 = vector.load %alloc_10[%12, %13] : memref<10000x128xf32>, vector<16xf32>
                affine.store %14, %alloca_57[%c0_0] : memref<4xvector<16xf32>>
                %15 = affine.apply #map23(%c0_0)
                %16 = arith.addi %15, %arg5 : index
                %17 = arith.addi %c0_59, %arg4 : index
                %18 = vector.load %alloc_10[%16, %17] : memref<10000x128xf32>, vector<16xf32>
                affine.store %18, %alloca_57[%15] : memref<4xvector<16xf32>>
                %19 = affine.apply #map24(%c0_0)
                %20 = arith.addi %19, %arg5 : index
                %21 = arith.addi %c0_59, %arg4 : index
                %22 = vector.load %alloc_10[%20, %21] : memref<10000x128xf32>, vector<16xf32>
                affine.store %22, %alloca_57[%19] : memref<4xvector<16xf32>>
                %23 = affine.apply #map25(%c0_0)
                %24 = arith.addi %23, %arg5 : index
                %25 = arith.addi %c0_59, %arg4 : index
                %26 = vector.load %alloc_10[%24, %25] : memref<10000x128xf32>, vector<16xf32>
                affine.store %26, %alloca_57[%23] : memref<4xvector<16xf32>>
                affine.for %arg6 = 0 to 256 step 4 {
                  %42 = arith.addi %c0_0, %10 : index
                  %43 = arith.addi %arg6, %c0_49 : index
                  %44 = memref.load %alloc_14[%42, %43] : memref<32x256xf32>
                  %45 = vector.broadcast %44 : f32 to vector<16xf32>
                  %46 = arith.addi %arg6, %c0_50 : index
                  %47 = arith.addi %c0_59, %11 : index
                  %48 = vector.load %alloc_15[%46, %47] : memref<256x64xf32>, vector<16xf32>
                  %49 = affine.load %alloca_57[%c0_0] : memref<4xvector<16xf32>>
                  %50 = vector.fma %45, %48, %49 : vector<16xf32>
                  affine.store %50, %alloca_57[%c0_0] : memref<4xvector<16xf32>>
                  %51 = affine.apply #map23(%arg6)
                  %52 = arith.addi %c0_0, %10 : index
                  %53 = arith.addi %51, %c0_49 : index
                  %54 = memref.load %alloc_14[%52, %53] : memref<32x256xf32>
                  %55 = vector.broadcast %54 : f32 to vector<16xf32>
                  %56 = arith.addi %51, %c0_50 : index
                  %57 = arith.addi %c0_59, %11 : index
                  %58 = vector.load %alloc_15[%56, %57] : memref<256x64xf32>, vector<16xf32>
                  %59 = affine.load %alloca_57[%c0_0] : memref<4xvector<16xf32>>
                  %60 = vector.fma %55, %58, %59 : vector<16xf32>
                  affine.store %60, %alloca_57[%c0_0] : memref<4xvector<16xf32>>
                  %61 = affine.apply #map24(%arg6)
                  %62 = arith.addi %c0_0, %10 : index
                  %63 = arith.addi %61, %c0_49 : index
                  %64 = memref.load %alloc_14[%62, %63] : memref<32x256xf32>
                  %65 = vector.broadcast %64 : f32 to vector<16xf32>
                  %66 = arith.addi %61, %c0_50 : index
                  %67 = arith.addi %c0_59, %11 : index
                  %68 = vector.load %alloc_15[%66, %67] : memref<256x64xf32>, vector<16xf32>
                  %69 = affine.load %alloca_57[%c0_0] : memref<4xvector<16xf32>>
                  %70 = vector.fma %65, %68, %69 : vector<16xf32>
                  affine.store %70, %alloca_57[%c0_0] : memref<4xvector<16xf32>>
                  %71 = affine.apply #map25(%arg6)
                  %72 = arith.addi %c0_0, %10 : index
                  %73 = arith.addi %71, %c0_49 : index
                  %74 = memref.load %alloc_14[%72, %73] : memref<32x256xf32>
                  %75 = vector.broadcast %74 : f32 to vector<16xf32>
                  %76 = arith.addi %71, %c0_50 : index
                  %77 = arith.addi %c0_59, %11 : index
                  %78 = vector.load %alloc_15[%76, %77] : memref<256x64xf32>, vector<16xf32>
                  %79 = affine.load %alloca_57[%c0_0] : memref<4xvector<16xf32>>
                  %80 = vector.fma %75, %78, %79 : vector<16xf32>
                  affine.store %80, %alloca_57[%c0_0] : memref<4xvector<16xf32>>
                  %81 = affine.apply #map23(%c0_0)
                  %82 = arith.addi %81, %10 : index
                  %83 = arith.addi %arg6, %c0_49 : index
                  %84 = memref.load %alloc_14[%82, %83] : memref<32x256xf32>
                  %85 = vector.broadcast %84 : f32 to vector<16xf32>
                  %86 = arith.addi %arg6, %c0_50 : index
                  %87 = arith.addi %c0_59, %11 : index
                  %88 = vector.load %alloc_15[%86, %87] : memref<256x64xf32>, vector<16xf32>
                  %89 = affine.load %alloca_57[%81] : memref<4xvector<16xf32>>
                  %90 = vector.fma %85, %88, %89 : vector<16xf32>
                  affine.store %90, %alloca_57[%81] : memref<4xvector<16xf32>>
                  %91 = affine.apply #map23(%arg6)
                  %92 = arith.addi %81, %10 : index
                  %93 = arith.addi %91, %c0_49 : index
                  %94 = memref.load %alloc_14[%92, %93] : memref<32x256xf32>
                  %95 = vector.broadcast %94 : f32 to vector<16xf32>
                  %96 = arith.addi %91, %c0_50 : index
                  %97 = arith.addi %c0_59, %11 : index
                  %98 = vector.load %alloc_15[%96, %97] : memref<256x64xf32>, vector<16xf32>
                  %99 = affine.load %alloca_57[%81] : memref<4xvector<16xf32>>
                  %100 = vector.fma %95, %98, %99 : vector<16xf32>
                  affine.store %100, %alloca_57[%81] : memref<4xvector<16xf32>>
                  %101 = affine.apply #map24(%arg6)
                  %102 = arith.addi %81, %10 : index
                  %103 = arith.addi %101, %c0_49 : index
                  %104 = memref.load %alloc_14[%102, %103] : memref<32x256xf32>
                  %105 = vector.broadcast %104 : f32 to vector<16xf32>
                  %106 = arith.addi %101, %c0_50 : index
                  %107 = arith.addi %c0_59, %11 : index
                  %108 = vector.load %alloc_15[%106, %107] : memref<256x64xf32>, vector<16xf32>
                  %109 = affine.load %alloca_57[%81] : memref<4xvector<16xf32>>
                  %110 = vector.fma %105, %108, %109 : vector<16xf32>
                  affine.store %110, %alloca_57[%81] : memref<4xvector<16xf32>>
                  %111 = affine.apply #map25(%arg6)
                  %112 = arith.addi %81, %10 : index
                  %113 = arith.addi %111, %c0_49 : index
                  %114 = memref.load %alloc_14[%112, %113] : memref<32x256xf32>
                  %115 = vector.broadcast %114 : f32 to vector<16xf32>
                  %116 = arith.addi %111, %c0_50 : index
                  %117 = arith.addi %c0_59, %11 : index
                  %118 = vector.load %alloc_15[%116, %117] : memref<256x64xf32>, vector<16xf32>
                  %119 = affine.load %alloca_57[%81] : memref<4xvector<16xf32>>
                  %120 = vector.fma %115, %118, %119 : vector<16xf32>
                  affine.store %120, %alloca_57[%81] : memref<4xvector<16xf32>>
                  %121 = affine.apply #map24(%c0_0)
                  %122 = arith.addi %121, %10 : index
                  %123 = arith.addi %arg6, %c0_49 : index
                  %124 = memref.load %alloc_14[%122, %123] : memref<32x256xf32>
                  %125 = vector.broadcast %124 : f32 to vector<16xf32>
                  %126 = arith.addi %arg6, %c0_50 : index
                  %127 = arith.addi %c0_59, %11 : index
                  %128 = vector.load %alloc_15[%126, %127] : memref<256x64xf32>, vector<16xf32>
                  %129 = affine.load %alloca_57[%121] : memref<4xvector<16xf32>>
                  %130 = vector.fma %125, %128, %129 : vector<16xf32>
                  affine.store %130, %alloca_57[%121] : memref<4xvector<16xf32>>
                  %131 = affine.apply #map23(%arg6)
                  %132 = arith.addi %121, %10 : index
                  %133 = arith.addi %131, %c0_49 : index
                  %134 = memref.load %alloc_14[%132, %133] : memref<32x256xf32>
                  %135 = vector.broadcast %134 : f32 to vector<16xf32>
                  %136 = arith.addi %131, %c0_50 : index
                  %137 = arith.addi %c0_59, %11 : index
                  %138 = vector.load %alloc_15[%136, %137] : memref<256x64xf32>, vector<16xf32>
                  %139 = affine.load %alloca_57[%121] : memref<4xvector<16xf32>>
                  %140 = vector.fma %135, %138, %139 : vector<16xf32>
                  affine.store %140, %alloca_57[%121] : memref<4xvector<16xf32>>
                  %141 = affine.apply #map24(%arg6)
                  %142 = arith.addi %121, %10 : index
                  %143 = arith.addi %141, %c0_49 : index
                  %144 = memref.load %alloc_14[%142, %143] : memref<32x256xf32>
                  %145 = vector.broadcast %144 : f32 to vector<16xf32>
                  %146 = arith.addi %141, %c0_50 : index
                  %147 = arith.addi %c0_59, %11 : index
                  %148 = vector.load %alloc_15[%146, %147] : memref<256x64xf32>, vector<16xf32>
                  %149 = affine.load %alloca_57[%121] : memref<4xvector<16xf32>>
                  %150 = vector.fma %145, %148, %149 : vector<16xf32>
                  affine.store %150, %alloca_57[%121] : memref<4xvector<16xf32>>
                  %151 = affine.apply #map25(%arg6)
                  %152 = arith.addi %121, %10 : index
                  %153 = arith.addi %151, %c0_49 : index
                  %154 = memref.load %alloc_14[%152, %153] : memref<32x256xf32>
                  %155 = vector.broadcast %154 : f32 to vector<16xf32>
                  %156 = arith.addi %151, %c0_50 : index
                  %157 = arith.addi %c0_59, %11 : index
                  %158 = vector.load %alloc_15[%156, %157] : memref<256x64xf32>, vector<16xf32>
                  %159 = affine.load %alloca_57[%121] : memref<4xvector<16xf32>>
                  %160 = vector.fma %155, %158, %159 : vector<16xf32>
                  affine.store %160, %alloca_57[%121] : memref<4xvector<16xf32>>
                  %161 = affine.apply #map25(%c0_0)
                  %162 = arith.addi %161, %10 : index
                  %163 = arith.addi %arg6, %c0_49 : index
                  %164 = memref.load %alloc_14[%162, %163] : memref<32x256xf32>
                  %165 = vector.broadcast %164 : f32 to vector<16xf32>
                  %166 = arith.addi %arg6, %c0_50 : index
                  %167 = arith.addi %c0_59, %11 : index
                  %168 = vector.load %alloc_15[%166, %167] : memref<256x64xf32>, vector<16xf32>
                  %169 = affine.load %alloca_57[%161] : memref<4xvector<16xf32>>
                  %170 = vector.fma %165, %168, %169 : vector<16xf32>
                  affine.store %170, %alloca_57[%161] : memref<4xvector<16xf32>>
                  %171 = affine.apply #map23(%arg6)
                  %172 = arith.addi %161, %10 : index
                  %173 = arith.addi %171, %c0_49 : index
                  %174 = memref.load %alloc_14[%172, %173] : memref<32x256xf32>
                  %175 = vector.broadcast %174 : f32 to vector<16xf32>
                  %176 = arith.addi %171, %c0_50 : index
                  %177 = arith.addi %c0_59, %11 : index
                  %178 = vector.load %alloc_15[%176, %177] : memref<256x64xf32>, vector<16xf32>
                  %179 = affine.load %alloca_57[%161] : memref<4xvector<16xf32>>
                  %180 = vector.fma %175, %178, %179 : vector<16xf32>
                  affine.store %180, %alloca_57[%161] : memref<4xvector<16xf32>>
                  %181 = affine.apply #map24(%arg6)
                  %182 = arith.addi %161, %10 : index
                  %183 = arith.addi %181, %c0_49 : index
                  %184 = memref.load %alloc_14[%182, %183] : memref<32x256xf32>
                  %185 = vector.broadcast %184 : f32 to vector<16xf32>
                  %186 = arith.addi %181, %c0_50 : index
                  %187 = arith.addi %c0_59, %11 : index
                  %188 = vector.load %alloc_15[%186, %187] : memref<256x64xf32>, vector<16xf32>
                  %189 = affine.load %alloca_57[%161] : memref<4xvector<16xf32>>
                  %190 = vector.fma %185, %188, %189 : vector<16xf32>
                  affine.store %190, %alloca_57[%161] : memref<4xvector<16xf32>>
                  %191 = affine.apply #map25(%arg6)
                  %192 = arith.addi %161, %10 : index
                  %193 = arith.addi %191, %c0_49 : index
                  %194 = memref.load %alloc_14[%192, %193] : memref<32x256xf32>
                  %195 = vector.broadcast %194 : f32 to vector<16xf32>
                  %196 = arith.addi %191, %c0_50 : index
                  %197 = arith.addi %c0_59, %11 : index
                  %198 = vector.load %alloc_15[%196, %197] : memref<256x64xf32>, vector<16xf32>
                  %199 = affine.load %alloca_57[%161] : memref<4xvector<16xf32>>
                  %200 = vector.fma %195, %198, %199 : vector<16xf32>
                  affine.store %200, %alloca_57[%161] : memref<4xvector<16xf32>>
                }
                %27 = affine.load %alloca_57[%c0_0] : memref<4xvector<16xf32>>
                %28 = arith.addi %c0_0, %arg5 : index
                %29 = arith.addi %c0_59, %arg4 : index
                vector.store %27, %alloc_10[%28, %29] : memref<10000x128xf32>, vector<16xf32>
                %30 = affine.apply #map23(%c0_0)
                %31 = affine.load %alloca_57[%30] : memref<4xvector<16xf32>>
                %32 = arith.addi %30, %arg5 : index
                %33 = arith.addi %c0_59, %arg4 : index
                vector.store %31, %alloc_10[%32, %33] : memref<10000x128xf32>, vector<16xf32>
                %34 = affine.apply #map24(%c0_0)
                %35 = affine.load %alloca_57[%34] : memref<4xvector<16xf32>>
                %36 = arith.addi %34, %arg5 : index
                %37 = arith.addi %c0_59, %arg4 : index
                vector.store %35, %alloc_10[%36, %37] : memref<10000x128xf32>, vector<16xf32>
                %38 = affine.apply #map25(%c0_0)
                %39 = affine.load %alloca_57[%38] : memref<4xvector<16xf32>>
                %40 = arith.addi %38, %arg5 : index
                %41 = arith.addi %c0_59, %arg4 : index
                vector.store %39, %alloc_10[%40, %41] : memref<10000x128xf32>, vector<16xf32>
              } else {
              }
            }
          }
        }
      }
    }
    affine.for %arg1 = 0 to 10000 {
      affine.for %arg2 = 0 to 128 {
        %8 = affine.load %alloc_10[%arg1, %arg2] : memref<10000x128xf32>
        %9 = affine.load %5[%arg2] : memref<128xf32>
        %10 = arith.addf %8, %9 : f32
        affine.store %10, %alloc_10[%arg1, %arg2] : memref<10000x128xf32>
      }
    }
    %alloc_16 = memref.alloc() {alignment = 16 : i64} : memref<10000x128xf32>
    affine.for %arg1 = 0 to 10000 {
      affine.for %arg2 = 0 to 128 {
        %8 = affine.load %alloc_10[%arg1, %arg2] : memref<10000x128xf32>
        %9 = arith.cmpf oge, %8, %cst_1 : f32
        %10 = arith.select %9, %8, %cst_1 : f32
        affine.store %10, %alloc_16[%arg1, %arg2] : memref<10000x128xf32>
      }
    }
    %alloc_17 = memref.alloc() {alignment = 128 : i64} : memref<10000x10xf32>
    %c10000_18 = arith.constant 10000 : index
    %c10_19 = arith.constant 10 : index
    %c0_20 = arith.constant 0 : index
    affine.for %arg1 = 0 to 10000 {
      affine.for %arg2 = 0 to 10 {
        affine.store %cst_1, %alloc_17[%arg1, %arg2] : memref<10000x10xf32>
      }
    }
    %alloc_21 = memref.alloc() {alignment = 128 : i64} : memref<32x256xf32>
    %alloc_22 = memref.alloc() {alignment = 128 : i64} : memref<256x64xf32>
    affine.for %arg1 = 0 to 10 step 64 {
      affine.for %arg2 = 0 to 128 step 256 {
        %c256 = arith.constant 256 : index
        %c64 = arith.constant 64 : index
        %c10_27 = arith.constant 10 : index
        %c128_28 = arith.constant 128 : index
        %c1_29 = arith.constant 1 : index
        %c1_30 = arith.constant 1 : index
        %c0_31 = arith.constant 0 : index
        %8 = affine.apply #map26(%arg2)
        %9 = affine.min #map27(%arg2)
        %10 = affine.apply #map28(%arg2, %arg1)
        %11 = affine.min #map29(%arg2, %arg1)
        affine.for %arg3 = 0 to min #map27(%arg2) {
          affine.for %arg4 = 0 to min #map29(%arg2, %arg1) {
            %12 = affine.apply #map14(%arg1, %arg4)
            %13 = affine.apply #map15(%arg1, %arg4, %arg2, %arg3)
            %14 = affine.load %6[%12, %13] : memref<10x128xf32>
            affine.store %14, %alloc_22[%arg3, %arg4] : memref<256x64xf32>
          }
        }
        affine.for %arg3 = 0 to 10000 step 32 {
          %c32 = arith.constant 32 : index
          %c256_32 = arith.constant 256 : index
          %c10000_33 = arith.constant 10000 : index
          %c128_34 = arith.constant 128 : index
          %c1_35 = arith.constant 1 : index
          %c1_36 = arith.constant 1 : index
          %c0_37 = arith.constant 0 : index
          %12 = affine.apply #map16(%arg3)
          %13 = affine.min #map17(%arg3)
          %14 = affine.apply #map30(%arg3, %arg2)
          %15 = affine.min #map31(%arg3, %arg2)
          affine.for %arg4 = 0 to min #map17(%arg3) {
            affine.for %arg5 = 0 to min #map31(%arg3, %arg2) {
              %16 = affine.apply #map14(%arg3, %arg4)
              %17 = affine.apply #map15(%arg3, %arg4, %arg2, %arg5)
              %18 = affine.load %alloc_16[%16, %17] : memref<10000x128xf32>
              affine.store %18, %alloc_21[%arg4, %arg5] : memref<32x256xf32>
            }
          }
          affine.for %arg4 = #map18(%arg1) to #map32(%arg1) step 16 {
            affine.for %arg5 = #map18(%arg3) to min #map20(%arg3) step 4 {
              %c32_38 = arith.constant 32 : index
              %c256_39 = arith.constant 256 : index
              %c256_40 = arith.constant 256 : index
              %c64_41 = arith.constant 64 : index
              %c10000_42 = arith.constant 10000 : index
              %c10_43 = arith.constant 10 : index
              %c4 = arith.constant 4 : index
              %c16 = arith.constant 16 : index
              %c256_44 = arith.constant 256 : index
              %c10000_45 = arith.constant 10000 : index
              %c10_46 = arith.constant 10 : index
              %c128_47 = arith.constant 128 : index
              %c1_48 = arith.constant 1 : index
              %16 = affine.apply #map21(%arg3, %arg5)
              %c0_49 = arith.constant 0 : index
              %c0_50 = arith.constant 0 : index
              %17 = affine.apply #map22(%arg3, %arg5, %arg2, %arg1, %arg4)
              %c0_51 = arith.constant 0 : index
              %c0_52 = arith.constant 0 : index
              %c1_53 = arith.constant 1 : index
              %c-6 = arith.constant -6 : index
              %18 = affine.apply #map33(%arg3, %arg5, %arg2, %arg1, %arg4)
              %c-128 = arith.constant -128 : index
              %19 = affine.apply #map34(%arg3, %arg5, %arg2, %arg1, %arg4)
              %20 = affine.apply #map35(%arg3, %arg5, %arg2, %arg1, %arg4)
              %21 = affine.min #map36(%arg3, %arg5, %arg2, %arg1, %arg4)
              %22 = affine.apply #map37(%arg3, %arg5, %arg2, %arg1, %arg4)
              %23 = affine.min #map38(%arg3, %arg5, %arg2, %arg1, %arg4)
              %c10_54 = arith.constant 10 : index
              affine.if #set1(%arg3, %arg5, %arg2, %arg1, %arg4) {
                %alloc_55 = memref.alloc() {alignment = 64 : i64} : memref<16xf32>
                %c0_56 = arith.constant 0 : index
                affine.for %arg6 = 0 to 4 {
                  %24 = arith.addi %arg6, %arg5 : index
                  %25 = arith.addi %c0, %arg4 : index
                  %26 = memref.load %alloc_17[%24, %25] : memref<10000x10xf32>
                  affine.store %26, %alloc_55[%c0] : memref<16xf32>
                  %27 = affine.apply #map23(%c0)
                  %28 = arith.addi %arg6, %arg5 : index
                  %29 = arith.addi %27, %arg4 : index
                  %30 = memref.load %alloc_17[%28, %29] : memref<10000x10xf32>
                  affine.store %30, %alloc_55[%27] : memref<16xf32>
                  %31 = affine.apply #map24(%c0)
                  %32 = arith.addi %arg6, %arg5 : index
                  %33 = arith.addi %31, %arg4 : index
                  %34 = memref.load %alloc_17[%32, %33] : memref<10000x10xf32>
                  affine.store %34, %alloc_55[%31] : memref<16xf32>
                  %35 = affine.apply #map25(%c0)
                  %36 = arith.addi %arg6, %arg5 : index
                  %37 = arith.addi %35, %arg4 : index
                  %38 = memref.load %alloc_17[%36, %37] : memref<10000x10xf32>
                  affine.store %38, %alloc_55[%35] : memref<16xf32>
                  %39 = affine.apply #map39(%c0)
                  %40 = arith.addi %arg6, %arg5 : index
                  %41 = arith.addi %39, %arg4 : index
                  %42 = memref.load %alloc_17[%40, %41] : memref<10000x10xf32>
                  affine.store %42, %alloc_55[%39] : memref<16xf32>
                  %43 = affine.apply #map40(%c0)
                  %44 = arith.addi %arg6, %arg5 : index
                  %45 = arith.addi %43, %arg4 : index
                  %46 = memref.load %alloc_17[%44, %45] : memref<10000x10xf32>
                  affine.store %46, %alloc_55[%43] : memref<16xf32>
                  %47 = affine.apply #map41(%c0)
                  %48 = arith.addi %arg6, %arg5 : index
                  %49 = arith.addi %47, %arg4 : index
                  %50 = memref.load %alloc_17[%48, %49] : memref<10000x10xf32>
                  affine.store %50, %alloc_55[%47] : memref<16xf32>
                  %51 = affine.apply #map42(%c0)
                  %52 = arith.addi %arg6, %arg5 : index
                  %53 = arith.addi %51, %arg4 : index
                  %54 = memref.load %alloc_17[%52, %53] : memref<10000x10xf32>
                  affine.store %54, %alloc_55[%51] : memref<16xf32>
                  %55 = affine.apply #map43(%c0)
                  %56 = arith.addi %arg6, %arg5 : index
                  %57 = arith.addi %55, %arg4 : index
                  %58 = memref.load %alloc_17[%56, %57] : memref<10000x10xf32>
                  affine.store %58, %alloc_55[%55] : memref<16xf32>
                  %59 = affine.apply #map44(%c0)
                  %60 = arith.addi %arg6, %arg5 : index
                  %61 = arith.addi %59, %arg4 : index
                  %62 = memref.load %alloc_17[%60, %61] : memref<10000x10xf32>
                  affine.store %62, %alloc_55[%59] : memref<16xf32>
                  %63 = affine.apply #map32(%c0)
                  %64 = arith.addi %arg6, %arg5 : index
                  %65 = arith.addi %63, %arg4 : index
                  %66 = memref.load %alloc_17[%64, %65] : memref<10000x10xf32>
                  affine.store %66, %alloc_55[%63] : memref<16xf32>
                  %67 = affine.apply #map45(%c0)
                  %68 = arith.addi %arg6, %arg5 : index
                  %69 = arith.addi %67, %arg4 : index
                  %70 = memref.load %alloc_17[%68, %69] : memref<10000x10xf32>
                  affine.store %70, %alloc_55[%67] : memref<16xf32>
                  %71 = affine.apply #map46(%c0)
                  %72 = arith.addi %arg6, %arg5 : index
                  %73 = arith.addi %71, %arg4 : index
                  %74 = memref.load %alloc_17[%72, %73] : memref<10000x10xf32>
                  affine.store %74, %alloc_55[%71] : memref<16xf32>
                  %75 = affine.apply #map47(%c0)
                  %76 = arith.addi %arg6, %arg5 : index
                  %77 = arith.addi %75, %arg4 : index
                  %78 = memref.load %alloc_17[%76, %77] : memref<10000x10xf32>
                  affine.store %78, %alloc_55[%75] : memref<16xf32>
                  %79 = affine.apply #map48(%c0)
                  %80 = arith.addi %arg6, %arg5 : index
                  %81 = arith.addi %79, %arg4 : index
                  %82 = memref.load %alloc_17[%80, %81] : memref<10000x10xf32>
                  affine.store %82, %alloc_55[%79] : memref<16xf32>
                  %83 = affine.apply #map49(%c0)
                  %84 = arith.addi %arg6, %arg5 : index
                  %85 = arith.addi %83, %arg4 : index
                  %86 = memref.load %alloc_17[%84, %85] : memref<10000x10xf32>
                  affine.store %86, %alloc_55[%83] : memref<16xf32>
                  affine.for %arg7 = 0 to 256 {
                    %150 = arith.addi %arg6, %16 : index
                    %151 = arith.addi %arg7, %c0_49 : index
                    %152 = memref.load %alloc_21[%150, %151] : memref<32x256xf32>
                    %153 = arith.addi %arg7, %c0_50 : index
                    %154 = arith.addi %c0, %17 : index
                    %155 = memref.load %alloc_22[%153, %154] : memref<256x64xf32>
                    %156 = arith.mulf %152, %155 : f32
                    %157 = affine.load %alloc_55[%c0] : memref<16xf32>
                    %158 = arith.addf %156, %157 : f32
                    affine.store %158, %alloc_55[%c0] : memref<16xf32>
                    %159 = affine.apply #map23(%c0)
                    %160 = arith.addi %arg6, %16 : index
                    %161 = arith.addi %arg7, %c0_49 : index
                    %162 = memref.load %alloc_21[%160, %161] : memref<32x256xf32>
                    %163 = arith.addi %arg7, %c0_50 : index
                    %164 = arith.addi %159, %17 : index
                    %165 = memref.load %alloc_22[%163, %164] : memref<256x64xf32>
                    %166 = arith.mulf %162, %165 : f32
                    %167 = affine.load %alloc_55[%159] : memref<16xf32>
                    %168 = arith.addf %166, %167 : f32
                    affine.store %168, %alloc_55[%159] : memref<16xf32>
                    %169 = affine.apply #map24(%c0)
                    %170 = arith.addi %arg6, %16 : index
                    %171 = arith.addi %arg7, %c0_49 : index
                    %172 = memref.load %alloc_21[%170, %171] : memref<32x256xf32>
                    %173 = arith.addi %arg7, %c0_50 : index
                    %174 = arith.addi %169, %17 : index
                    %175 = memref.load %alloc_22[%173, %174] : memref<256x64xf32>
                    %176 = arith.mulf %172, %175 : f32
                    %177 = affine.load %alloc_55[%169] : memref<16xf32>
                    %178 = arith.addf %176, %177 : f32
                    affine.store %178, %alloc_55[%169] : memref<16xf32>
                    %179 = affine.apply #map25(%c0)
                    %180 = arith.addi %arg6, %16 : index
                    %181 = arith.addi %arg7, %c0_49 : index
                    %182 = memref.load %alloc_21[%180, %181] : memref<32x256xf32>
                    %183 = arith.addi %arg7, %c0_50 : index
                    %184 = arith.addi %179, %17 : index
                    %185 = memref.load %alloc_22[%183, %184] : memref<256x64xf32>
                    %186 = arith.mulf %182, %185 : f32
                    %187 = affine.load %alloc_55[%179] : memref<16xf32>
                    %188 = arith.addf %186, %187 : f32
                    affine.store %188, %alloc_55[%179] : memref<16xf32>
                    %189 = affine.apply #map39(%c0)
                    %190 = arith.addi %arg6, %16 : index
                    %191 = arith.addi %arg7, %c0_49 : index
                    %192 = memref.load %alloc_21[%190, %191] : memref<32x256xf32>
                    %193 = arith.addi %arg7, %c0_50 : index
                    %194 = arith.addi %189, %17 : index
                    %195 = memref.load %alloc_22[%193, %194] : memref<256x64xf32>
                    %196 = arith.mulf %192, %195 : f32
                    %197 = affine.load %alloc_55[%189] : memref<16xf32>
                    %198 = arith.addf %196, %197 : f32
                    affine.store %198, %alloc_55[%189] : memref<16xf32>
                    %199 = affine.apply #map40(%c0)
                    %200 = arith.addi %arg6, %16 : index
                    %201 = arith.addi %arg7, %c0_49 : index
                    %202 = memref.load %alloc_21[%200, %201] : memref<32x256xf32>
                    %203 = arith.addi %arg7, %c0_50 : index
                    %204 = arith.addi %199, %17 : index
                    %205 = memref.load %alloc_22[%203, %204] : memref<256x64xf32>
                    %206 = arith.mulf %202, %205 : f32
                    %207 = affine.load %alloc_55[%199] : memref<16xf32>
                    %208 = arith.addf %206, %207 : f32
                    affine.store %208, %alloc_55[%199] : memref<16xf32>
                    %209 = affine.apply #map41(%c0)
                    %210 = arith.addi %arg6, %16 : index
                    %211 = arith.addi %arg7, %c0_49 : index
                    %212 = memref.load %alloc_21[%210, %211] : memref<32x256xf32>
                    %213 = arith.addi %arg7, %c0_50 : index
                    %214 = arith.addi %209, %17 : index
                    %215 = memref.load %alloc_22[%213, %214] : memref<256x64xf32>
                    %216 = arith.mulf %212, %215 : f32
                    %217 = affine.load %alloc_55[%209] : memref<16xf32>
                    %218 = arith.addf %216, %217 : f32
                    affine.store %218, %alloc_55[%209] : memref<16xf32>
                    %219 = affine.apply #map42(%c0)
                    %220 = arith.addi %arg6, %16 : index
                    %221 = arith.addi %arg7, %c0_49 : index
                    %222 = memref.load %alloc_21[%220, %221] : memref<32x256xf32>
                    %223 = arith.addi %arg7, %c0_50 : index
                    %224 = arith.addi %219, %17 : index
                    %225 = memref.load %alloc_22[%223, %224] : memref<256x64xf32>
                    %226 = arith.mulf %222, %225 : f32
                    %227 = affine.load %alloc_55[%219] : memref<16xf32>
                    %228 = arith.addf %226, %227 : f32
                    affine.store %228, %alloc_55[%219] : memref<16xf32>
                    %229 = affine.apply #map43(%c0)
                    %230 = arith.addi %arg6, %16 : index
                    %231 = arith.addi %arg7, %c0_49 : index
                    %232 = memref.load %alloc_21[%230, %231] : memref<32x256xf32>
                    %233 = arith.addi %arg7, %c0_50 : index
                    %234 = arith.addi %229, %17 : index
                    %235 = memref.load %alloc_22[%233, %234] : memref<256x64xf32>
                    %236 = arith.mulf %232, %235 : f32
                    %237 = affine.load %alloc_55[%229] : memref<16xf32>
                    %238 = arith.addf %236, %237 : f32
                    affine.store %238, %alloc_55[%229] : memref<16xf32>
                    %239 = affine.apply #map44(%c0)
                    %240 = arith.addi %arg6, %16 : index
                    %241 = arith.addi %arg7, %c0_49 : index
                    %242 = memref.load %alloc_21[%240, %241] : memref<32x256xf32>
                    %243 = arith.addi %arg7, %c0_50 : index
                    %244 = arith.addi %239, %17 : index
                    %245 = memref.load %alloc_22[%243, %244] : memref<256x64xf32>
                    %246 = arith.mulf %242, %245 : f32
                    %247 = affine.load %alloc_55[%239] : memref<16xf32>
                    %248 = arith.addf %246, %247 : f32
                    affine.store %248, %alloc_55[%239] : memref<16xf32>
                    %249 = affine.apply #map32(%c0)
                    %250 = arith.addi %arg6, %16 : index
                    %251 = arith.addi %arg7, %c0_49 : index
                    %252 = memref.load %alloc_21[%250, %251] : memref<32x256xf32>
                    %253 = arith.addi %arg7, %c0_50 : index
                    %254 = arith.addi %249, %17 : index
                    %255 = memref.load %alloc_22[%253, %254] : memref<256x64xf32>
                    %256 = arith.mulf %252, %255 : f32
                    %257 = affine.load %alloc_55[%249] : memref<16xf32>
                    %258 = arith.addf %256, %257 : f32
                    affine.store %258, %alloc_55[%249] : memref<16xf32>
                    %259 = affine.apply #map45(%c0)
                    %260 = arith.addi %arg6, %16 : index
                    %261 = arith.addi %arg7, %c0_49 : index
                    %262 = memref.load %alloc_21[%260, %261] : memref<32x256xf32>
                    %263 = arith.addi %arg7, %c0_50 : index
                    %264 = arith.addi %259, %17 : index
                    %265 = memref.load %alloc_22[%263, %264] : memref<256x64xf32>
                    %266 = arith.mulf %262, %265 : f32
                    %267 = affine.load %alloc_55[%259] : memref<16xf32>
                    %268 = arith.addf %266, %267 : f32
                    affine.store %268, %alloc_55[%259] : memref<16xf32>
                    %269 = affine.apply #map46(%c0)
                    %270 = arith.addi %arg6, %16 : index
                    %271 = arith.addi %arg7, %c0_49 : index
                    %272 = memref.load %alloc_21[%270, %271] : memref<32x256xf32>
                    %273 = arith.addi %arg7, %c0_50 : index
                    %274 = arith.addi %269, %17 : index
                    %275 = memref.load %alloc_22[%273, %274] : memref<256x64xf32>
                    %276 = arith.mulf %272, %275 : f32
                    %277 = affine.load %alloc_55[%269] : memref<16xf32>
                    %278 = arith.addf %276, %277 : f32
                    affine.store %278, %alloc_55[%269] : memref<16xf32>
                    %279 = affine.apply #map47(%c0)
                    %280 = arith.addi %arg6, %16 : index
                    %281 = arith.addi %arg7, %c0_49 : index
                    %282 = memref.load %alloc_21[%280, %281] : memref<32x256xf32>
                    %283 = arith.addi %arg7, %c0_50 : index
                    %284 = arith.addi %279, %17 : index
                    %285 = memref.load %alloc_22[%283, %284] : memref<256x64xf32>
                    %286 = arith.mulf %282, %285 : f32
                    %287 = affine.load %alloc_55[%279] : memref<16xf32>
                    %288 = arith.addf %286, %287 : f32
                    affine.store %288, %alloc_55[%279] : memref<16xf32>
                    %289 = affine.apply #map48(%c0)
                    %290 = arith.addi %arg6, %16 : index
                    %291 = arith.addi %arg7, %c0_49 : index
                    %292 = memref.load %alloc_21[%290, %291] : memref<32x256xf32>
                    %293 = arith.addi %arg7, %c0_50 : index
                    %294 = arith.addi %289, %17 : index
                    %295 = memref.load %alloc_22[%293, %294] : memref<256x64xf32>
                    %296 = arith.mulf %292, %295 : f32
                    %297 = affine.load %alloc_55[%289] : memref<16xf32>
                    %298 = arith.addf %296, %297 : f32
                    affine.store %298, %alloc_55[%289] : memref<16xf32>
                    %299 = affine.apply #map49(%c0)
                    %300 = arith.addi %arg6, %16 : index
                    %301 = arith.addi %arg7, %c0_49 : index
                    %302 = memref.load %alloc_21[%300, %301] : memref<32x256xf32>
                    %303 = arith.addi %arg7, %c0_50 : index
                    %304 = arith.addi %299, %17 : index
                    %305 = memref.load %alloc_22[%303, %304] : memref<256x64xf32>
                    %306 = arith.mulf %302, %305 : f32
                    %307 = affine.load %alloc_55[%299] : memref<16xf32>
                    %308 = arith.addf %306, %307 : f32
                    affine.store %308, %alloc_55[%299] : memref<16xf32>
                  }
                  %87 = affine.load %alloc_55[%c0] : memref<16xf32>
                  %88 = arith.addi %arg6, %arg5 : index
                  %89 = arith.addi %c0, %arg4 : index
                  memref.store %87, %alloc_17[%88, %89] : memref<10000x10xf32>
                  %90 = affine.apply #map23(%c0)
                  %91 = affine.load %alloc_55[%90] : memref<16xf32>
                  %92 = arith.addi %arg6, %arg5 : index
                  %93 = arith.addi %90, %arg4 : index
                  memref.store %91, %alloc_17[%92, %93] : memref<10000x10xf32>
                  %94 = affine.apply #map24(%c0)
                  %95 = affine.load %alloc_55[%94] : memref<16xf32>
                  %96 = arith.addi %arg6, %arg5 : index
                  %97 = arith.addi %94, %arg4 : index
                  memref.store %95, %alloc_17[%96, %97] : memref<10000x10xf32>
                  %98 = affine.apply #map25(%c0)
                  %99 = affine.load %alloc_55[%98] : memref<16xf32>
                  %100 = arith.addi %arg6, %arg5 : index
                  %101 = arith.addi %98, %arg4 : index
                  memref.store %99, %alloc_17[%100, %101] : memref<10000x10xf32>
                  %102 = affine.apply #map39(%c0)
                  %103 = affine.load %alloc_55[%102] : memref<16xf32>
                  %104 = arith.addi %arg6, %arg5 : index
                  %105 = arith.addi %102, %arg4 : index
                  memref.store %103, %alloc_17[%104, %105] : memref<10000x10xf32>
                  %106 = affine.apply #map40(%c0)
                  %107 = affine.load %alloc_55[%106] : memref<16xf32>
                  %108 = arith.addi %arg6, %arg5 : index
                  %109 = arith.addi %106, %arg4 : index
                  memref.store %107, %alloc_17[%108, %109] : memref<10000x10xf32>
                  %110 = affine.apply #map41(%c0)
                  %111 = affine.load %alloc_55[%110] : memref<16xf32>
                  %112 = arith.addi %arg6, %arg5 : index
                  %113 = arith.addi %110, %arg4 : index
                  memref.store %111, %alloc_17[%112, %113] : memref<10000x10xf32>
                  %114 = affine.apply #map42(%c0)
                  %115 = affine.load %alloc_55[%114] : memref<16xf32>
                  %116 = arith.addi %arg6, %arg5 : index
                  %117 = arith.addi %114, %arg4 : index
                  memref.store %115, %alloc_17[%116, %117] : memref<10000x10xf32>
                  %118 = affine.apply #map43(%c0)
                  %119 = affine.load %alloc_55[%118] : memref<16xf32>
                  %120 = arith.addi %arg6, %arg5 : index
                  %121 = arith.addi %118, %arg4 : index
                  memref.store %119, %alloc_17[%120, %121] : memref<10000x10xf32>
                  %122 = affine.apply #map44(%c0)
                  %123 = affine.load %alloc_55[%122] : memref<16xf32>
                  %124 = arith.addi %arg6, %arg5 : index
                  %125 = arith.addi %122, %arg4 : index
                  memref.store %123, %alloc_17[%124, %125] : memref<10000x10xf32>
                  %126 = affine.apply #map32(%c0)
                  %127 = affine.load %alloc_55[%126] : memref<16xf32>
                  %128 = arith.addi %arg6, %arg5 : index
                  %129 = arith.addi %126, %arg4 : index
                  memref.store %127, %alloc_17[%128, %129] : memref<10000x10xf32>
                  %130 = affine.apply #map45(%c0)
                  %131 = affine.load %alloc_55[%130] : memref<16xf32>
                  %132 = arith.addi %arg6, %arg5 : index
                  %133 = arith.addi %130, %arg4 : index
                  memref.store %131, %alloc_17[%132, %133] : memref<10000x10xf32>
                  %134 = affine.apply #map46(%c0)
                  %135 = affine.load %alloc_55[%134] : memref<16xf32>
                  %136 = arith.addi %arg6, %arg5 : index
                  %137 = arith.addi %134, %arg4 : index
                  memref.store %135, %alloc_17[%136, %137] : memref<10000x10xf32>
                  %138 = affine.apply #map47(%c0)
                  %139 = affine.load %alloc_55[%138] : memref<16xf32>
                  %140 = arith.addi %arg6, %arg5 : index
                  %141 = arith.addi %138, %arg4 : index
                  memref.store %139, %alloc_17[%140, %141] : memref<10000x10xf32>
                  %142 = affine.apply #map48(%c0)
                  %143 = affine.load %alloc_55[%142] : memref<16xf32>
                  %144 = arith.addi %arg6, %arg5 : index
                  %145 = arith.addi %142, %arg4 : index
                  memref.store %143, %alloc_17[%144, %145] : memref<10000x10xf32>
                  %146 = affine.apply #map49(%c0)
                  %147 = affine.load %alloc_55[%146] : memref<16xf32>
                  %148 = arith.addi %arg6, %arg5 : index
                  %149 = arith.addi %146, %arg4 : index
                  memref.store %147, %alloc_17[%148, %149] : memref<10000x10xf32>
                }
              } else {
                %alloc_55 = memref.alloc() {alignment = 64 : i64} : memref<1xf32>
                %c0_56 = arith.constant 0 : index
                affine.for %arg6 = 0 to 4 {
                  affine.for %arg7 = 0 to min #map36(%arg3, %arg5, %arg2, %arg1, %arg4) {
                    %24 = arith.addi %arg6, %arg5 : index
                    %25 = arith.addi %arg7, %arg4 : index
                    %26 = memref.load %alloc_17[%24, %25] : memref<10000x10xf32>
                    affine.store %26, %alloc_55[%c0_56] : memref<1xf32>
                    affine.for %arg8 = 0 to min #map38(%arg3, %arg5, %arg2, %arg1, %arg4) {
                      %30 = arith.addi %arg6, %16 : index
                      %31 = arith.addi %arg8, %c0_49 : index
                      %32 = memref.load %alloc_21[%30, %31] : memref<32x256xf32>
                      %33 = arith.addi %arg8, %c0_50 : index
                      %34 = arith.addi %arg7, %17 : index
                      %35 = memref.load %alloc_22[%33, %34] : memref<256x64xf32>
                      %36 = arith.mulf %32, %35 : f32
                      %37 = affine.load %alloc_55[%c0_56] : memref<1xf32>
                      %38 = arith.addf %36, %37 : f32
                      affine.store %38, %alloc_55[%c0_56] : memref<1xf32>
                    }
                    %27 = affine.load %alloc_55[%c0_56] : memref<1xf32>
                    %28 = arith.addi %arg6, %arg5 : index
                    %29 = arith.addi %arg7, %arg4 : index
                    memref.store %27, %alloc_17[%28, %29] : memref<10000x10xf32>
                  }
                }
              }
            }
          }
        }
      }
    }
    affine.for %arg1 = 0 to 10000 {
      affine.for %arg2 = 0 to 10 {
        %8 = affine.load %alloc_17[%arg1, %arg2] : memref<10000x10xf32>
        %9 = affine.load %7[%arg2] : memref<10xf32>
        %10 = arith.addf %8, %9 : f32
        affine.store %10, %alloc_17[%arg1, %arg2] : memref<10000x10xf32>
      }
    }
    %alloc_23 = memref.alloc() {alignment = 16 : i64} : memref<10000x10xf32>
    %alloc_24 = memref.alloc() : memref<f32>
    %alloc_25 = memref.alloc() : memref<f32>
    affine.for %arg1 = 0 to 10000 {
      affine.store %cst_1, %alloc_24[] : memref<f32>
      affine.store %cst, %alloc_25[] : memref<f32>
      affine.for %arg2 = 0 to 10 {
        %10 = affine.load %alloc_25[] : memref<f32>
        %11 = affine.load %alloc_17[%arg1, %arg2] : memref<10000x10xf32>
        %12 = arith.cmpf ogt, %10, %11 : f32
        %13 = arith.select %12, %10, %11 : f32
        affine.store %13, %alloc_25[] : memref<f32>
      }
      %8 = affine.load %alloc_25[] : memref<f32>
      affine.for %arg2 = 0 to 10 {
        %10 = affine.load %alloc_24[] : memref<f32>
        %11 = affine.load %alloc_17[%arg1, %arg2] : memref<10000x10xf32>
        %12 = arith.subf %11, %8 : f32
        %13 = math.exp %12 : f32
        %14 = arith.addf %10, %13 : f32
        affine.store %14, %alloc_24[] : memref<f32>
        affine.store %13, %alloc_23[%arg1, %arg2] : memref<10000x10xf32>
      }
      %9 = affine.load %alloc_24[] : memref<f32>
      affine.for %arg2 = 0 to 10 {
        %10 = affine.load %alloc_23[%arg1, %arg2] : memref<10000x10xf32>
        %11 = arith.divf %10, %9 : f32
        affine.store %11, %alloc_23[%arg1, %arg2] : memref<10000x10xf32>
      }
    }
    %alloc_26 = memref.alloc() {alignment = 16 : i64} : memref<10000x10xf32>
    affine.for %arg1 = 0 to 10000 {
      affine.for %arg2 = 0 to 10 {
        %8 = affine.load %alloc_23[%arg1, %arg2] : memref<10000x10xf32>
        %9 = math.log %8 : f32
        affine.store %9, %alloc_26[%arg1, %arg2] : memref<10000x10xf32>
      }
    }
    return %alloc_26 : memref<10000x10xf32>
  }
  "krnl.entry_point"() {func = @main_graph, numInputs = 1 : i32, numOutputs = 1 : i32, signature = "[    { \22type\22 : \22f32\22 , \22dims\22 : [10000 , 1 , 28 , 28] , \22name\22 : \22image\22 }\0A\0A]\00@[   { \22type\22 : \22f32\22 , \22dims\22 : [10000 , 10] , \22name\22 : \22prediction\22 }\0A\0A]\00"} : () -> ()
}
